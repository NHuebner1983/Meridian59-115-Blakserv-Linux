// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
BossRoom is MonsterRoom

constants:

   include blakston.khd

resources:

classvars:

   viBossResetTime = 30 * 60 * 1000

properties:

   // template is list of lists, format:
   //     [&classname, row, col]
   plBossTemplate = $
   plHenchmenTemplate = $
   plBossTreasureTemplate = $

   // lists of references to current instances of above templates.
   plBoss = $
   plHenchmen = $
   plBossTreasure = $

   ptResetBossTimer = $

   piWaitingToStartBossResetTimer = FALSE
   piReadyToResetBoss = FALSE

messages:

////////////////////
// Boss setup code //
////////////////////
//

   Constructor()
   {
      Send(self,@SetupBossTemplates);
      if (plBossTemplate <> $)
      {
         Post(self,@ResetBoss);
      }

      propagate;
   }

   SetupBossTemplates()
   {
      // MUST override this in subclasses
      Debug ("MUST override SetupBossTemplates() in subclass of BossRoom!!");
      Post(self, @Delete);

      return;
   }

//
////////////////////
// Boss setup code //
////////////////////


////////////////////////////
// Boss death trigger code //
////////////////////////////
//
   SomethingKilled(killer = $,victim = $)
   {
      if plBoss <> $
      {
         // If victim is a boss,
         if FindListElem(plBoss, victim)
         {
            plBoss = DelListElem(plBoss, victim);

            // if all bosses are dead,
            if plBoss = $
            {
               // trigger special behavior
               Send(self, @BossKilledTrigger);

               // start to wait to reset
               piWaitingToStartBossResetTimer = TRUE;
               piReadyToResetBoss = FALSE;
            }
         }
      }

      propagate;
   }

   BossKilledTrigger()
   {
      // Can override this in subclasses to do special reward stuff here,
      // but MUST propagate.

      // Make boss treasure gettable (by forgetting it was
      // boss treasure to begin with)
      while plBossTreasure <> $
      {
         // Delete our reference to each object, but not the object itself.
         plBossTreasure = Rest(plBossTreasure);
      }

      return;
   }

//
////////////////////////////////
// end Boss death trigger code //
////////////////////////////////


////////////////////////
// Boss resetting code //
////////////////////////
//

   LastUserLeft()
   {
      local oBoss;

      if (piWaitingToStartBossResetTimer)
      {
         piWaitingToStartBossResetTimer = FALSE;
         ptResetBossTimer = CreateTimer(self,@ResetBossTrigger,viBossResetTime);
      }

      // Heal the bosses to max!
      foreach oBoss in plBoss
      {
         Send(oBoss,@SetMaxHitPoints,#amount=Send(oBoss,@ReturnMaxHitPoints));
      }
      foreach oBoss in plHenchmen
      {
         Send(oBoss,@SetMaxHitPoints,#amount=Send(oBoss,@ReturnMaxHitPoints));
      }

      propagate;
   }

   FirstUserEntered()
   {
      if piReadyToResetBoss
      {
         piReadyToResetBoss = FALSE;
         Send(self,@ResetBoss);
      }

      propagate;
   }

   ResetBossTrigger()
   {
      ptResetBossTimer = $;
      piReadyToResetBoss = TRUE;

      return;
   }

   ResetBoss()
   {
      local i, oTempMonster, oTempTreasure;

      // These are unnecessary, but just to be safe...
      piWaitingToStartBossResetTimer = FALSE;
      piReadyToResetBoss = FALSE;

      // First, delete Boss and Henchmen.
      while plBoss <> $
      {
         Post(First(plBoss), @Delete);                      // Delete the first object
         plBoss = Rest(plBoss);                             // Delete our reference to it
      }

      while plHenchmen <> $
      {
         Post(First(plHenchmen), @Delete);                  // Delete the first object
         plHenchmen = Rest(plHenchmen);                     // Delete our reference to it
      }

      // Just in case there's boss treasure still hangin' around, delete it too.
      while plBossTreasure <> $
      {
         Post(First(plBossTreasure), @Delete);              // Delete the first object
         plBossTreasure = Rest(plBossTreasure);             // Delete our reference to it
      }

      // Next, create Boss/Henchmen at start locations.

      if plBossTemplate = $
      {
         Debug("plBossTemplate is empty!");

         return;
      }

      foreach i in plBossTemplate
      {
         oTempMonster = Create(First(i));
         // For now, assume no problems with ReqSomethingEntered failing
         // (another monster blocking creation site).
         Send(self,@NewHold,#what=oTempMonster,
               #new_row=nth(i,2),#new_col=nth(i,3),
               #fine_row=FINENESS/2,#fine_col=FINENESS/2);
         plBoss = Cons(oTempMonster, plBoss);
      }

      if plHenchmenTemplate <> $
      {
         foreach i in plHenchmenTemplate
         {
            oTempMonster = Create(First(i));
            // For now, assume no problems with ReqSomethingEntered failing
            // (another monster blocking creation site).
            Send(self,@NewHold,#what=oTempMonster,
                  #new_row=nth(i,2),#new_col=nth(i,3),
                  #fine_row=FINENESS/2,#fine_col=FINENESS/2);
            plHenchmen = Cons(oTempMonster, plHenchmen);
         }
      }

      // Last, make treasure. For now, no sweeping first - FIX??
      if plBossTreasureTemplate <> $
      {
         foreach i in plBossTreasureTemplate
         {
            oTempTreasure = Create(First(i));
            Send(self,@NewHold,#what=oTempTreasure,
                  #new_row=nth(i,2),#new_col=nth(i,3),
                  #fine_row=nth(i,4),#fine_col=nth(i,5));
            plBossTreasure = Cons(oTempTreasure, plBossTreasure);
         }
      }

      return;
   }

//
////////////////////////////
// end Boss resetting code //
////////////////////////////


//////////////////////////////////
// Make boss treasure ungettable //
//////////////////////////////////
//
   ReqLeaveHold(what = $)
   {
      local i;

      if plBossTreasure <> $
      {
         foreach i in plBossTreasure
         {
            if what = i
            {
               Debug("Someone naughty is trying to steal the boss's treasure!");

               return FALSE;
            }
         }
      }

      propagate;
   }

//
//////////////////////////////////////
// end Make boss treasure ungettable //
//////////////////////////////////////


/////////////////////////
// Custom disposal code //
/////////////////////////
//
// Ensures that bosses, henchmen, and boss treasure won't be deleted
// automatically. Nnote that boss treasure becomes normal treasure when
// the boss is killed. The dispose code here is the old (inefficient)
// code, not the improved one used by room.kod. Need to upgrade this.
//
   DisposeTimer()
   {
      local iLen,i,count,delete_index;

      ptDispose = $;
      ptDispose = CreateTimer(self,@DisposeTimer,piDispose_delay);

      foreach i in plPassive
      {
         // If there is a player's corpse anywhere, don't clear it.
         // player's corpse has own delete timer.  Monster corpses
         // do not trigger this effect.

         if IsClass(First(i),&DeadBody)
            AND Send(First(i),@WasPlayer)
            {
               return;
            }
      }

      if NOT pbUser_in_room
      {
         // If no one is here, then try to destroy everything.
         Send(self,@DestroyDisposable);

         return;
      }
      else
      {
         // Someone's in the room.  If there are more than 5 things in the room,
         // delete the 20// that are the oldest.  Note:  this may be screwed up
         // by permanent, non-deleting objects like trees and braziers.

         iLen = Length(plPassive);
         if iLen > 5
         {
            delete_index = 4*iLen/5;
            count = 0;
            foreach i in plPassive
            {
               count = count + 1;

               if (count > delete_index)
                  AND (FindListElem(plBossTreasure,First(i)) = 0)
               {        //*****
                  Send(First(i),@DestroyDisposable);
               }
            }
         }
      }

      return;
   }

   DestroyDisposable()
   {
      local i;

      foreach i in plActive
      {
         // Never dispose of Boss or Henchmen automatically,
         // handle this in reset code.
         if (FindListElem(plBoss,First(i)) = 0)
            AND (FindListElem(plHenchmen,First(i)) = 0)
         {      //*****
            Send(First(i),@DestroyDisposable);
         }
      }

      foreach i in plPassive
      {
         // Never dispose of Boss Treasure automatically,
         // handle this in reset code.
         if FindListElem(plBossTreasure,First(i)) = 0
         {                                               //*****
            Send(First(i),@DestroyDisposable);
         }
      }

      return;
   }
//
/////////////////////////////
// end Custom disposal code //
/////////////////////////////

////////////
// cleanup //
////////////
//
   Delete()
   {
      plBossTemplate = $;
      plHenchmenTemplate = $;
      plBossTreasureTemplate = $;

      while plBoss <> $
      {
         SetNth(plBoss,1,$);
         plBoss = Rest(plBoss);
      }

      while plHenchmen <> $
      {
         SetNth(plHenchmen,1,$);
         plHenchmen = Rest(plHenchmen);
      }

      while plBossTreasure <> $
      {
         SetNth(plBossTreasure,1,$);
         plBossTreasure = Rest(plBossTreasure);
      }

      if ptResetBossTimer <> $
      {
         DeleteTimer(ptResetBossTimer);
         ptResetBossTimer = $;
      }

      propagate;
   }
//
////////////
// cleanup //
////////////

   CanHavePlayerPortal()
   {
      // Don't allow portals here, or boss might get out
      return false;
   }

end
////////////////////////////////////////////////////////////////////////////////
