// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
OutdoorsI9 is MonsterRoom

constants:

   SECTOR_DOOR = 1

   // 10 seconds
   DOORWAY_DELAY = 10000

   include blakston.khd

resources:

   include i9.lkod

   room_name_i9 = "Ukgoth, Holy Land of Trolls"
   room_i9 = i9.roo
   i9_music = walk4.ogg

   i9_qor="Qor the Vile"

   i9_sound_rsc = down2.ogg

   i9_node_name = "the Heart of Zjiria"
   i9_node_desc = \
      "You realize you've found one of the rarest mana nodes, named after "
      "Qor's most trusted lieutenant.\n\n%s"

   i9_portal_icon_rsc = teleport.bgf

classvars:

   vrName = room_name_i9

   viTeleport_row = 42
   viTeleport_col = 14

   viTerrain_type = TERRAIN_MOUNTAIN | TERRAIN_MYSTICAL

   viWeatherZone = WEATHER_ZONE_CV
   viWeatherMask = WEATHER_MASK_MOUNTAINS

properties:

   prRoom = room_i9
   piRoom_num = RID_I9

   prMusic = i9_music

   piBaseLight = LIGHT_DARK

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   pbSnowGroundTexture = TRUE

   ptDoorway = $

   piGen_time = 25000
   piGen_percent = 85

   piInit_count_min = 9
   piInit_count_max = 12

   piMonster_count_max = 15

   poNode = $
   piPortal_counter = 0
   pbPuzzle = TRUE

messages:

   Constructed()
   {
      plMonsters = [ [&Troll, 100] ];

      plGenerators = [ [9, 50], [11, 30], [6, 22], [24, 31], [25, 50],
                       [30, 53], [52, 53], [36, 59], [50, 36], [42, 15], 
                       [52, 8], [60, 37], [62, 43], [32, 12], [10,10]
                     ];

      plPatrolPaths = [ [[6,57], [3,65], [7,47], [14,41], [9,35], [12,46], [9,50]],
                        [[9,26], [9,36], [12,46], [11,30]],
                        [[4,25], [6,18], [8,10], [6,22]],
                        [[21,31], [20,25], [14,27], [21,29], [24,31]],
                        [[20,55], [19,61], [23,52], [24,48], [24,49], [25,50]],
                        [[27,52], [30,51], [31,43], [30,53]],
                        [$],
                        [[41,58], [46,52], [48,49], [36,59]],
                        [[50,23], [49,46], [50,36]],
                        [$],
                        [[49,5], [47,13], [47,17], [50,5], [52,8]],
                        [[58,44], [59,33], [60,37]],
                        [[57,45], [62,43]],
                        [$],
                        [$] ];
                     
      // Just construct the Node.  We can find and place it later.
      Create(&ManaNode,#node_num=NODE_i9,#name_rsc=i9_node_name,
             #desc_rsc=i9_node_desc,#iRoomNum=piRoom_num);

      propagate;
   }

   CreateStandardExits()
   {
      plEdge_exits = $;

      plEdge_Exits = Cons([LEAVE_NORTH, RID_CASTLE1C, 21, 3, ANGLE_EAST],
                           plEdge_exits);
      plEdge_Exits = Cons([LEAVE_EAST, RID_I8, 60, 23, ROTATE_NONE],
                           plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_H9, 21, 43, ROTATE_NONE],
                           plEdge_exits);

      propagate;
   }

   IsMoveOK(old_row = 1, old_col = 1, old_fine_row = 1, old_fine_col = 1,
            new_row = 1, new_col = 1, new_fine_row = 1, new_fine_col = 1,
            who=$)
   {
      local iRowDec, iColDec, iNewRowDec, iNewColDec, iLineRow, iLineCol,
            iLineRowNew, iLineColNew;

      // Convert player's coordinates to xxyy format, where xx is
      // the row or col, and yy is the finerow or finecol converted
      // from yy/64 to yy/100.
      iRowDec = (old_row * 100) + (old_fine_row * 15625 / 10000);
      iColDec = (old_col * 100) + (old_fine_col * 15625 / 10000);
      iNewRowDec = (new_row * 100) + (new_fine_row * 15625 / 10000);
      iNewColDec = (new_col * 100) + (new_fine_col * 15625 / 10000);

      // This is a line going to CV from near UK entrance.
      // Points on line are 900, 2500; 800, 2800.
      if (iColDec >= 1400 AND iColDec <= 4000)
      {
         if iColDec > 1400 AND iNewColDec <= 1400
            AND iRowDec > 900 AND iRowDec < 3800
         {
            // Allow players who are jumping the gap.
            if iNewRowDec >= 3800
            {
               return TRUE;
            }

            Debug("ALERT!  ",Send(who,@GetTrueName),who,
                  "tried to move through straight wall in ",Send(self,@GetName),
                  " from ",old_row,old_col,old_fine_row,old_fine_col," to ",
                  new_row,new_col,new_fine_row,new_fine_col);

            return FALSE;
         }

         iLineRow = ((-10000 * iColDec + 52000000) / 3 / 10000);
         iLineCol = ((52000000 + (-30000 * iRowDec)) / 10000);
         iLineColNew = ((52000000 + (-30000 * iNewRowDec)) / 10000);
         iLineRowNew = ((-10000 * iNewColDec + 52000000) / 3 / 10000);

         if (iColDec >= iLineCol
               AND iNewColDec < iLineColNew)
            AND (iRowDec >= iLineRow
               AND iNewRowDec < iLineRowNew)
         {
            Debug("ALERT!  ",Send(who,@GetTrueName),who,
                  "tried to move through angled wall in ",Send(self,@GetName),
                  " from ",old_row,old_col,old_fine_row,old_fine_col," to ",
                  new_row,new_col,new_fine_row,new_fine_col);

            return FALSE;
         }
      }

      return TRUE;
   }

   SomeoneSaid(what=$,string=$)
   {
      local lPassive, i, each_obj;

      if StringEqual(string,i9_qor)
      {
         lPassive = Send(what,@GetHolderPassive);
         foreach i in lPassive
         {
            each_obj = Send(what,@HolderExtractObject,#data=i);
            if IsClass(each_obj,&Scepter)
            {
               foreach i in plActive
               {
                  Send(First(i),@WaveSendUser,#wave_rsc=i9_sound_rsc);
               }

               Send(self,@SetSector,#sector=SECTOR_DOOR,
                    #animation=ANIMATE_FLOOR_LIFT,
                    #height=340,#speed=16);
               ptDoorway = CreateTimer(self,@DoorCloseTimer,DOORWAY_DELAY);
               Send(each_obj,@Delete);

               break;
            }
         }
      }

      propagate;
   }

   DoorCloseTimer()
   {
      ptDoorway = $;
      Send(self,@SetSector,#sector=SECTOR_DOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=440,#speed=16);

      return;
   }

   Delete()
   {
      local oNode;

      oNode = Send(SYS,@FindNodeByNum,#num=NODE_I9);
      if oNode <> $
      {
         // delete 'our' node
         Send(oNode,@Delete);
      }

      poNode = $;
      
      if ptDoorway <> $
      {
         DeleteTimer(ptDoorway);
         ptDoorway = $;
      }

      propagate;
   }

   RecalcLightAndWeather()
   {
      local iHour,iLight_effect, i, bFound;

      iHour = Send(SYS,@GetHour);

      if iHour = 0
      {
         iLight_effect = FLICKER_ON;
      }
      else
      {
         iLight_effect = FLICKER_OFF;
      }

      Send(self,@SetSectorLight,#sector=2,#light_effect=iLight_effect);

      if iHour = 0 AND poNode = $
      {
         poNode = Send(SYS,@FindNodeByNum,#num=NODE_I9);
         Send(poNode,@NodeAppear,#where=self,#row=27,#col=61,
               #fine_row=48,#fine_col=40);

         foreach i in plActive
         {
            if IsClass(First(i),&StoneTroll)
            {
               propagate;
            }
         }

         Send(self,@NewHold,#what=Create(&StoneTroll),#new_row=28,#new_col=63,
               #fine_row=40,#fine_col=32,#new_angle=ANGLE_NORTH_WEST);
         Send(self,@NewHold,#what=Create(&StoneTroll),#new_row=28,#new_col=59,
               #fine_row=40,#fine_col=48,#new_angle=ANGLE_NORTH_EAST);
         Send(self,@NewHold,#what=Create(&StoneTroll),#new_row=25,#new_col=61,
               #fine_row=48,#fine_col=48,#new_angle=ANGLE_SOUTH);

         propagate;
      }

      if iHour = 1
      {
         if poNode <> $
         {
            Send(poNode,@NodeDisappear);
            poNode = $;
         }
      }

      piPortal_counter = piPortal_counter - 1;
      if (piPortal_counter <= 0)
      {
         Send(self,@ClosePortalToTemple);
      }

      propagate;
   }

   // Added because our players are too smart for their own good.
   // player casts Martyr's Battleground (or Truce on Sacred Haven)
   // while the tokens are on the ground, and a portal to the Martyr's
   // Battleground area (and node) appears.

   SpellCast(who = $, oSpell = $, lItems = $)
   {
      local i, bOne, bTwo, bThree, bFour, bFive;

      if not pbPuzzle
      {
         return;
      }

      if oSpell <> $
         AND (Send(oSpell,@GetSpellNum) = SID_MARTYRS_BATTLEGROUND
            OR ((NOT Send(SYS,@IsPKAllowed))
            AND Send(oSpell,@GetSpellNum) = SID_TRUCE))
      {
         bOne = FALSE;
         bTwo = FALSE;
         bThree = FALSE;
         bFour = FALSE;
         bFive = FALSE;

         foreach i in plPassive
         {
            if IsClass(First(i),&OneToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bOne = TRUE;
            }
            if IsClass(First(i),&TwoToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bTwo = TRUE;
            }
            if IsClass(First(i),&ThreeToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bThree = TRUE;
            }
            if IsClass(First(i),&FourToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bFour = TRUE;
            }
            if IsClass(First(i),&FiveToken)
               AND Send(self,@IsInStoneHenge,#what=First(i))
            {
               bFive = TRUE;
            }
         }

         if NOT bOne
            OR NOT bTwo
            OR NOT bThree
            OR NOT bFour
            OR NOT bFive
         {
            propagate;
         }

         // Okay, all the tokens should be here and in stonehenge.
         // Open the portals.
         Send(self,@OpenPortalToTemple);
      }

      propagate;
   }

   IsInStonehenge(what=$)
   {
      local iRow, iCol;

      if what = $
      {
         Debug("what = $!  That ain't right!");

         return FALSE;
      }

      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);

      if ((iRow >= 25 ) AND (iRow <= 29)
         AND (iCol >= 59) AND (iCol <= 63))
      {
         return TRUE;
      }

      return FALSE;
   }

   OpenPortalToTemple()
   {
      local i, oPortal, oRoom;

      foreach i in plActive
      {
         if IsClass(First(i),&Portal)
         {
            // Refresh the portal counter, then return
            piPortal_counter = 10;

            return;
         }
      }

      foreach i in plPassive
      {
         if First(i) <> $ AND IsClass(First(i),&token)
         {
            Send(First(i),@RandomTeleport);
         }
      }

      oPortal = Create(&Portal,#dest_room_num=RID_CANYON2,
                       #dest_row=27,#dest_col=61,#icon=i9_portal_icon_rsc);
      Send(self,@NewHold,#what=oPortal,#new_row=25,#new_col=61,
            #fine_row=48,#fine_col=48,#new_angle=ANGLE_NORTH);

      oRoom = Send(SYS,@FindRoomByNum,#num=RID_CANYON2);
      Send(oRoom,@ActivatePortal);
      piPortal_Counter = 10;

      return;
   }

   ClosePortalToTemple()
   {
      local i, oRoom;

      foreach i in plActive
      {
         if IsClass(First(i),&Portal)
         {
            Send(First(i),@Delete);
            oRoom = Send(SYS,@FindRoomByNum,#num=RID_CANYON2);
            Send(oRoom,@DeactivatePortal);
         }
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
