// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////////
TosSecret is MonsterRoom

constants:

   include blakston.khd

resources:

   include tossecret.lkod

   room_name_tossecret = "The Smuggler's Way"
   room_tossecret = tossecret.roo
   music_tossecret = ksong.ogg

   darkness_dead_rat = \
	  "~I~BThe sacrifice of this dusk rat has created a portal which leads "
	  "to a land where creatures should be slaughtered in the name of evil."

   darkness_enter_msg = \
	  "~IYou feel this room holds a secret that only a follower of evil can reveal."

classvars:

   vrName = room_name_tossecret

   viTeleport_row = 13
   viTeleport_col = 7

   viTerrain_type = TERRAIN_CITY | TERRAIN_NECROPOLIS

properties:

   prRoom = room_tossecret
   piRoom_num = RID_TOS_SMUGGLERS_WAY
   prMusic = music_tossecret

   piBaseLight = LIGHT_VERY_DARK

messages:

   Constructed()
   {
      plMonsters = [ [&DuskRat, 50], [&Frogman, 50] ];

      plGenerators = [ [12, 12], [15, 4], [22, 15] ];

      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=25,#new_col=14,
            #fine_row=13,#fine_col=28);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=13,#new_col=2,
            #fine_row=20,#fine_col=63);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=18,#new_col=3,
            #fine_row=32,#fine_col=3);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=28,#new_col=6,
            #fine_row=22,#fine_col=15);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=2,#new_col=13,
            #fine_row=32,#fine_col=36);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=2,#new_col=10,
            #fine_row=32,#fine_col=44);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=15,#new_col=9,
            #fine_row=47,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=8,#new_col=9,
            #fine_row=38,#fine_col=47);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=8,#new_col=14,
            #fine_row=40,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=15,#new_col=14,
            #fine_row=47,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=17,#new_col=14,
            #fine_row=14,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=24,#new_col=9,
            #fine_row=25,#fine_col=47);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=22,#new_col=6,
            #fine_row=47,#fine_col=15);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=28,#new_col=7,
            #fine_row=47,#fine_col=15);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=26,#new_col=7,
            #fine_row=48,#fine_col=15);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=34,#new_col=12,
            #fine_row=26,#fine_col=16);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=34,#new_col=9,
            #fine_row=26,#fine_col=47);
      Send(self,@NewHold,#what=Create(&Brazier),#new_row=20,#new_col=9,
            #fine_row=48,#fine_col=47);

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 36, 11, RID_TOS_STORAGE, 1, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 36, 10, RID_TOS_STORAGE, 1, 4, ROTATE_NONE ],plExits);

      propagate;
   }

   SomethingMoved(what = $,new_row = $, new_col = $, fine_row = FINENESS_HALF,
                  fine_col = FINENESS_HALF)
   {
      if (what = $
         OR NOT IsClass(what,&User))
      {
         propagate;
      }

      if (new_row = 1
         AND ((new_col = 11 AND fine_col >= 32)
            OR (new_col = 12 AND fine_col <= 32)))
      {
         Send(SYS,@UtilGoNearSquare,#what=what,
               #where=Send(SYS,@FindRoomByNum,#num=RID_I6),
               #new_row=32,#new_col=13,#new_angle=ANGLE_SOUTH);

         return;
      }

      propagate;
   }

   SomethingKilled(what=$,victim=$)
   {
	   local oSpell;
	   
		if oDuskRatPortal <> $
		{
			Send(oDuskRatPortal, @Delete);
		}

		oSpell = Send(SYS,@FindSpellByNum,#num=SID_DARKNESS);
		
		if victim <> $ AND oSpell <> $ AND IsClass(victim, &DuskRat) AND Send(self,@IsEnchanted,#what=oSpell)
		{
			oDuskRatPortal = Create(&Portal,#dest_room_num=RID_KOC_SEWER1,#dest_row=46,#dest_col=5,
				#dest_fine_row=48, #dest_fine_col=56);

			Send(self,@NewHold,#what=oDuskRatPortal,#new_row=34, #new_col=4,
				#fine_row=12,#fine_col=3,#new_angle=ANGLE_NORTH);

			Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=darkness_dead_rat,
				#what=self);
		}
		
		propagate;
   }
   
   FirstUserEntered()
   {
		Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=darkness_enter_msg,
			#what=self);
			
		propagate;
   }
   
   LastUserLeft()
   {
		if oDuskRatPortal <> $
		{
			Send(oDuskRatPortal, @Delete);
		}
		
		oDuskRatPortal = $;

		propagate;
   }   
   
end
////////////////////////////////////////////////////////////////////////////////
