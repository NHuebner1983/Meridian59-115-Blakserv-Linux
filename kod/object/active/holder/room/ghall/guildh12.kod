// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////
GuildHall12 is GuildHall

constants:

   MAIN_DOOR  = 59
   MAIN_DOOR_OPEN = 700
   MAIN_DOOR_CLOSED = 600
   SECRET_DOOR = 155
   SECRET_DOOR_OPEN = 190
   SECRET_DOOR_CLOSED = 105
   
   DOOR_DELAY = 5000
       
   LEVEL_FOYER = 1
   LEVEL_ONE =   2
   LEVEL_TWO =   3

   include blakston.khd

resources:

   include guildh12.lkod

   room_name_guildh12 = "West Tower Guild Hall in Ko'catan"
   room_guildh12 = guildh12.roo

   guildh12_sealed1 = \
      "This door is sealed by the order of the captain of the guard."
   guildh12_sealed2 = \
      "The door to the inner city wall is locked to non-military personnel."
   guildh12_sealed3 = \
      "The door to the upper barracks is locked."
   guildh12_sealed4 = \
      "Access to the upper wall is denied to non-military personnel."
   guildh12_sealed5 = \
      "All access to the upper levels of the west tower is blocked by an iron "
      "gate.  It would not be wise to violate a lease with the Ko'catan army."

   guildh12_gong = gong.ogg

   guildh12_lift_up_sound = stoneup2.ogg
   guildh12_lift_down_sound = stonedn2.ogg

classvars:

   vrName = room_name_guildh12

   viTeleport_row = 34
   viTeleport_col = 8

   viNews_row = 37
   viNews_col = 46
   viNews_finerow = 32
   viNews_finecol = 16

   viFoyer_north = 27
   viFoyer_south = 48
   viFoyer_west = 0
   viFoyer_east = 27

   viLever_row = 7
   viLever_col = 49
   viLever_fine_row = 24
   viLever_fine_col = 24

   viInner_teleport_row = 36
   viInner_teleport_col = 48

   viQuality = 8
   viTerrain_type = TERRAIN_GUILDHALL | TERRAIN_CASTLE
   viSeconds_til_close = 7

   vrEntrancedoor_open_sound = guildh12_lift_up_sound
   vrEntrancedoor_close_sound = guildh12_lift_up_sound
   //vrSecretdoor_open_sound = 
   //vrSecretdoor_close_sound = 

properties:

   prRoom = room_guildh12
   piRoom_num = RID_GUILDH12

   piBaseLight = LIGHT_NICE
   piOutside_factor = OUTDOORS_5

   ptSecret = $
   ptEntrance = $

messages:

   Constructor()
   {
      plGuild_doors = [[ 37,2],[37,3]];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 37, 9, ROOM_LOCKED_DOOR, guildh12_sealed1 ],plExits);
      plExits = Cons([ 37, 7, ROOM_LOCKED_DOOR, guildh12_sealed1 ],plExits);
      plExits = Cons([ 37, 5, ROOM_LOCKED_DOOR, guildh12_sealed1 ],plExits);
      plExits = Cons([ 37, 5, ROOM_LOCKED_DOOR, guildh12_sealed1 ],plExits);
      plExits = Cons([ 36, 52, ROOM_LOCKED_DOOR, guildh12_sealed2 ],plExits);
      plExits = Cons([ 9, 47, ROOM_LOCKED_DOOR, guildh12_sealed3 ],plExits);
      plExits = Cons([ 9, 48, ROOM_LOCKED_DOOR, guildh12_sealed3 ],plExits);
      plExits = Cons([ 8, 49, ROOM_LOCKED_DOOR, guildh12_sealed3 ],plExits);
      plExits = Cons([ 9, 49, ROOM_LOCKED_DOOR, guildh12_sealed3 ],plExits);
      plExits = Cons([ 7, 53, ROOM_LOCKED_DOOR, guildh12_sealed4 ],plExits);
      plExits = Cons([ 8, 53, ROOM_LOCKED_DOOR, guildh12_sealed4 ],plExits);
      plExits = Cons([ 11, 50, ROOM_LOCKED_DOOR, guildh12_sealed5 ],plExits);
      plExits = Cons([ 12, 50, ROOM_LOCKED_DOOR, guildh12_sealed5 ],plExits);

      plExits = Cons([ 3, 50, RID_GUILDH12, 30, 48, ROTATE_NONE ],plExits);
      plExits = Cons([ 31, 49, RID_GUILDH12, 4, 51, ROTATE_NONE ],plExits);
      plExits = Cons([ 30, 49, RID_GUILDH12, 4, 51, ROTATE_NONE ],plExits);

      plExits = Cons([ 41, 9, RID_GUILDH12, 40, 50, ROTATE_NONE ],plExits);
      plExits = Cons([ 40, 9, RID_GUILDH12, 40, 50, ROTATE_NONE ],plExits);
      plExits = Cons([ 40, 49, RID_GUILDH12, 41, 8, ROTATE_NONE ],plExits);

      /// teleport in to (44, 23)
      plExits = Cons([ 46, 24, RID_KOC_NORTH, 4, 14, ROTATE_NONE ],plExits);
      plExits = Cons([ 46, 25, RID_KOC_NORTH, 4, 14, ROTATE_NONE ],plExits);
      plExits = Cons([ 45, 25, RID_KOC_NORTH, 4, 14, ROTATE_NONE ],plExits);
      plExits = Cons([ 45, 24, RID_KOC_NORTH, 4, 14, ROTATE_NONE ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $
      {
         DeleteTimer(ptSecret);
         ptSecret = $;
      }

      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   IsMoveOK(old_row = 1, old_col = 1, old_fine_row = 1, old_fine_col = 1,
            new_row = 1, new_col = 1, new_fine_row = 1, new_fine_col = 1,
            who = $)
   {
      // Hardcoded movement check, prevent hacking into hall.
      // Basic requirement door must not be open
      if ptEntrance = $
      {
         if Send(self,@InFoyer,#iRow=old_row,#iCol=old_col,
                  #iFineRow=old_fine_row,#iFineCol=old_fine_col)
            AND NOT Send(self,@IsPastEntranceLift,#iRow=old_row,#iCol=old_col,
                        #iFineRow=old_fine_row,#iFineCol=old_fine_col)
         {
            // We're in the foyer. Check if we're trying to move to
            // the hall entrance door.
            if Send(self,@IsPastEntranceLift,#iRow=new_row,#iCol=new_col,
                     #iFineRow=new_fine_row,#iFineCol=new_fine_col)
               OR NOT Send(self,@InFoyer,#iRow=new_row,#iCol=new_col,
                        #iFineRow=new_fine_Row,#iFineCol=new_fine_col)
            {
               // Bad player! Fail the attempt.
               Debug("ALERT!",Send(who,@GetTrueName),who,
                     "tried to move past deactivated Guild Hall elevator ",
                     Send(self,@GetName)," from ",old_row,old_col,old_fine_row,
                     old_fine_col," to ",new_row,new_col,new_fine_row,
                     new_fine_col,". Last elevator activation was ",
                     GetTime() - Send(self,@GetDoorTimeStamp)," seconds ago.");

                     return FALSE;
            }
         }
      }

      return TRUE;
   }

   IsPastEntranceLift(iRow=$,iCol=$,iFineRow=$,iFineCol=$)
   "This returns TRUE if the player is in the foyer area, but past "
   "the entrance lift and FALSE otherwise."
   {
      local iRowDec, iColDec;

      // Convert numbers to xxyy where yy is fineX converted
      // to a ratio out of 100
      iRowDec = (iRow * 100) + (iFineRow * 156 / 100);
      iColDec = (iCol * 100) + (iFineCol * 156 / 100);

      if iRowDec <= 4215 // South wall near door
         AND iRowDec > 3693 // Edge of elevator
         AND iColDec <= 1049 // Wall containing entrance door
      {
         // We're in a rectangle that includes part of the old foyer.
         // Need to remove that part.

         if iRowDec <= 3978 // Ledge near door
            AND iColDec >= 600 // Point where stairs start near door
         {
            // This is a rectangle also bound by the door and the elevator
            return FALSE;
         }

         // The remaining part can't be easily divided into rectangles,
         // so use the slopes to determine the appropriate Col for each Row
         // 1st: Starting from row 3700 and col 412, ending 3802 and 439
         if (iColDec >= 412)
            AND (iRowDec >= 3675 AND iRowDec <= 3802)
         {
            if (iColDec * 1000) > ((265 * iRowDec) - 568500)
            {
               return FALSE;
            }
         }
         // 2nd: Starting from row 3802 and col 439, ending 3862 474
         if (iColDec >= 439)
            AND (iRowDec >= 3802 AND iRowDec <= 3862)
         {
            if (iColDec * 1000) > ((583 * iRowDec) - 1777000)
            {
               return FALSE;
            }
         }
         // 3rd: Starting from row 3856 and col 467, ending 3996 603
         if (iColDec >= 467)
            AND (iRowDec >= 3856 AND iRowDec <= 3996)
         {
            if (iColDec * 1000) > ((970 * iRowDec) - 3273000)
            {
               return FALSE;
            }
         }

         return TRUE;
      }

      return FALSE;
   }

   SomethingTryGo(what=$, row=$,  col = $)
   {
      if row = 32 AND (col = 2 OR col = 3)
      {
         if Send(self,@CanEnter,#who = what)
         {
           Send(self,@OpenEntranceDoor);

           return TRUE;
         }
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=MAIN_DOOR,#animation=ANIMATE_FLOOR_LIFT,
               #height=MAIN_DOOR_OPEN,#speed=50);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,DOOR_DELAY);
         Send(self,@OpenEntranceDoorSound);
      }

      return;
   }

   CloseEntranceDoor()
   {
       ptEntrance = CreateTimer(self,@LiftLowering,1500);
       Send(self,@SetSector,#sector=MAIN_DOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=MAIN_DOOR_CLOSED,#speed=50);
       Send(self,@CloseEntranceDoorSound);

       return;
   }

   LiftLowering()
   "This is just so players have that last second to jump "
   "off the elevator without triggering wallhack detection."
   {
      ptEntrance = $;

      return;
   }

   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=SECRET_DOOR,
               #animation=ANIMATE_CEILING_LIFT,
               #height=SECRET_DOOR_OPEN,#speed=50);
         ptSecret = CreateTimer(self,@CloseSecretDoor,DOOR_DELAY);
         Send(self,@OpenSecretDoorSound);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=SECRET_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=SECRET_DOOR_CLOSED,#speed=50);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      local lObjCoords1;

      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=39,#new_col=47,#fine_col=56,#fine_row=40,
            #new_angle=ANGLE_WEST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=41,#new_col=47,#fine_col=8,#fine_row=32,
            #new_angle=ANGLE_WEST);

      lObjCoords1 = [ [41,13,48,24,OO_GREY_JUG], [41,50,48,00,OO_APPLE],
                      [32,48,24,24,OO_POT], [06,53,24,40,OO_JUG],
                      [41,13,40,16,OO_barrel], [41,10,24,56,OO_barrel],
                      [05,42,56,48,OO_barrel], [32,05,00,16,OO_barrel2],
                      [33,06,32,08,OO_barrel2], [05,43,24,48,OO_barrel2],
                      [33,04,56,40,OO_rice], [31,06,24,32,OO_rice],
                      [37,04,00,48,OO_rice],
                      [38,08,08,24,OO_bigurn],[29,08,24,16,OO_bigurn],
                      [41,49,32,56,OO_bluejug],[30,49,24,32,OO_bluejug],
                      [33,49,08,32,OO_tallurn],[08,46,16,24,OO_tallurn]
                    ];

      Send(self,@CreateOrnObjFromList,#lObjlist=lObjCoords1);

      Send(self,@NewHold,#what=Create(&KocatanLamp),
            #new_row=32,#new_col=46,#fine_col=24,#fine_row=24);

      propagate;
   }

   DefensesDown()
   {
      Send(self,@SomethingWaveRoom,#what=poShield_Lever,
            #wave_rsc=guildh12_gong);

      propagate;
   }

   SomeoneSaid(what = $,type = $,string = $,parm1 = $,parm2 = $,parm3 = $,
               parm4 = $, parm5 = $,parm6 = $,parm7 = $,parm8 = $)
   {
      local i, each_obj;

      if NOT IsClass(what,&Player)
         OR type = SAY_YELL
      {
         propagate;
      }

      foreach i in plActive
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);

         if Send(self,@SayRangeCheck,#talker=what,#hearer=each_obj)
         {
            if (Send(self,@InZone,#who=what))
                  = (Send(self,@InZone,#who=each_obj))
            {
               Send(each_obj,@SomeoneSaid,#what=what,#type=type,#string=string,
                    #parm1=parm1, #parm2=parm2,#parm3=parm3,#parm4=parm4,
                    #parm5=parm5,#parm6=parm6,#parm7=parm7,#parm8=parm8);
            }
            else
            {
               Send(each_obj,@MsgSendUser,#message_rsc=guildhall_muffled);
            }
         }
      }

      if poGuild_Owner <> $
         AND StringEqual(string,Send(poGuild_owner,@GetPassword))
         AND Send(self,@InZone,#who=what) = LEVEL_TWO
         AND ptSecret = $
         AND type <> SAY_EMOTE
      {
         Send(self,@OpenSecretDoor);
      }

      return;
   }

   InZone(who=$)
   {
      local iRow, iCol;

      if who = $
      {
         Debug("InZone passed bad info!");

         return FALSE;
      }

      if Send(self,@InFoyer,#who=who)
      {
         return LEVEL_FOYER;
      }

      iRow = Send(who,@GetRow);
      iCol = Send(who,@GetCol);
    
      if (iRow > 29 and iRow < 42) and (iCol > 41 and iCol < 54)
      {
         return LEVEL_TWO;
      }

      return LEVEL_ONE;
   }

   GetRegion()
   {
      return RID_KOCATAN;
   }

end
////////////////////////////////////////////////////////////////////////////////
