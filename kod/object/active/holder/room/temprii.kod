// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
TempleRiija is Room

constants:

   include blakston.khd

   RESET_TIME = 30000   // five seconds

   SECTOR_DOOR = 4

resources:

   include temprii.lkod

   room_name_RiijaTemple = "The Temple of Riija"
   room_RiijaTemple = ke1.roo
   riijatemple_music = bridge.ogg

   riijatemple_door1 = "~kThe Monk of Riija says, \"~BNo ~rone ~B~bmay ~Ienter ~kmy ~g~Badytum~n~k.\""
   riijatemple_door2 = "~kThe Monk of Riija says, \"~BCease.  ~I~bYour ~rsanity ~gwould not remain ~B~kintact ~B~bif you were to enter ~I~rthe Library of the ~BGibbering Maelstrom.\""
   riijatemple_door3 = "~kThe Monk of Riija says, \"The inner cloister ~I~ris not for ~gyour ~bfeet ~Bto ~B~rtread~n~k.\""
   riijatemple_door4 = "~kThe Monk of Riija says, \"~b~BIt is forbidden ~r~Bfor you to ~gdescend into the ~I~kabyssal catacombs ~n~gbeneath the ~Btemple~n~k.\""
   riijatemple_door5 = "~kThe Monk of Riija says, \"~rIt would be best if you avoided ~b`Ithat`I~r door~n~k.\""
   riijatemple_door6 = "~kThe Monk of Riija says, \"~BThat ~rdoor ~gleads ~bnowhere.  ~IThat is ~I~gnot to say ~kan empty ~rroom ~Bor ~B~ga blank wall ~rlies beyond it.  ~b`INowhere`I ~gis an infinate purgatory ~Bthat ~rswallows all that enter~n~k.\""

   riijatemple_sound = down2.ogg

   riijaplayer_death_male_wav = malefall822m.ogg
   riijaplayer_death_female_wav = femalefall822m.ogg

   riijadeadmessage0a = "Ouch, that last step was a doozy.\nYou awaken, dazed, in what appears to be an inn."
   riijadeadmessage0b = "Ouch, that last step was a doozy."

   riijadeadmessage1 = "Are you dead?"
   riijadeadmessage2 = "No, this isn't what death feels like..."
   riijadeadmessage3 = "it doesn't hurt so much."
   riijadeadmessage4 = "No, thats not it, you don't know what happened..."
   riijadeadmessage5 = "but.... you probably got very lucky."

classvars:

   vrName = room_name_RiijaTemple

   viTeleport_row = 49
   viTeleport_col = 31

   viTerrain_type = TERRAIN_TEMPLE | TERRAIN_MYSTICAL | TERRAIN_JUNGLE | TERRAIN_BEACH | TERRAIN_MOUNTAIN

   viClientFlags = ROOM_OVERRIDE_DEPTH1
   viOverrideDepth1 = BRIDGE_OF_FAITH_LEVEL

   viWeatherZone = WEATHER_ZONE_KOC_OUTP
   viWeatherMask = WEATHER_MASK_JUNGLE

properties:

   prRoom = room_RiijaTemple
   piRoom_num = RID_TEMPLE_RIIJA
   prMusic = riijatemple_music
   pbIllusioned = TRUE

   piBaseLight = LIGHT_NICE
   piOutside_factor = 3

   ptIllusionResetTimer = $
   ptDeathMessageTimer = $
   poDead = $

   pbSnowGroundTexture = TRUE

messages:

   Constructor()
   {
      propagate;
   }

   Teleport(what=$)
   {
      local iRow, iCol, oRoom;
      
      if Send(what,@GetOwner) = self
      {
         // Someone is casting blink.  If on the island, blink them back to the city.
         iRow = Send(what,@GetRow);
         iCol = Send(what,@GetCol);

         if ((iRow >= 4 and iCol >= 13) and (iRow <= 30 and iCol <= 44))
         {
            oRoom = Send(SYS,@FindRoombyNum,#num=RID_KOC_NORTH);            
            post(oRoom,@Teleport,#what=what);
            
            return TRUE;
         }
      }
      
      propagate;
   }

   NewHold(what=$,new_row=0,new_col=0)
   {
      local iRow, iCol;
      
      iRow = Send(what,@GetRow);
      iCol = Send(what,@GetCol);
      
      if IsClass(what,&Player)
         AND ((New_Row >= 4 AND New_Col >= 13)
              AND (New_Row <= 30 AND New_Col <= 44))
         AND NOT (IsClass(what,&DM) AND Send(what,@PlayerIsImmortal))
      {
         post(self,@Teleport,#what=what);
      }
      
      propagate;
   } 

   SomethingTryGo(what = $,row = $,col = $)
   {
      if pbIllusioned
      { 
         if row = 16 AND col = 31
         {
            Send(what,@MsgSendUser,#message_rsc=riijatemple_door1);

            return TRUE;
         }

         if row = 19 AND col = 31
         {
            Send(what,@MsgSendUser,#message_rsc=riijatemple_door2);

            return TRUE;
         }

         if row = 19 AND col = 30
         {
            Send(what,@MsgSendUser,#message_rsc = riijatemple_door3);

            return TRUE;
         }

         if row = 11 AND col = 33
         {
            Send(what,@MsgSendUser,#message_rsc = riijatemple_door4);

            return TRUE;
         }

         if row = 16 AND col = 30 
         {
            Send(what,@MsgSendUser,#message_rsc = riijatemple_door5);

            return TRUE;
         }

         if row = 11 AND col = 28
         {
            Send(what,@MsgSendUser,#message_rsc = riijatemple_door6);

            return TRUE;
         }
      }
      else
      {
         // Don't let people enter the front door while not illusioned
         if (row = 23 OR row = 24)
            AND (col = 30 OR col = 31)
         {
            // Return without message.  That'll drive the conspiracy theorists wild!
            return TRUE;
         }
      }

      propagate;
   }

   DispelIllusions(what=$)
   {
      local oMonk;

      oMonk = Send(self,@FindHoldingActive,#class=&RiijaMonk);

      if oMonk <> $
      {
         Send(oMonk,@DispelIllusions);
      }

      Send(self,@DoDispelIllusionEffect);

      pbIllusioned = FALSE;

      // Reappear in 30 seconds.
      ptIllusionResetTimer = createtimer(self,@ReplaceIllusions,30000);
      
      propagate;
   }

   DoDispelIllusionEffect()
   {
      // Must be able to be called redundantly.
      // May be sent even if effect is already in that position.

      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         Send(self,@ChangeTexture,#id=4,#new_texture=61015,#flags=CTF_FLOOR);
      }
      else
      {
         Send(self,@ChangeTexture,#id=2,#new_texture=02301,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=4,#new_texture=02301,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=6,#new_texture=02301,#flags=CTF_FLOOR); 
         Send(self,@ChangeTexture,#id=7,#new_texture=02305,#flags=CTF_FLOOR); 
         Send(self,@ChangeTexture,#id=8,#new_texture=02305,#flags=CTF_FLOOR);
      }

      Send(self,@ChangeTexture,#id=2,#new_texture=0,#flags=CTF_CEILING); 
      Send(self,@ChangeTexture,#id=4,#new_texture=0,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=5,#new_texture=0,#flags=CTF_CEILING); 
      Send(self,@ChangeTexture,#id=6,#new_texture=09418,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=7,#new_texture=08823,#flags=CTF_CEILING); 
      Send(self,@ChangeTexture,#id=8,#new_texture=08823,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=9,#new_texture=08823,#flags=CTF_CEILING);

      Send(self,@ChangeTexture,#id=10,#new_texture=0,#flags=CTF_NORMALWALL);
      Send(self,@ChangeTexture,#id=10,#new_texture=09418,#flags=CTF_BELOWWALL);
      Send(self,@ChangeTexture,#id=11,#new_texture=09418,#flags=CTF_ABOVEWALL);

      Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=7,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_FLOOR_LIFT,#height=392,#speed=0);

      Send(self,@SetSector,#sector=2,#animation=ANIMATE_CEILING_LIFT,#height=544,#speed=0);
      Send(self,@SetSector,#sector=3,#animation=ANIMATE_CEILING_LIFT,#height=544,#speed=0);
      Send(self,@SetSector,#sector=4,#animation=ANIMATE_CEILING_LIFT,#height=544,#speed=0);
      Send(self,@SetSector,#sector=5,#animation=ANIMATE_CEILING_LIFT,#height=544,#speed=0);
      Send(self,@SetSector,#sector=6,#animation=ANIMATE_CEILING_LIFT,#height=472,#speed=0);
      Send(self,@SetSector,#sector=7,#animation=ANIMATE_CEILING_LIFT,#height=488,#speed=0);
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_CEILING_LIFT,#height=488,#speed=0);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_CEILING_LIFT,#height=488,#speed=0);

      return;
   }

   ReplaceIllusions()
   {
      local i, each_obj;
   
      ptIllusionResetTimer = $;

      foreach i in plActive
      {
         each_obj = Send(self,@HolderExtractObject,#data=i);
         
         // Don't let illusion reappear when people are in the temple!
         if Send(each_obj,@GetRow) > 8
            AND Send(each_obj,@GetRow) < 24
            AND Send(each_obj,@GetCol) > 23
            AND Send(each_obj,@GetCol) < 38
            AND isclass(each_obj,&player)
         {
            // Try again in 30 seconds
            ptIllusionResetTimer = createtimer(self,@ReplaceIllusions,30000);  
            
            return;     
         }
      }
   
      pbIllusioned = TRUE;   

      Send(self,@DoReplaceIllusionEffect);

      return;   
   }

   DoReplaceIllusionEffect()
   {
      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         Send(self,@ChangeTexture,#id=4,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=6,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=7,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=8,#new_texture=09414,#flags=CTF_FLOOR);
      }
      else
      {
         Send(self,@ChangeTexture,#id=2,#new_texture=09415,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=4,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=6,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=7,#new_texture=09414,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=8,#new_texture=09414,#flags=CTF_FLOOR);
      }

      Send(self,@ChangeTexture,#id=2,#new_texture=09415,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=4,#new_texture=09416,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=5,#new_texture=09416,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=6,#new_texture=09416,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=7,#new_texture=09416,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=8,#new_texture=09416,#flags=CTF_CEILING);
      Send(self,@ChangeTexture,#id=9,#new_texture=09416,#flags=CTF_CEILING);

      Send(self,@ChangeTexture,#id=10,#new_texture=09417,#flags=CTF_NORMALWALL); 
      Send(self,@ChangeTexture,#id=10,#new_texture=09417,#flags=CTF_BELOWWALL);
      Send(self,@ChangeTexture,#id=11,#new_texture=09417,#flags=CTF_ABOVEWALL);

      Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=408,#speed=0);
      Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=408,#speed=0);
      Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=480,#speed=0);
      Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=408,#speed=0);
      Send(self,@SetSector,#sector=7,#animation=ANIMATE_FLOOR_LIFT,#height=408,#speed=0);
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_FLOOR_LIFT,#height=408,#speed=0);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_FLOOR_LIFT,#height=480,#speed=0);

      Send(self,@SetSector,#sector=2,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=3,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=4,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=5,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=6,#animation=ANIMATE_CEILING_LIFT,#height=504,#speed=0);
      Send(self,@SetSector,#sector=7,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_CEILING_LIFT,#height=536,#speed=0);

      return;
   }

   SomethingMoved(what = $,new_row = $, new_col = $)
   {
      local i;

      if IsClass(what,&Player)
         AND ((new_row >= 31 AND new_col >= 26) AND (new_row <= 44 AND new_col <= 29))
         OR ((new_row >= 31 AND new_col >= 32) AND (new_row <= 45 AND new_col <= 35))
         OR (new_row = 45 AND new_col = 29)
      {
         Send(self,@PlayerHurledSelfOffCliffs,#what=what);
      }
      
      if (new_row > 32) AND (new_row < 45) 
         AND ((new_col = 30) OR (new_col = 31))
         AND NOT (IsClass(what,&DM) AND Send(what,@PlayerIsImmortal))
      {
         /// on the bridge.  Do they have a sword of riija?
         if isClass(what,&Monster)  
         {
            Send(what,@Killed);
            
            return;
         }
                  
         foreach i in Send(what,@GetPlayerUsing)
         {
            /// checking item to see if it's a riija sword.
            if isClass(i,&RiijaSword) AND (Send(i,@GetQuester) = what)
            {
               propagate;
            }
         } 

         // No sword.  Kill 'em
         Send(self,@PlayerHurledSelfOffCliffs,#what=what);   
      }
      
      propagate;
   }

   PlayerHurledSelfOffCliffs(what=$)
   {
      local i, dropped, row, col;

      row = Send(what,@GetRow);
      col = Send(what,@GetCol);

      debug(Send(what,@GetName),"Hurled self off cliffs");
      
      dropped = FALSE;
      foreach i in Send(what,@GetPlayerUsing)
      {
         if Send(i,@ReqLeaveOwner)
            AND random(1,3) = 1
         {
            Send(self,@NewHold,#what=i,#new_row=Send(what,@GetRow),#new_col=Send(what,@GetCol));
            dropped = TRUE;
            
            break;
         } 
      }
      
      if NOT dropped
      {
         foreach i in Send(what,@GetHolderPassive)
         {
            if Send(i,@ReqLeaveOwner)
            AND random(1,3) = 1
            {
               Send(self,@NewHold,#what=i,#new_row=Send(what,@GetRow),#new_col=Send(what,@GetCol));
               
               break;
            } 
         }
      }

      Send(what,@EffectSendUserXLat,#xlat=PT_ALLRED);
      Send(what,@EffectSendUser,#what=what,#effect=EFFECT_PARALYZE_ON);

      if poDead <> $
      {
         Send(poDead,@MsgSendUser,#message_rsc=riijadeadmessage0a);
         Send(SYS,@UtilGotoSquare,#what=what,#where=Send(SYS,@FindRoomByNum,#num=RID_KOC_INN),
               #new_row=8,#new_col=6,#new_angle=ANGLE_NORTH);
         Send(what,@LoseHealth,#amount=(Send(what,@GetHealth)-1));
         Send(Send(SYS,@FindSpellByNum,#num=SID_HOLD),@DoSpell,
               #what=self,#oTarget=what,#iDuration=5000,#report=FALSE,
               #bAllowFreeAction=FALSE);
         Send(what,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=2000);
         Send(what,@EffectSendUserXLat,#xlat=0);
         Send(what,@EffectSendUser,#what=what,#effect=EFFECT_PARALYZE_OFF);
      }
      else
      {
         poDead = what;
         Send(poDead,@MsgSendUser,#message_rsc=riijadeadmessage0b);
   
         Send(SYS,@UtilGotoSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_KOC_INN),
              #new_row=8,#new_col=6,#new_angle=ANGLE_NORTH);
         Send(what,@LoseHealth,#amount=(Send(what,@GetHealth)-1));
         Send(Send(SYS,@FindSpellByNum,#num=SID_HOLD),@DoSpell,
               #what=self,#oTarget=what,#iDuration=10000,#report=FALSE,
               #bAllowFreeAction=FALSE);
         
         ptDeathMessageTimer = createtimer(self,@TimerMessage1,5000); 
      }
      
      if Send(what,@GetGender) = GENDER_MALE
      {
         Send(self,@SomethingWaveRoom,#row=row,#col=col,#wave_rsc=riijaplayer_death_male_wav);
         Send(what,@WaveSendUser,#what=what,#wave_rsc=riijaplayer_death_male_wav);
      }
      else
      {
         Send(self,@SomethingWaveRoom,#row=row,#col=col,#wave_rsc=riijaplayer_death_female_wav);
         Send(what,@WaveSendUser,#what=what,#wave_rsc=riijaplayer_death_female_wav);
      }
      
      return;
   }

   TimerMessage1()
   {
      ptDeathMessageTimer = $;
      Send(poDead,@MsgSendUser, #message_rsc=riijadeadmessage1);
      ptDeathMessageTimer=createtimer(self,@TimerMessage2,5000);
      
      return;
   }

   TimerMessage2()
   {
      ptDeathMessageTimer = $;
      Send(poDead,@MsgSendUser,#message_rsc=riijadeadmessage2);
      ptDeathMessageTimer = createtimer(self,@TimerMessage3,5000);
      
      return;
   }

   TimerMessage3()
   {
      ptDeathMessageTimer = $;
      Send(poDead,@MsgSendUser,#message_rsc=riijadeadmessage3);
      ptDeathMessageTimer = createtimer(self,@TimerMessage4,5000);
      
      return;
   }

   TimerMessage4()
   {
      ptDeathMessageTimer = $;
      Send(poDead,@MsgSendUser, #message_rsc=riijadeadmessage4);
      ptDeathMessageTimer = createtimer(self,@TimerMessage5,5000);
      
      return;
   }

   TimerMessage5()
   {
      ptDeathMessageTimer = $;
      Send(poDead,@MsgSendUser,#message_rsc=riijadeadmessage5);
      Send(poDead,@EffectSendUserDuration,#effect=EFFECT_PAIN,#duration=2000);
      Send(poDead,@EffectSendUserXLat,#xlat=0);
      Send(poDead,@EffectSendUser,#what=poDead,#effect=EFFECT_PARALYZE_OFF);
      poDead = $;
      
      return;  
   }

   CreateStandardObjects()
   {
      // teacher
      Send(self,@NewHold,#what=Create(&RiijaMonk),
           #new_row=10,#new_col=31,#fine_row=32,#fine_col=0,#new_angle=ANGLE_SOUTH);

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 24, 30, RID_TEMPLE_RIIJA, 22, 30, ROTATE_NONE ],plExits);
      plExits = Cons([ 24, 31, RID_TEMPLE_RIIJA, 22, 31, ROTATE_NONE ],plExits);
      plExits = Cons([ 23, 30, RID_TEMPLE_RIIJA, 25, 30, ROTATE_NONE ],plExits);
      plExits = Cons([ 23, 31, RID_TEMPLE_RIIJA, 25, 31, ROTATE_NONE ],plExits);

      plEdge_exits = $;
      plEdge_Exits = Cons([LEAVE_WEST, RID_KD2, 12, 69, ROTATE_NONE], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_KE2, 1, 37, ROTATE_NONE], plEdge_exits);

      propagate;
   }

   Delete()
   {
      if ptIllusionResetTimer <> $
      {
         deletetimer(ptIllusionResetTimer);
         ptIllusionResetTimer = $;
      }
      
      if ptDeathMessageTimer <> $
      {
         deletetimer(ptDeathMessageTimer);
         ptDeathMessageTimer = $;
      }

      poDead = $;
      
      propagate;
   }

   ModifyChanceToImprove(who=$,oSpellSkill=$,chance=0)
   "This takes a spell/skill that who is trying to advance and modifies the improve_chance."
   {
      if IsClass(oSpellSkill,&Spell)
         AND Send(oSpellSkill,@GetSchool) = SS_RIIJA
      {
         // Give a 10// bonus.
         return ((chance * 11)/10);
      }

      return chance;
   }

   // Override the snow messages here, too many different sector IDs in
   // this zone. We're not using the standard snow IDs.
   StartSnow(bOnGround=TRUE)
   {
      // Check if we can have weather effects here.
      if NOT pbWeatherEffects
      {
         return;
      }

      // If there's a sandstorm weather effect here, clear it.
      if Send(self,@CheckRoomFlag,#flag=ROOM_SANDSTORM)
      {
         Send(self,@EndSandstorm);
      }

      if bOnGround
      {
         if pbSnowGroundTexture
         {
            // Add snow to floor.
            Send(self,@ChangeTexture,#id=0,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=1,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=2,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=3,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=5,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=9,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=10,#new_texture=61015,#flags=CTF_FLOOR);
            
            // Add darker snow to small vertical ledges.
            Send(self,@ChangeTexture,#id=15,#new_texture=61016,
                  #flags=CTF_BELOWWALL);

            // Turn any water to ice. Water tagged as ID 40.
            Send(self,@ChangeTexture,#id=40,#new_texture=61017,
                  #flags=CTF_FLOOR);
            // Stop water scroll effect and remove depth.
            Send(self,@SetSectorFlags,#sector=40,#depth=SF_DEPTH0,
                  #scrollSpeed=SCROLL_NONE);
            
            // This is for the invisible bridge.
            Send(self,@ChangeTexture,#id=41,#new_texture=61017,
                  #flags=CTF_FLOOR);
            // Stop water scroll effect and remove depth.
            Send(self,@SetSectorFlags,#sector=41,#depth=CHANGE_OVERRIDE,
                  #scrollSpeed=SCROLL_NONE);
         }
      }

      Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=TRUE);
      Send(self,@WeatherChanged);

      return;
   }

   EndSnow(override=FALSE)
   "Use override if rooms have manually placed textures."
   {
      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=FALSE);
         Send(self,@WeatherChanged);

      }

      if pbSnowGroundTexture
         OR override
      {
         // Remove snow from floor.
         Send(self,@RemoveTextureChange,#id=0);
         Send(self,@RemoveTextureChange,#id=1);
         Send(self,@RemoveTextureChange,#id=2);
         Send(self,@RemoveTextureChange,#id=3);
         Send(self,@RemoveTextureChange,#id=4);
         Send(self,@RemoveTextureChange,#id=5);
         Send(self,@RemoveTextureChange,#id=6);
         Send(self,@RemoveTextureChange,#id=7);
         Send(self,@RemoveTextureChange,#id=8);
         Send(self,@RemoveTextureChange,#id=9);
         Send(self,@RemoveTextureChange,#id=10);
         // Remove from small vertical ledges.
         Send(self,@RemoveTextureChange,#id=15);

         // Remove ice from water.
         Send(self,@RemoveTextureChange,#id=40);
         Send(self,@RemoveTextureChange,#id=41);

         // Restore animation.
         Send(self,@RemoveSectorFlagChange,#id=40);
         Send(self,@RemoveSectorFlagChange,#id=41);
      }

      return;
   }

   GetRegion()
   {
      return RID_KOCATAN;
   }

end
////////////////////////////////////////////////////////////////////////////////
