// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////

Castle2a is Room

constants:

   include blakston.khd

resources:

   include castle2a.lkod

   room_name_castle2a = "Banquet Hall of the Bourgeois Castle"
   room_castle2a = castle2a.roo
   castle2a_music = castle.ogg

classvars:

   vrName = room_name_castle2a

   viTeleport_row = 8
   viTeleport_col = 13

   viTerrain_Type = TERRAIN_CASTLE | TERRAIN_FOUNTAIN

   viWeatherZone = WEATHER_ZONE_BARLOQUE
   viWeatherMask = WEATHER_MASK_DEFAULT_NS

properties:

   prMusic = castle2a_music

   piBaseLight = LIGHT_DARK
   piOutside_factor = OUTDOORS_3 

   prRoom = room_castle2a
   piRoom_num = RID_CASTLE2A

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS

   pbSnowGroundTexture = TRUE

messages:

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 6, 15, RID_CASTLE2B, 14, 12, ROTATE_NONE ],plExits);
      plExits = Cons([ 6, 16, RID_CASTLE2B, 14, 13, ROTATE_NONE ],plExits);

      plExits = Cons([ 7, 32, RID_CASTLE2B, 19, 28, ROTATE_NONE ],plExits);
      plExits = Cons([ 8, 32, RID_CASTLE2B, 19, 28, ROTATE_NONE ],plExits);

      plExits = Cons([ 24, 25, RID_CASTLE2D, 2, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 24, 26, RID_CASTLE2D, 2, 4, ROTATE_NONE ],plExits);
      plExits = Cons([ 23, 26, RID_CASTLE2D, 2, 4, ROTATE_NONE ],plExits);

      plExits = Cons([ 25, 14, RID_CASTLE2E, 2, 14, ROTATE_NONE ],plExits);
      plExits = Cons([ 26, 14, RID_CASTLE2E, 2, 14, ROTATE_NONE ],plExits);

      plExits = Cons([ 27, 15, RID_BAZMANS_ROOM, 25, 7, ROTATE_180 ],plExits);
      plExits = Cons([ 27, 16, RID_BAZMANS_ROOM, 25, 7, ROTATE_180 ],plExits);


      plExits = Cons([ 30,2, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 30,3, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 30,4, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 25,17, ROOM_LOCKED_DOOR ],plExits);
      plExits = Cons([ 26,17, ROOM_LOCKED_DOOR ],plExits);

      propagate;
   }

   SomethingTryGo(what = $,row = $,col = $)
   {
      local oLockedRoom;

      oLockedRoom = Send(SYS,@FindRoomByNum,#num=RID_BAZMANS_ROOM);
   
      if row = 27 AND (col = 15 OR col = 16)
      {
         if Send(oLockedRoom,@CheckLock) = 1
         { 
            Send(what,@TeleportTo,#rid=RID_FORGOTTEN_TOO,#bAdminPort=FALSE);

            return TRUE;
         }
      }

      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&PrincessGuard),#new_row=24,#new_col=13);
      Send(self,@NewHold,#what=Create(&PrincessGuard),#new_row=24,#new_col=18);
      Send(self,@NewHold,#what=Create(&PrincessGuard),#new_row=22,#new_col=26);

      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=7,#new_col=14,#new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=7,#new_col=17,#new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=7,#new_col=11,#new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=15,#new_col=10,#new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=12,#new_col=7,#new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Tree,#top=TREE_OAK,#bottom=TREE_ELM),
           #new_row=16,#new_col=7,#new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Shrub),#new_row=7,#new_col=9,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=14,#new_col=7,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=18,#new_col=7,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=19,#new_col=13,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=16,#new_col=13,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=13,#new_col=13,
           #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&Shrub),#new_row=11,#new_col=13,
           #new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Fountain,#iSoundRadius=30,#iSoundIntensity=60),
           #new_row=10,#new_col=9,#fine_col=0,#new_angle=ANGLE_SOUTH);

      propagate;
   }

   // This room is majority indoors, so we're not using sector 0 for snow here.
   StartSnow(bOnGround=TRUE)
   {
      // Check if we can have weather effects here.
      if NOT pbWeatherEffects
      {
         return;
      }

      // If there's a sandstorm weather effect here, clear it.
      if Send(self,@CheckRoomFlag,#flag=ROOM_SANDSTORM)
      {
         Send(self,@EndSandstorm);
      }

      if bOnGround
      {
         if pbSnowGroundTexture
         {
            Send(self,@ChangeTexture,#id=1,#new_texture=61015,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=5,#new_texture=61016,#flags=CTF_FLOOR);
            Send(self,@ChangeTexture,#id=15,#new_texture=61016,
                  #flags=CTF_BELOWWALL);
         }
      }

      Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=TRUE);
      Send(self,@WeatherChanged);

      return;
   }

   EndSnow(override=FALSE)
   "Use override if rooms have manually placed textures."
   {
      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=FALSE);
         Send(self,@WeatherChanged);
      }

      if pbSnowGroundTexture
         OR override
      {
         // Remove snow from lighting sectors.
         Send(self,@RemoveTextureChange,#id=1);
         Send(self,@RemoveTextureChange,#id=5);
         Send(self,@RemoveTextureChange,#id=15);
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
