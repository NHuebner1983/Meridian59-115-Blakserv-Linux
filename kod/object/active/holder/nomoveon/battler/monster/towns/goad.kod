// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////

Goad is TosTown

constants:

   include blakston.khd

   ACCEPT_DELAY = 15000
   ADVERT_DELAY_MIN = 60000
   ADVERT_DELAY_MAX = 120000
   COMMENCE_DELAY_MIN = 5000
   COMMENCE_DELAY_MAX = 9000
   FIGHT_DELAY_ONE_ON_ONE = 600000
   FIGHT_DELAY_LAST_MAN_STANDING = 840000

   LAST_MINUTE = 60000

resources:

   include goad.lkod

   Goad_name_rsc = "The Goad"
   Goad_icon_rsc = GoadX.bgf
   Goad_desc_rsc = \
      "As a mortal man Goad betrayed his Queen, sending her to her death.  "
      "To his dismay, she was only temporarily inconvenienced and now she has "
      "bound him here, to serve for all eternity.  His twisted form writhes "
      "in constant agony, relieved only briefly by the wash of ecstasy he "
      "feels when he oversees the death of another."

   Goad_ad_need_champion1 = "Come my prettys, be not afraid . . . "
   Goad_ad_need_champion2 = \
      "I can taste your desire  . . . give in to it, there is so "
      "much power to be gained."
   Goad_ad_need_champion3 = \
      "It is such a small thing to kill another, won't you dance for me?"
   Goad_ad_need_champion4 = "I must have death!"
   Goad_ad_need_challenger = "Come . . . won't you dance with %s%s?"
   Goad_ad_good_fight1 = "YES!! Oh God yes!!!  Die you fools die!!!"
   Goad_ad_good_fight2 = "I can taste your soul."
   Goad_ad_good_fight3 = "So sweet . . . your blood is so sweet."

   Goad_no_need = "Be calm little one, your time to die will come."
   Goad_need_champion = \
      "By ancient law I must first have a Champion.  Give yourself to me."
   Goad_dont_need_challenger = \
      "Later my sweet, later.  Enough blood flows through the veins "
      "of these fools, I can wait for yours."
   Goad_fight_in_progress = \
      "Yes!  As soon as I have feasted upon these fools you may follow them."

   Goad_already_combatant = "So generous . . . but, you are already mine."
   Goad_already_champion = "So generous . . . but, you are already mine."
   Goad_already_have_champion = \
      "So you would be champion?  Nothing could be easier, simply "
      "challenge and kill %s%s.  Would you dare to challenge %s?"

   Goad_challenge_offered = \
      "%s%s has challenged you.  Will you crush %s like the bug %s is?"
   Goad_must_accept = \
      "Hurry fool!! You only have %i seconds left to accept %s%s's challenge."

   Goad_cant_renege = "You cannot renege unless you are a combatant!"
   Goad_commence = "Fight!!!!  Kill!!!  Die!!!!"
   Goad_last_minute = "You have one minute  . . . then I take you both."

   Goad_victor = "~BCurse you %s%s!  Today you live, but not forever!~B"
   Goad_new_champion = "~B%s%s is our new Champion, ripe for the killing.~B"
   Goad_killed_champion = \
      "%s%s has slain the Champion, %s%s . . . such sweet blood!"
   Goad_retain_title = \
      "%s%s retains the Championship, won't someone give me %s blood?"
   Goad_champion_killed = "The Champion has slain %s%s!"
   Goad_someone_killed = "%s%s has slain %s%s!"

   Goad_champ_reneges = \
      "%s%s, Champion of Kraanan, has surrendered %s title."
   Goad_ready_to_fight = "%s%s vs %s%s.  Prepare to die  . . ."
   Goad_combatant_reneges = "%s%s has chosen to fight no longer."

   Goad_cant_leave = "Sorry fool, there's no escape!"
   Goad_pitifully_fled = \
      "%s%s has pitifully fled.  If they're not back in 30 seconds "
      "I think I'll have to kill them, yes?"
   Goad_only_combatants = \
      "You have to come into my embrace if you want to kill here!"
   Goad_no_fighting_yet = "Not yet my sweet little blood bag, not yet."
   Goad_only_combatants_cast = \
      "You have to come into my embrace if you want to cast spells here!"
   Goad_only_target_combatants = \
      "You cannot fight non-combatants!"

   Goad_spell_banned = \
      "So sorry you can't cast %s here.  Why?  Because I say so."

   Goad_must_choose_style = \
      "First things first . . . are we to have a duel or a bloodbath?"
   Goad_cant_switch = "You can't change that now, worm."
   Goad_new_combat_style = \
      "Excellent.  I've been thirsting for a good %s.  Now, who'll "
      "say the magic word, \"champion\"?"

   Goad_style_one_on_one = "duel"
   Goad_style_last_man_standing = "bloodbath"

   Goad_new_combatant = "%s%s will also be a combatant in this match!"
   Goad_more_combatants = \
      "Additional combatants only have %i seconds to join into this match."
   Goad_ready_last_man = \
      "The game is last man standing.  Combat will begin on my mark."

   Goad_welcome = "~kGoad tells you, \"Welcome to my hell, worm.\""
   Goad_worship_admin = \
      "Oh how exciting . . . it's %s, %s is sooo important."
   Goad_worship_dm = \
      "Don't except me to grovel to %s, I could care "
      "less about a %s of Meridian!"
   Goad_welcome_champion = "All hail %s%s, spiller of blood."
   Goad_welcome_champion_guild = "Bug.  This message should never occur!"

   Goad_invalid_fight = \
      "This fight was invalid for certain reasons, and therefore "
      "it has been cancelled."

   Goad_not_during_fight = \
      "~kThe Goad tells you, \"You cannot offer me commands while "
      "a fight is still going on.\""

   Goad_speed_up = \
      "Let's see if we can't speed this up a little bit."
   Goad_not_more = \
      "There may not be more than 6 combatants in a single fight."
   Goad_killed_by_spell = \
      "%s%s was just killed by the %s spell!"

   Goad_unwanted_give = "~k%s%s ignores your bribe.~n~k"

   Goad_Draw = \
      "`rFight is a draw.  This is a bug.  Please report it and specify "
      "combat type and all actions which led to this message."
   Goad_wont_fight = \
      "`kApparently %s%s is too cowardly to fight.  Cowards should "
      "die . . . slowly."

   Goad_battle_midi_rsc = pk_sb16.ogg

classvars:

   vrName = Goad_name_rsc
   vrIcon = Goad_icon_rsc
   vrDesc = Goad_desc_rsc

   viDefinite = ARTICLE_NONE
   viIndefinite = ARTICLE_NONE

   vrUnwanted_give = Goad_unwanted_give

   viAttributes = \
      MOB_NOMOVE | MOB_FULL_TALK | MOB_LISTEN | MOB_NOFIGHT | MOB_NOQUEST
   viOccupation = MOB_ROLE_WATCHER

properties:

   piCombat_style = STYLE_NO_FIGHT

   ptAdvert = $               /// every now and then, the Watcher sends off
                              /// a blurb, asking people to fight for him

   ptAccept = $               /// in player vs. player combat, champ has a
                              /// chance to accept a proffered challenge.

   ptCommence = $             /// 10 second head start before a fight

   ptFight = $                /// The actual length of the fight.
   
   ptReconnectTime = $        /// The time until a logged player is 'killed'.

   plCombatants = $           /// this is a list of player objects.
   plKill_list = $            /// this is a list of two-element lists.

   poChampion = $             /// poChampion points to whoever won last time
                              /// out.  poChampion is always a player object
   pbAccept = FALSE           /// has the player been told he only has 15 more
                              /// seconds to accept a challenge?
   pbLastMinute = FALSE       /// has the Watcher given the one minute warning?

   plUserStats = $         /// stores values for the players' HP, mana,
               /// and vigor upon entring the battle area,
               /// which are restored upon leaving the area.

   pbWarned = FALSE      ///Goad warns once before killing slow combatants.

messages:

   //////////////////////////////////////////////////////////////////////
   /// Advertising                                                     ///
   //////////////////////////////////////////////////////////////////////
   /// These messages are spat out at users every now and then, just   ///
   /// for atmosphere, and to tell players what game is going on, etc. ///
   //////////////////////////////////////////////////////////////////////

   NewOwner(what=$)
   "If Goad is ever loaded someplace other than the arena of brax, "
   "go back to brax."
   {
      // Have to give the room time to be created on a RecreateAll, so we post.
      Post(self,@PostNewOwner);

      propagate;
   }

   PostNewOwner()
   {
      local oRoom;

      oRoom = Send(SYS,@FindRoomByNum,#num=RID_BRAX_ARENA);

      if poOwner = $ or NOT IsClass(poOwner,&NecArena)
      {
         if Send(oRoom,@GetWatcher) <> $
         {
            Send(self,@Delete);
            Debug("Somebody made a second Goad, seek and destroy.");
         }
         else
         {
            Send(oRoom,@CheckWatcher);
         }
      }

      return;
   }

   AdvertTimer()
   {
      local rand;

      ptAdvert = $;

      if plCombatants = $
      {
         rand = Random(1,4);
         if rand = 1
         {
            Send(self,@Say,#message_rsc=Goad_ad_need_champion1);
         }
         if rand = 2
         {
            Send(self,@Say,#message_rsc=Goad_ad_need_champion2);
         }
         if rand = 3
         {
            Send(self,@Say,#message_rsc=Goad_ad_need_champion3);
         }
         if rand = 4
         {
            Send(self,@Say,#message_rsc=Goad_ad_need_champion4);
         }
      }
      else
      {
         if not Send(self,@ValidateFight)
         {
            Send(self,@Say,#message_rsc=Goad_ad_need_challenger,
                  #parm1=Send(First(plCombatants),@GetDef),
                  #parm2=Send(First(plCombatants),@GetName));
         }
         else
         {
            rand = Random(1,3);
            if rand = 1
            {
               Send(self,@Say,#message_rsc=Goad_ad_good_fight1);
            }
            if rand = 2
            {
               Send(self,@Say,#message_rsc=Goad_ad_good_fight2);
            }
            if rand = 3
            {
               Send(self,@Say,#message_rsc=Goad_ad_good_fight3);
            }
         }
      }
      ptAdvert=CreateTimer(self,@AdvertTimer,
                  Random(ADVERT_DELAY_MIN,ADVERT_DELAY_MAX));

      return;
   }

   /////////////////////////////////////////////////////////////////
   ///  Per fight code                                             //
   /////////////////////////////////////////////////////////////////
   //                                                              //
   //   Made a conscious decision to move as much of the actual    //
   //   arena code here, so that these procedures would be the     //
   //   only ones that need to change, if we ever add a new arena  //
   //   type.                                                      //
   //                                                              //
   /////////////////////////////////////////////////////////////////

   SetChampion(who=$)
   {
      if poChampion <> who
      AND (piCombat_style = STYLE_ONE_ON_ONE
         OR piCombat_style = STYLE_LAST_MAN_STANDING)
      {
         poChampion = who;

         return;
      }

      return;
   }

   ResetChampion()
   {
      poChampion = $;

      return;
   }

   ValidateFight()
   {
      local oGuild, i;

      if (piCombat_Style = STYLE_ONE_ON_ONE
         OR piCombat_Style = STYLE_LAST_MAN_STANDING)
      AND (Send(poOwner,@ShrineInUse) = FALSE)
      {
         if Length(plCombatants) > 1
         {
            return TRUE;
         }
      }

      return FALSE;
    }

   AcceptingChampions()
   {
      if plCombatants = $
         OR Length(plCombatants) < 1
      {
         return TRUE;
      }

      return FALSE;
   }

   AcceptingChallengers() ///How many can brax fit?
   {
      if Length(plCombatants) < 2 AND piCombat_Style = STYLE_ONE_ON_ONE
      {
         return TRUE;
      }
      if Length(plCombatants) < 6 AND piCombat_Style = STYLE_LAST_MAN_STANDING
      {
         return TRUE;
      }

      return FALSE;
   }

   NewCombatant(who=$)
   {
      Send(self,@Teleport,#what=who,#goinplay=TRUE);
      if plCombatants = $
      {
         Send(self,@SetChampion,#who=who);
      }
      plCombatants = Cons(who,plCombatants);

      return;
   }

   FightInSession()
   {
      if ptFight <> $
      {
         return TRUE;
      }

      return FALSE;
   }

   Challenge(who=$)
   {
      local i, bFound;

      if who = poChampion
      {
         Send(self,@SayToOne,#target=who,#message_rsc=Goad_Already_champion);

         return;
      }
      if Send(self,@IsCombatant,#who=who)
      {
         Send(self,@SayToOne,#target=who,#message_rsc=Goad_Already_combatant);

         return;
      }

      if NOT Send(self,@MaxCombatantCheck,#who=who)
      {
         return FALSE;
      }

      if piCombat_style = STYLE_ONE_ON_ONE
      {
         Post(self,@Say,#message_rsc=Goad_challenge_offered,
               #parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),
               #parm3=Send(who,@GetHimHer),#parm4=Send(who,@GetHeShe));

         pbAccept = FALSE;
         ptAccept = CreateTimer(self,@AcceptTimer,ACCEPT_DELAY);
      }
      else
      {
         Send(self,@Say,#message_rsc=Goad_new_combatant,
               #parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName));

         if ptAccept = $
         {
            pbAccept = FALSE;
            Send(self,@Say,#message_rsc=Goad_more_combatants,
                  #parm1=30);
            ptAccept = CreateTimer(self,@AcceptTimer,ACCEPT_DELAY);
         }
      }
      Send(self,@newCombatant,#who=who);

      return;
   }

   MaxCombatantCheck(who=$)
   {
      if Length(plCombatants) > 6
      {
         Send(self,@SayToOne,#target=who,#message_rsc=Goad_Not_more);

         return FALSE;
      }

      return TRUE;
   }

   Accept(who=$)
   {
      if who=poChampion
         AND ptAccept <> $
      {
         DeleteTimer(ptAccept);
         ptAccept = $;
      }
      Send(self,@ReadyFight,#who=who);

      return;
   }

   ReadyFight()
   {
      local i, each_obj;

      if not Send(self,@ValidateFight)
      {
         Debug("INVALID FIGHT!  Something went wrong!");
         Send(self,@Say,#message_rsc=Goad_invalid_fight);

         Send(self,@ClearCombatants);
         return FALSE;
      }

      if piCombat_style = STYLE_ONE_ON_ONE
      {
         Send(self,@Say,#message_rsc=Goad_ready_to_fight,
               #parm1=Send(First(plCombatants),@GetCapDef),
               #parm2=Send(First(plCombatants),@GetName),
               #parm3=Send(Nth(plCombatants,2),@GetDef),
               #parm4=Send(Nth(plCombatants,2),@GetName));
      }
      if piCombat_style = STYLE_LAST_MAN_STANDING
      {
         Send(self,@Say,#message_rsc=Goad_ready_last_man);
      }

      ptCommence = CreateTimer(self,@CommenceTimer,
            Random(COMMENCE_DELAY_MIN,COMMENCE_DELAY_MAX));

      foreach i in Send(poOwner,@GetHolderActive)
      {
         each_obj = Send(poOwner,@HolderExtractObject,#data=i);
         if Send(self,@IsCombatant,#who=each_obj)
         {
            Send(self,@Teleport,#what=each_obj,#goinplay=TRUE);
         }
         Send(each_obj,@midiSendUser,#midi_rsc=Goad_battle_midi_rsc);
      }
      Send(poOwner,@BeginFight,#lCombatants=plCombatants);

      return;
   }

   Commence()
   "Called by CommenceTimer."
   {
      local delay;

      Send(self,@Say,#message_rsc=Goad_commence);
      pbLastMinute = FALSE;
      pbWarned = FALSE;
      delay = FIGHT_DELAY_LAST_MAN_STANDING;
      if piCombat_style = STYLE_ONE_ON_ONE
      {
         delay = FIGHT_DELAY_ONE_ON_ONE;
      }

      ptFight = CreateTimer(self,@FightTimer,delay);

      return;
   }

   FightIsDraw()
   "Called by FightTimer."
   {
      Send(self,@Say,#message_rsc=Goad_draw);
      Send(self,@ClearCombatants);

      return;
   }

   KillLogged()
   "We gave the logged player 30 sec to get back on, now we end the fight."
   {
      local i;

      foreach i in plCombatants
      {
         if NOT Send(i,@IsLoggedOn)
         {
            // This is the player we need.
            Send(self,@CombatantReneges,#who=i,#died=TRUE);
         }
      }
      ptReconnectTime = $;

      return;
   }

   CombatantReneges(who=$,died=FALSE)
   {
      local i;

      Send(poOwner,@ClearFromOccupiedList,#who=who);

      if (died = FALSE)
         AND (Send(self,@FightInSession)
            OR ptCommence <> $)
         AND IsClass(who,&Player)
      {
         // We probably lost connection or logged off.
         if Send(who,@GetOwner) = $
         {
            return;
         }
         else
         {
            // If we got here while logged on it's probably a bug.
            Debug("Player ",Send(who,@GetTrueName),
                  " reneged from Goad's arena while still fighting!");
         }

         return;
      }

      foreach i in plCombatants
      {
         if i = who
         {
            plCombatants = DelListElem(plCombatants,i);
         }
      }

      if IsClass(who,&Player)
         AND ((NOT Send(poOwner,@ArenaRealDeath))
            OR died = FALSE)
         AND Send(who,@IsLoggedOn)
      {
         Send(self,@Teleport,#what=who,#outofplay=TRUE);
      }

      if who = poChampion
      {
         Send(self,@ResetChampion);
      }

      if ptAccept <> $ AND NOT Send(self,@ValidateFight)
      {
         DeleteTimer(ptAccept);
         ptAccept = $;
         Send(self,@Say,#message_rsc=Goad_invalid_fight);
      }
      if ptCommence <> $ AND NOT Send(self,@ValidateFight)
      {
         DeleteTimer(ptCommence);
         ptCommence = $;
         Send(self,@Say,#message_rsc=Goad_invalid_fight);
         Send(poOwner,@EndFight);
      }

      Send(self,@CheckForWinner);

      /// Scenario:  champion quits during signup for last man standing.
      if poChampion = $ and Length(plCombatants) >= 2
      {
         if piCombat_Style = STYLE_LAST_MAN_STANDING
         {
            /// choose another champion - first player in line will do
            poChampion = First(plCombatants);
         }
      }

      return;
   }

   SomethingKilled(what=$,victim=$)
   {
      /// We handle all death messages here, but not 'win fight' messages.
      /// Those are handled after the renege messages.

      if IsClass(what,&spell)
         AND Send(self,@IsCombatant,#who=victim)
      {
         Send(self,@Say,#message_rsc=Goad_killed_by_spell,
               #parm1=Send(victim,@GetCapDef),
               #parm2=Send(victim,@GetName),
               #parm3=Send(what,@GetName));
      }
      else
      {
         if victim = poChampion
         {
            Send(self,@Say,#message_rsc=Goad_killed_champion,
                  #parm1=Send(what,@GetCapDef),
                  #parm2=Send(what,@GetName),
                  #parm3=Send(victim,@GetDef),
                  #parm4=Send(victim,@GetName));
         }
         else
         {
            if what = poChampion
            {
               Send(self,@Say,#message_rsc=Goad_champion_killed,
                     #parm1=Send(victim,@GetDef),
                     #parm2=Send(victim,@GetName));
            }
            else
            {
               Send(self,@Say,#message_rsc=Goad_someone_killed,
                     #parm1=Send(what,@GetCapDef),
                     #parm2=Send(what,@GetName),
                     #parm3=Send(victim,@GetDef),
                     #parm4=Send(victim,@GetName));
            }
         }
      }
      Send(self,@CombatantReneges,#who=victim,#died=TRUE);

      propagate;
   }

   CheckForWinner()
   "Checks to see if there is only one combatant left.  If so, then "
   "declare him the winner."
   {
      local oldChamp, i, j;

      if plCombatants = $
      {
         return;
      }

      if piCombat_style = STYLE_GUILD_VS_GUILD
         OR piCombat_style = STYLE_LAST_GUILD_STANDING
      {
         Send(self,@CheckForWinnerGuild);

         return;
      }

      if Length(plCombatants) <> 1
      {
         return;
      }
      else
      {
         oldChamp = poChampion;
         poChampion = First(plCombatants);

         if ptFight <> $          /// a fight was on!  This guy won!
         {
            Send(self,@Say,#message_rsc=Goad_victor,
                  #parm1=Send(poChampion,@GetCapDef),
                  #parm2=Send(poChampion,@GetName));
            DeleteTimer(ptFight);
            ptFight = $;

            /// Add to win counter.
            Send(self,@RewardWinner);
            if Send(poOwner,@CheckDefaultRoomFlag,#flag=ROOM_SAFE_DEATH)
            {
               foreach i in Send(poOwner,@GetHolderActive)
               {
                  j = First(i);
                  if IsClass(j,&monster)
                     AND (0 = (Send(j,@getBehavior) & AI_NPC))
                     AND NOT IsClass(j,&Towns)
                  {
                     Post(j,@Delete);
                  }
               }
            }

            if oldChamp <> poChampion
            {
               Send(self,@Say,#message_rsc=Goad_new_champion,
                     #parm1=Send(poChampion,@GetDef),
                     #parm2=Send(poChampion,@GetName));
            }
            else
            {
               Send(self,@Say,#message_rsc = Goad_retain_title,
                     #parm1=Send(poChampion,@GetCapDef),
                     #parm2=Send(poChampion,@GetName),
                     #parm3=Send(poChampion,@GetHisHer));
            }

            return;
         }
         if oldChamp <> poChampion
         {
            Send(self,@Say,#message_rsc=Goad_new_champion,
                  #parm1=Send(poChampion,@GetDef),
                  #parm2=Send(poChampion,@GetName));
         }
         else
         {
            Send(self,@Say,#message_rsc=Goad_retain_title,
                  #parm1=Send(poChampion,@GetCapDef),
                  #parm2=Send(poChampion,@GetName),
                  #parm3=Send(poChampion,@GetHisHer));
         }
      }

      return;
   }

   RewardWinner()
   {
      local index, i;

      /// Tell room to lower maze or get rid of pests, whatever.
      Send(poOwner,@EndFight,#lCombatants=plCombatants);

      /// Assume that everyone left in plCombatant is a winner.

      foreach i in plCombatants
      {
         if NOT IsClass(i,&Monster)
         {
            index = (Send(i,@GetMaxHealth)+15) - Send(i,@GetHealth);
            Send(i,@GainHealth,#amount=Bound(index,0,15));
            index = (Send(i,@GetMaxMana)+25) - Send(i,@GetMana);
            Send(i,@GainMana,#amount=Bound(index,0,25));
         }

         /// Teleport any and all combatants out of the ring.
         if ptFight <> $
         {
            DeleteTimer(ptFight);
            ptFight = $;
         }
      }

      return;
   }

   ///////////////////////////////////////////////////////////////
   ///  Timer Triggers                                           //
   ///////////////////////////////////////////////////////////////

   AcceptTimer()
   "Runs through twice.  The first time, it says 'accept or lose your"
   "crown.  The second time, it reneges the champ."
   {
      ptAccept = $;

      if piCombat_style = STYLE_ONE_ON_ONE
      {
         Send(self,@AcceptTimerOneOnOne);

         return;
      }

      if pbAccept = FALSE
      {
         Send(self,@Say,#message_rsc=Goad_more_combatants,
               #parm1=(ACCEPT_DELAY/1000));
         ptAccept = CreateTimer(self,@AcceptTimer,ACCEPT_DELAY);
         pbAccept = TRUE;
      }
      else
      {
         Send(self,@ReadyFight);
      }

      return;
   }

   AcceptTimerOneOnOne()
   {
      if pbAccept = FALSE
      {
         Send(self,@Say,#message_rsc=Goad_must_accept,
               #parm1=(ACCEPT_DELAY/1000),
               #parm2=Send(First(plCombatants),@GetDef),
               #parm3=Send(First(plCombatants),@GetName));
         ptAccept = CreateTimer(self,@AcceptTimer,ACCEPT_DELAY);
         pbAccept = TRUE;
      }
      else
      {
         Send(self,@Say,#message_rsc = Goad_Champ_reneges,
               #parm1=Send(poChampion,@GetCapDef),
               #parm2=Send(poChampion,@GetName),
               #parm3=Send(poChampion,@GetHisHer));
         Send(self,@CombatantReneges,#who=poChampion);
      }

      return;
   }

   CommenceTimer()
   "Starts the fight."
   {
      ptCommence = $;
      Send(self,@Commence);

      return;
   }

   FightTimer()
   {
      local i;

      ptFight = $;
      if pbWarned = TRUE
      {
         /// message:  EVERYBODY DIES!!!!!
         foreach i in plCombatants
         {
            Send(SYS,@utilGoNearSquare,#what=i,#where=poOwner,
                  #new_row=9,#new_col=14,#new_angle=ANGLE_EAST);
            pbWarned = FALSE;
         }

         return;
      }

      if pbLastMinute = FALSE
         AND pbWarned = FALSE
      {
         pbLastMinute = TRUE;
         Send(self,@Say,#message_rsc=Goad_last_minute);
         ptFight = CreateTimer(self,@FightTimer,LAST_MINUTE);
      }
      else
      {
         if pbWarned = FALSE
         {
            pbWarned = TRUE;
            Send(self,@Say,#message_rsc=Goad_speed_up);
            foreach i in plCombatants
            {
               Send(poOwner,@SomethingShot,#who=self,#target=i,
                     #projectile=Send(SYS,@FindSpellByNum,#num=SID_FIREBALL));
               Send(i,@AssessDamage,#damage=Send(i,@GetHealth)/2,#what=self,
                     #report=FALSE,#report_resistance=FALSE,#absolute=TRUE);
            }
            ptFight = CreateTimer(self,@FightTimer,LAST_MINUTE/2);
         }
      }

      return;
   }

   ///////////////////////////////////////////////////////////////
   ///  Speech Triggers                                          //
   ///////////////////////////////////////////////////////////////
   ///                                                           //
   ///  Barring a better interface coming along, speech triggers //
   ///  will continue to be used to activate a battle, to choose //
   ///  the type of battle, and to renege a battle, among other  //
   ///  things.                                                  //
   ///                                                           //
   ///////////////////////////////////////////////////////////////

   SomeoneSaid(what=$,type=$,string=$)
   "Checks for keywords which activate commands."
   {
      local i, oActor;

      if (not Send(self,@FightInSession))
         AND (ptCommence = $)
         AND IsClass(what,&player)
      {
         if StringEqual(string,"champion")
         {
            Post(self,@TrigChampion,#what=what);

            return FALSE;
         }

         if StringEqual(string,"challenge")
         {
            Post(self,@TrigChallenge,#what=what);

            return FALSE;
         }

         if StringEqual(string,"accept")
         {
            Post(self,@TrigAccept,#what=what);

            return FALSE;
         }

         if StringEqual(string,"renege")
         {
            Post(self,@TrigRenege,#what=what);

            return FALSE;
         }

         if StringEqual(string,"duel")
         {
            Post(self,@ChooseCombat,#style=STYLE_ONE_ON_ONE,#actor=what);

            return FALSE;
         }

         ///Rumble style cut due to insufficient test.
         //if StringEqual(string,"rumble")
         //{
            //Post(self,@ChooseCombat,#style=STYLE_LAST_MAN_STANDING,
            //      #actor=what);
            //return FALSE;
         //}
      }

      if Send(self,@FightInSession)
      {
         if StringEqual(string,"champion")
            OR StringEqual(string,"challenge")
            OR StringEqual(string,"duel")
            OR StringEqual(string,"rumble")
         {
            Send(what,@MsgSendUser,#message_rsc=Goad_not_during_fight);

            return FALSE;
         }
      }

      propagate;
   }

   TrigChampion(what=$)
   "Someone in the room said 'champion'.  Net effect, if there is no "
   "champion, then make the talker the new champion."
   {
      if piCombat_style = STYLE_NO_FIGHT
      {
         ///Only one style available: Duel.
         //Send(self,@Say,#message_rsc=Goad_must_choose_style);
         //return;
         Send(self,@ChooseCombat,#style=STYLE_ONE_ON_ONE,#actor=what);
      }
      if NOT Send(self,@AcceptingChampions)
      {
         if Send(self,@AcceptingChallengers)
         {
            if poChampion = what
            {
               Send(self,@SayToOne,#target=what,
                     #message_rsc=Goad_Already_champion);
            }
            else
            {
               Send(self,@SayToOne,#target=what,
                     #message_rsc=Goad_already_have_champion,
                     #parm1=Send(poChampion,@GetDef),
                     #parm2=Send(poChampion,@GetName),
                     #parm3=Send(poChampion,@GetHimHer));
            }
         }
         else
         {
            Send(self,@SayToOne,#target=what,#message_rsc=Goad_no_need);
         }
      }
      else   /// accept the champion here
      {
         Send(self,@NewCombatant,#who=what);
         Post(self,@Say,#message_rsc=Goad_new_champion,
               #parm1=Send(poChampion,@GetDef),
               #parm2=Send(poChampion,@GetName));
      }

      return;
   }

   TrigChallenge(what=$)
   "Catches when someone says the word 'challenge'.  What happens depends on "
   "the match, but in general, this will fail if there is no champion, and "
   "will succeed only if there is a challenger spot open."
   {
      if piCombat_style = STYLE_NO_FIGHT
      {
         Post(self,@ChooseCombat,#style = STYLE_ONE_ON_ONE,#actor=what);
         //Send(self,@SayToOne,#target=what,#message_rsc=Goad_must_choose_style);
         //return;
      }

      if Send(self,@FightInSession)
      {
         Send(self,@SayToOne,#target=what,#message_rsc=Goad_fight_in_progress);

         return;
      }

      if Send(self,@AcceptingChampions)
      {
         Send(self,@SayToOne,#target=what,#message_rsc=Goad_need_champion);

         return;
      }

      if NOT Send(self,@AcceptingChallengers)
      {
         Send(self,@SayToOne,#target=what,
               #message_rsc=Goad_dont_need_challenger);

         return;
      }
      Send(self,@Challenge,#who=what);

      return;
   }

   TrigAccept(what=$)
   {
      if piCombat_style <> STYLE_ONE_ON_ONE
      {
         // You can only accept fights in traditional 2 man fights.
         return FALSE;
      }

      if what <> poChampion
      {
         // Only the champion can accept a fight from a challenger.
         return FALSE;
      }

      if Send(self,@FightInSession)
      {
         return FALSE;
      }

      if ptAccept <> $
      {
         Send(self,@accept,#who=what);
      }

      return;
   }

   TrigRenege(what=$)
   "Call this when someone says 'renege'.  This now works for anyone, "
   "and does not need to be said twice."
   {
      if Send(self,@IsCombatant,#who=what)
      {
         Send(self,@Say,#message_rsc = Goad_combatant_reneges,
               #parm1=Send(what,@GetCapDef),
               #parm2=Send(what,@GetName));
           Send(self,@CombatantReneges,#who=what);
      }
      else
      {
         Send(self,@SayToOne,#target=what,#message_rsc=Goad_cant_renege);
      }

      return;
   }

   ChooseCombat(style=STYLE_NO_FIGHT,actor=$)
   {
      if piCombat_style <> STYLE_NO_FIGHT
         AND plCombatants <> $
      {
         Send(self,@Say,#message_rsc=Goad_cant_switch);

         return;
      }

      piCombat_style = style;
      if piCombat_style <> STYLE_NO_FIGHT
      {
         Send(self,@Say,#message_rsc=Goad_new_combat_style,
               #parm1=Send(self,@GetCombatName));
      }

      return;
   }

   ///////////////////////////////////////////////////////////////
   ///  Maintenance functions                                    //
   ///////////////////////////////////////////////////////////////

   Delete()
   {
      if ptAdvert <> $
      {
         DeleteTimer(ptAdvert);
         ptAdvert = $;
      }
      if ptCommence <> $
      {
         DeleteTimer(ptCommence);
         ptCommence = $;
      }
      if ptAccept <> $
      {
         DeleteTimer(ptAccept);
         ptAccept = $;
      }
      if ptFight <> $
      {
         DeleteTimer(ptFight);
         ptFight = $;
      }

      propagate;
   }

   DestroyDisposable()
   {
      return FALSE;    /// Don't delete it on random pass-throughs.
   }

   IsCombatant(who=$)
   {
      local i, count;

      count = 1;
      foreach i in plCombatants
      {
         if i = who
         {
            return count;
         }
         count = count + 1;
      }

      if IsClass(who,&Monster)
         AND NOT IsClass(who,&TosTown)
         AND Send(poOwner,@InPlay,#what=who,#bNonPlayerOkay=TRUE)
      {
         return TRUE;
      }

      return 0;
   }

   ReqSomethingLeft(what=$)
   {
      if Send(self,@IsCombatant,#who=what)
         AND (ptFight <> $
            OR ptAccept <> $)
      {
         Send(self,@SayToOne,#target=what,#message_rsc=Goad_cant_leave);

         return FALSE;
      }

      return TRUE;
   }

   Teleport(what=$,goinplay=FALSE,outofplay=FALSE)
   {
      local i, bInList;

      if IsClass(what,&Player)
      {
         if goinplay
            OR Send(self,@IsCombatant,#who=what)
         {
            bInList = FALSE;
            foreach i in plUserStats
            {
               if First(i) = what
               {
                  bInList = TRUE;
               }
            }

            if not bInList
            {
               plUserStats = Cons([what,
                  Send(what,@GetHealth),
                  Send(what,@GetMana),
                  Send(what,@GetVigor)],plUserStats);
            }

            if Send(what,@GetHealth) < Send(what,@GetMaxHealth)
            {
               Send(what,@GainHealthnormal,#amount=200);
            }
            if Send(what,@GetMana) < Send(what,@GetMaxMana)
            {
               Send(what,@GainMana,#amount=Send(what,@GetMaxMana)
                                                - Send(what,@GetMana));
            }

            Send(what,@AddExertion,#SetToThreshold = TRUE);
         }
         else
         {
            foreach i in plUserStats
            {
               if First(i) = what
               {
                  Send(what,@LoseHealth,#amount=Send(what,@GetHealth)-Nth(i,2));
                  Send(what,@GainMana,#amount=Nth(i,3)-Send(what,@GetMana));
                  Send(what,@AddExertion,
                        #amount=-10000*(Nth(i,2)-Send(what,@GetVigor)));
                  plUserStats = DelListElem(plUserStats,i);

               }
            }
         }
         Send(poOwner,@Teleport,#what=what,
               #goinplay=goinplay,#outofplay=outofplay);
      }

      return;
   }

   ClearCombatants()
   {
      local i, j;

      foreach i in plCombatants
      {
            Send(self,@Teleport,#what=i,#outofplay=TRUE);
      }

      plCombatants = $;
      Send(self,@ResetChampion);
      Send(poOwner,@EndFight,#lCombatants=plCombatants);
      pbAccept = FALSE;
      if Send(poOwner,@CheckDefaultRoomFlag,#flag=ROOM_SAFE_DEATH)
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            j = First(i);
            if IsClass(j,&monster)
               AND (0 = (Send(j,@getBehavior) & AI_NPC))
               AND NOT IsClass(j,&Towns) 
            {
               Post(j,@Delete);
            }
            /// Yuckily, this is the easiest way to deal with this.
            if IsClass(j,&WallOfFire) OR IsClass(j,&WallOfLightning)
            OR IsClass(j,&PassiveWallOfFire)
            OR IsClass(j,&PassiveWallOfLightning)
            OR IsClass(j,&Web) OR IsClass(j,&PoisonFogCloud)
            {
               Send(j,@Delete);
            }
         }
      }

      if ptFight <> $
      {
         DeleteTimer(ptFight);
         ptFight = $;
      }
      if ptAccept <> $
      {
         DeleteTimer(ptAccept);
         ptAccept = $;
      }
      if ptCommence <> $
      {
         DeleteTimer(ptCommence);
         ptCommence = $;
      }

      return;
   }

   SomethingLeft(what=$)
   {
      if Send(self,@IsCombatant,#who=what)
      {
         if NOT IsClass(what,&Monster)
         {
            if ptFight <> $
            {
               Send(self,@Say,#message_rsc=Goad_pitifully_fled,
                     #parm1=Send(what,@GetCapDef),
                     #parm2=Send(what,@GetName));
               ptReconnectTime = CreateTimer(self,@KillLogged,30000);
            }
            else
            {
               Send(self,@Say,#message_rsc=Goad_wont_fight,
                     #parm1=Send(what,@GetDef),
                     #parm2=Send(what,@GetName));
               Post(self,@CombatantReneges,#who=what,#died=TRUE);
            }
         }

         Post(self,@CombatantReneges,#who=what);

         propagate;
      }

      propagate;
   }

   ReqSomethingAttack(what=$,victim=$)
   {
      // Targetless spells: heat, earthquake, umbrella and mana bomb
      // return true as long as a fight is on.
      if victim = $
      {
         if NOT Send(self,@IsCombatant,#who=what)
         {
            if IsClass(what,&Player)
            {
               Send(self,@SayToOne,#target=what,
                     #message_rsc=Goad_only_combatants);
            }

            return FALSE;
         }

         if ptFight = $
         {
            if IsClass(what,&Player)
            {
               Send(self,@SayToOne,#target=what,
                     #message_rsc=Goad_no_fighting_yet);
            }

            return FALSE;
         }

         return TRUE;
      }

      /// Monsters attacking players
      if IsClass(what,&Monster)
      {
         if Send(self,@IsCombatant,#who=victim)
            AND Send(self,@FightInSession)
         {
            propagate;
         }
         else
         {
            return FALSE;
         }
      }

      /// Spells with targets = all the rest of them

      if NOT Send(self,@IsCombatant,#who=what)
         OR NOT (Send(self,@IsCombatant,#who=victim)
            AND IsClass(victim,&Player))
      {
         if IsClass(what,&Player)
         {
            Send(self,@SayToOne,#target=what,#message_rsc=Goad_only_combatants);
         }

         return FALSE;
      }

      if ptFight = $
      {
         if IsClass(what,&player)
         {
            Send(self,@SayToOne,#target=what,#message_rsc=Goad_no_fighting_yet);
         }

         return FALSE;
      }

      propagate;
   }

   ReqSpellCast(who=$,oSpell=$,lItems=$)
   {
      local i, spellNum;

      // DM spells are never blocked by the watcher
      if Send(oSpell,@GetSchool) = SS_DM_COMMAND
      {
         propagate;
      }

      //// Only combatants may cast spells on each other.
      /// if the caster is not a combatant, don't let him cast.
      if (NOT Send(self,@IsCombatant,#who=who)
         AND IsClass(who,&Player))
      {
         Send(self,@SayToOne,#target=who,#message_rsc=Goad_only_combatants_cast);

         return FALSE;
      }

      /// If the caster's single target is not a combatant, don't let him cast.
      if Length(lItems) = 1
      {
         foreach i in lItems
         {
            if NOT Send(self,@IsCombatant,#who=i)
               AND IsClass(i,&Player)
            {
               Send(self,@SayToOne,#target=who,
                     #message_rsc=Goad_only_target_combatants);

               return FALSE;
            }
         }
      }

      //// Can't cast spells unless a fight is in session.
      if ptFight = $
      {
         if IsClass(who,&Player)
         {
            Send(self,@SayToOne,#target=who,#message_rsc=Goad_no_fighting_yet);
         }

         return FALSE;
      }

      //// Certain spells are banned outright
      if Send(oSpell,@SpellBannedInArena)
      {
         Send(self,@SayToOne,#target=who,#message_rsc=Goad_spell_banned,
               #parm1=Send(oSpell,@GetName));

         return FALSE;
      }

      propagate;
   }

   GetCombatName(style=$)
   {
      if style = $
      {
         if piCombat_style = STYLE_ONE_ON_ONE
         {
            return Goad_style_one_on_one;
         }
         if piCombat_style = STYLE_LAST_MAN_STANDING
         {
            return Goad_style_last_man_standing;
         }
         Debug("GetCombatName called with invalid fighting style chosen!");

         return;
      }

      if style = STYLE_ONE_ON_ONE
      {
         return Goad_style_one_on_one;
      }
      if style = STYLE_LAST_MAN_STANDING
      {
         return Goad_style_last_man_standing;
      }

     return;
   }

   SomethingEntered(what=$)
   {
      local i;

      foreach i in plCombatants
      {
         if what = i
            AND ptReconnectTime <> $
         {
            DeleteTimer(ptReconnectTime);
            ptReconnectTime = $;
         }
      }

      if IsClass(what,&Admin)
         AND NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_MORPHED)
         AND NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_ANONYMOUS)
      {
         Post(self,@Say,#message_rsc=Goad_worship_admin,
               #parm1=Send(what,@GetTrueName),
               #parm2=Send(what,@GetHeShe));

         propagate;
      }

      if IsClass(what,&DM)
         AND NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_MORPHED)
         AND NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_ANONYMOUS)
      {
         Post(self,@Say,#message_rsc=Goad_worship_dm,
               #parm1=Send(what,@GetLordLady),
               #parm2=Send(what,@GetName));

         propagate;
      }

      if IsClass(what,&Player)
      {
         Send(what,@MsgSendUser,#message_rsc = Goad_welcome);
      }

      propagate;
   }

end
//////////////////////////////////////////////////////////////////////////////
