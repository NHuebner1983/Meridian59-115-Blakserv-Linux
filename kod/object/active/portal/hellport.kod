// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
HellPortal is Portal

constants:

   include blakston.khd
   SWITCH_DELAY_MIN = 5000
   SWITCH_DELAY_MAX = 10000

resources:

   include hellport.lkod

   hellportal_name_rsc = "rip in space"
   hellportal_icon_rsc = teleport.bgf
   hellportal_desc_rsc = "Gazing through the anomaly, you can see %s."

   hellportal_move_req_no = "Some force prevents you from entering the anomaly."

   hellportal_tos = "the bustling bar of Familiars"
   hellportal_marion = "the laid-back atmosphere of the Limping Toad"
   hellportal_jasper = "the quiet Yonder Inn of Jasper"
   hellportal_cornoth = "the lazy happenings in the Cibilo Creek Inn"
   hellportal_barloque = "the fine Brownstone Inn in a bustling Barloque"
   hellportal_raza = "the rustic charm of the Raza Inn"
   hellportal_kocatan = "the sturdy, island fortress of Ko'catan"

classvars:

   vrName = hellportal_name_rsc
   viMoveOn_type = MOVEON_TELEPORTER
   viAnimationSpeed = 400

properties:

   vrIcon = hellportal_icon_rsc
   vrDesc = hellportal_desc_rsc
   piDest_room = RID_TOS_INN
   plPossibleLocations = $
   ptLocations = $
   piDrawFx = DRAWFX_TRANSLUCENT_75

messages:

   Constructed()
   {
      plPossibleLocations = [ RID_TOS_INN, RID_COR_INN, RID_BAR_INN,
                              RID_JAS_INN, RID_MAR_INN, RID_RAZA_INN ];

      // Set up the locations timer.
      Send(self,@LocationsTimer);

      propagate;
   }

   LocationsTimer()
   {
      ptLocations = $;

      Send(self,@SwapLocations);
      ptLocations = Createtimer(self,@LocationsTimer,
                        Random(SWITCH_DELAY_MIN,SWITCH_DELAY_MAX));

      return;
   }

   SwapLocations()
   {
      local iNum, iChosen, oRoom;

      iNum = Length(plPossibleLocations);

      iChosen = piDest_Room;
      while iChosen = piDest_room
      {
         iChosen = Nth(plPossibleLocations,Random(1,iNum));
      }

      oRoom = Send(SYS,@FindRoomByNum,#num=iChosen);

      // If room doesn't exist, don't change anything.
      if oRoom <> $
      {
         piDest_room = iChosen;
         piDest_row = Send(oRoom,@GetTeleportRow);
         piDest_col = Send(oRoom,@GetTeleportCol);
      }

      return;
   }

   ShowDesc(who=$)
   "Ko'catan deaths see the island, Death Rift users see their teleport destination."
   {
      local rLocation;

      if (poOwner <> $ AND IsClass(poOwner,&Underworld))
         AND Send(who,@CheckPlayerFlag,#flag=PFLAG2_KOCATAN_DEATH,#flagset=2)
      {
         rLocation = hellportal_kocatan;
      }
      else if (Send(who,@CheckPlayerFlag,#flag=PFLAG_DEATH_RIFTING)
         AND Send(who,@GetBoundLocationName) <> $)
      {
         rLocation = Send(who,@GetBoundLocationName);
      }
      else if piDest_room = RID_MAR_INN
      {
         rLocation = hellportal_marion;
      }
      else if piDest_room = RID_COR_INN
      {
         rLocation = hellportal_cornoth;
      }
      else if piDest_room = RID_JAS_INN
      {
         rLocation = hellportal_jasper;
      }
      else if piDest_room = RID_BAR_INN
      {
         rLocation = hellportal_barloque;
      }
      else if piDest_room = RID_RAZA_INN
      {
         rLocation = hellportal_raza;
      }
      else
      {
         // Default
         rLocation = hellportal_tos;
      }

      AddPacket(4,vrDesc,4,rLocation);

      return;
   }

   TeleportSomething(what=$)
   "Called when something walks on top of us."
   {
      local oRoom;

      // Check for Death Rifters.
      if poOwner <> $
         AND IsClass(poOwner,&Underworld)
         AND IsClass(what,&User)
         AND Send(what,@CheckPlayerFlag,#flag=PFLAG_DEATH_RIFTING)
         AND Send(what,@GetBoundLocationName) <> $
      {
         Send(what,@SendPlayerToBoundLocation);

         return;
      }

      // Check for Ko'catanites.
      if poOwner <> $
         AND IsClass(poOwner,&Underworld)
         AND IsClass(what,&User)
         AND Send(what,@CheckPlayerFlag,#flag=PFLAG2_KOCATAN_DEATH,#flagset=2)
      {
         // Allow them to head to the island.
         Send(what,@SetPlayerFlag,#flag=PFLAG2_KOCATAN_DEATH,#value=FALSE,#flagset=2);
         oRoom = Send(SYS,@FindRoomByNum,#num=RID_KOC_INN);
         Send(oRoom,@Teleport,#what=what);

         return;
      }

      propagate;
   }

   Delete()
   {
      if ptLocations <> $
      {
         DeleteTimer(ptLocations);
         ptLocations = $;
      }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
