// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
GoldSword is Weapon

constants:

   include blakston.khd

resources:

   include goldswrd.lkod

   goldsword_name_rsc = "gold sword"
   goldsword_icon_rsc = gsword.bgf
   goldsword_desc_rsc = \
      "This sword is delicate and ornamental.  It seems like it might be "
      "good for a fanciful duel, but it is certainly not suitable for the "
      "rigors of blood combat."

   goldsword_window_overlay_rsc = povgswrd.bgf
   goldsword_player_overlay = gswordov.bgf

classvars:
   vrName = goldsword_name_rsc
   vrIcon = goldsword_icon_rsc
   vrDesc = goldsword_desc_rsc

   viValue_average = 600
   viWeight = 90
   viBulk = 60

   // Gold swords are average quality thrusting weapons
   viWeaponType = WEAPON_TYPE_THRUST
   viWeaponQuality = WEAPON_QUALITY_NORMAL

   viProficiency_Needed = SKID_PROFICIENCY_SWORD

   vrWeapon_window_overlay = goldsword_window_overlay_rsc
   vrWeapon_overlay = goldsword_player_overlay

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

   viMin_damage = 2
   viMax_damage = 5

   viRange = 3 * FINENESS

properties:

   piAttack_type = ATCK_WEAP_NONMAGIC+ATCK_WEAP_THRUST

messages:

   GetBaseDamage()
   {
      local oOwner, iDamage;

      iDamage = random(viMin_damage,viMax_damage);

      oOwner = send(send(self,@GetOwner),@getowner);
      if send(oOwner,@IsArena)
      {
         iDamage = iDamage + 7;
      }

      return iDamage;
   }

   GetMinDamage()
   {
      return viMin_damage + piDamageBonus;
   }

   GetMaxDamage()
   {
      return viMax_damage + piDamageBonus;
   }

   GetMinSpecialDamage()
   {
      return viMin_damage + 7 + piDamageBonus;
   }

   GetMaxSpecialDamage()
   {
      return viMax_damage + 7 + piDamageBonus;
   }

   GetMinSpecialDamageWithOwnerStats()
   {
      local iDamage, oSkill;

      iDamage = Send(self,@GetMinSpecialDamage)*100;

      if IsClass(poOwner,&User)
      {
         oSkill = Send(SYS,@FindSkillByNum,#num=Send(self,@GetDefaultStrokeNumber));
         iDamage = Send(oSkill,@DamageFactors,#damage=iDamage,#who=poOwner,#weapon_used=self)/100;
      }
      else
      {
         return 0;
      }

      return iDamage;
   }

   GetMaxSpecialDamageWithOwnerStats()
   {
      local iDamage, oSkill;

      iDamage = Send(self,@GetMaxSpecialDamage)*100;

      If IsClass(poOwner,&User)
      {
         oSkill = Send(SYS,@FindSkillByNum,#num=Send(self,@GetDefaultStrokeNumber));
         iDamage = Send(oSkill,@DamageFactors,#damage=iDamage,#who=poOwner,#weapon_used=self)/100;
      }
      else
      {
         return 0;
      }

      return iDamage;
   }


end
////////////////////////////////////////////////////////////////////////////////
