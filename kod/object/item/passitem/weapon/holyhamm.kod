// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
HolyHammer is Weapon

constants:

   include blakston.khd

resources:

   include holyhamm.lkod

   holyhammer_name_rsc = "holy hammer"
   holyhammer_icon_rsc = hammer.bgf
   holyhammer_desc_rsc = \
      "Inherently having holy blessings, this hammer is even more powerful "
      "than the spiritual variation."
   holyhammer_window_overlay_rsc = povhamr.bgf
   holyhammer_player_overlay = hamrov.bgf

classvars:
   vrName = holyhammer_name_rsc
   vrIcon = holyhammer_icon_rsc
   vrDesc = holyhammer_desc_rsc

   // Holy Hammers are high quality bludgeoning weapons
   viWeaponType = WEAPON_TYPE_BLUDGEON
   viWeaponQuality = WEAPON_QUALITY_HIGH

   viProficiency_Needed = SKID_PROFICIENCY_HAMMER

   viValue_average = 0
   // Light because it's magical.
   viWeight = 15
   viBulk = 60

   vrWeapon_window_overlay = holyhammer_window_overlay_rsc
   vrWeapon_overlay = holyhammer_player_overlay

   viGround_group = 1
   viInventory_group = 3
   viBroken_group = 2

properties:

   piAttack_type = ATCK_WEAP_MAGIC+ATCK_WEAP_BLUDGEON
   ptLongevity
   piItem_flags = 10
   piHitBonus = 0

messages:

   Constructor(iLongevity=$, iToHitBonus=$)
   {
      local oWeapAtt;

      if iToHitBonus <> $
      {
         piHitBonus = iToHitBonus;
      }

      Send(self,@SetSpellFlag,#flag=ATCK_SPELL_HOLY,#value=TRUE);

      propagate;
   }

   WeaponHitTarget()
   {
      // Return here so that holy hammers don't get damaged.
      return;
   }

   CanEnchant()
   {
      return FALSE;
   }

   CanBeGivenToNPC()
   {
      return FALSE;
   }

   CanShatter()
   {
      return FALSE;
   }

   CanSwap()
   {
      return FALSE;
   }

   CanWeaken()
   {
      return FALSE;
   }

   GetBaseSpellModifier()
   {
      // It's mystically created and temporary.  No penalties.
      return 0;
   }

end
////////////////////////////////////////////////////////////////////////////////
