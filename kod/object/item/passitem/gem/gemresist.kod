// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
GemResistance is Gem

constants:

   include blakston.khd

resources:

   gem_resist_name_rsc = "star ruby"
   gem_resist_icon_rsc = ruby.bgf
   gem_resist_desc_rsc = \
      "This shard of gemstone mysteriously retains some of the living "
      "heat from its celestial fall."
   gem_resist_effect_desc_rsc = \
      "  When attached to armor, it will offer %i%% %s."
   gem_resist_attached_rsc = "\nAn attached %s adds %i%% %s."

classvars:

   vrName = gem_resist_name_rsc
   vrIcon = gem_resist_icon_rsc
   vrDesc = gem_resist_desc_rsc
   viValue_average = 25000
   viWeight = 0
   viBulk = 0

properties:

   piResistStrength = 1
   piResistType = -ATCK_SPELL_FIRE
   
messages:

   Constructor()
   {
      local iRandomRoll;

      iRandomRoll = Random(1,1000);

      if iRandomRoll < 333
      {
         piResistStrength = 1;
         propagate;
      }

      if iRandomRoll < 666
      {
         piResistStrength = 2;
         propagate;
      }

      if iRandomRoll < 950
      {
         piResistStrength = 3;
         propagate;
      }

      if iRandomRoll < 1000
      {
         piResistStrength = 4;
         propagate;
      }

      if iRandomRoll = 1000
      {
         piResistStrength = 5;
         propagate;
      }

      propagate;
   }

   GetType()
   {
      return piResistType;
   }

   GetStrength()
   {
      return piResistStrength;
   }

   ModifyResistance(resistance_list=$)
   {
      local oResist;
      
      foreach oResist in resistance_list
      {
         if Nth(oResist,1) = piResistType
         {
            SetNth(oResist,2,piResistStrength + Nth(oResist,2));
            if Nth(oResist,2) = 0
            {
               resistance_list = DelListElem(resistance_list,oResist);
            }

            return resistance_list;
         }
      }

      resistance_list = Cons([piResistType,piResistStrength],resistance_list);

      return resistance_list;
   }
   
   AppendDesc()
   {
      AddPacket(4,gem_resist_effect_desc_rsc, 4,piResistStrength,
                4,Send(SYS,@GetResistanceName,#type=piResistType));

      return;
   }

   AttributeDesc()
   {
      AddPacket(4,gem_resist_attached_rsc, 4,Send(self,@GetName),
                4,piResistStrength, 4,Send(SYS,@GetResistanceName,
                                          #type=piResistType));

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
