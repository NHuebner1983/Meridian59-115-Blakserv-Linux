// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RoomKeyCopy is PassiveItem

constants:

   include blakston.khd

resources:

   include roomkeyc.lkod

   RoomKeyCopy_name_rsc = "silver room key"
   RoomKeyCopy_icon_rsc = roomkeyc.bgf
   RoomKeyCopy_desc_rsc = \
      "This solid silver key bears an inscription which reads:\n%q's room "
      "at %s."

   RoomKeyCopy_vanishes = \
      "Your silver room key dissolves into a strange silver liquid, then "
      "evaporates into a blue mist and is gone."

   RoomKeyCopy_teleport = \
      "As you slide the key into the lock, a strange white glow envelops "
      "you, and you find yourself somewhere else."

   RoomKeyCopy_no_use = "You cannot find a keyhole that would fit this key."

   RoomKeyCopy_no_drop_room = "You cannot drop your key here."

   RoomKeyCopy_no_token = \
      "You can't let go of your token to fit your key into the lock."

classvars:

   vrName = RoomKeyCopy_name_rsc
   vrIcon = RoomKeyCopy_icon_rsc
   vrDesc = RoomKeyCopy_desc_rsc

   viItem_type = ITEMTYPE_SPECIAL

   viBulk = 10
   viWeight = 10
   viValue_average = 80

   viUse_type = ITEM_SINGLE_USE

properties:

   piRID = $

messages:

   Constructor(iRID=$)
   {
      if iRID = $
      {
         post(self,@Delete);

         return;
      }

      piRID = iRID;

      propagate;
   }

   CanBeGivenToNPC()
   {
      return FALSE;
   }

   GetRID()
   {
      return piRID;
   }

   OriginalDeleted()
   {
      if (poOwner <> $) and isClass(poOwner,&User)
      {
         if Send(poOwner,@IsLoggedOn)
         {
            Send(poOwner,@MsgSendUser,#message_rsc=RoomKeyCopy_vanishes);
         }
         else
         {
            if Send(poOwner,@GetSaveRoom) = piRID
            {
               Send(poOwner,@AdminGoToSafety);
            }
         }
      }

      Send(self,@Delete);

      return;
   }

   DoBaseDesc()
   {
      local oRoom;

      oRoom = Send(SYS,@FindRoomByNum,#num=piRID);
      if (oRoom = $)
      {
         Send(self,@Delete);

         return;
      }

      AddPacket(4,vrDesc, 6,Send(Send(oRoom,@GetRenter),@GetTrueName),
                4,Send(oRoom,@GetLocationName));

      return;
   }

   SendAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   SendInventoryAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   ReqNewApply()
   {
      return TRUE;
   }

   NewApplied(what = $,apply_on = $)
   {
      local oRoom, oInn;

      oRoom = Send(SYS,@FindRoomByNum,#num=piRID);
      oInn = Send(SYS,@FindRoomByNum,#num=Send(oRoom,@GetLocation));

      if Send(what,@GetOwner) = oInn
         AND Send(oInn,@EnterRentableRoom,#who=what)
      {
         // Can't bring a token in; no one can follow you
         if Send(what,@PossessesA,#class=&Token)
         {
            Send(what,@MsgSendUser,#message_rsc=RoomKeyCopy_no_token);

            return;
         }

         Send(what,@MsgSendUser,#message_rsc=RoomKeyCopy_teleport);
         Send(what,@EffectSendUserDuration,#effect=EFFECT_WHITEOUT,#duration=750);
         Send(Send(SYS,@FindRoomByNum,#num=piRID),@Enter,#who=what);
      }
      else
      {
         Send(what,@MsgSendUser,#message_rsc=RoomKeyCopy_no_use);
      }

      return;
   }

   NoDropMessage()
   {
      if (poOwner <> $)
         AND IsClass(poOwner,&Player)
      {
         Send(poOwner,@MsgSendUser,#message_rsc=RoomKeyCopy_no_drop_room);
      }

      return;
   }

   ReqNewOwner(what=$)
   {
      // No dropping in rentable rooms to circumvent the room expiration code
      if what <> $
         AND IsClass(what,&RentableRoom)
      {
         Send(self,@NoDropMessage);

         return FALSE;
      }

      propagate;
   }

   CanSwap()
   {
      return FALSE;
   }

   CanShatter()
   {
      return FALSE;
   }

   ReqDMDelete()
   "Keys are not deleted with the DM clear inventory command."
   {
      return FALSE;
   }
   
   CanBeStoredInVault()
   {
      return FALSE;
   }

   DropOnDeath()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
