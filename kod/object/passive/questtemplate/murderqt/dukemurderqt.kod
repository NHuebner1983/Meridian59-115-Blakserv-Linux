// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
DukeMurderQuestTemplate is MurderQuestTemplate
// Parent class for Duke murder mystery quests.

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include dukemurderqt.lkod

   // Quest description.
   dukemurderqt_name_rsc = "Duke murder mystery quest"
   dukemurderqt_desc_rsc = \
      "Duke Akardius would like you to question people regarding the "
      "death of his predecessor, Duke Kalior."

   dukemurderqt_completed_rsc = \
      "You have completed a Duke murder mystery quest."

   // Quest resources.
   murder_duke_assign = \
      "The passing of my uncle weighs heavily upon my mind.  Night and "
      "day, I can think of nothing else!  I must see that someone pays for "
      "this awful crime.  Please help my investigation by asking %NPC for "
      "any information about the murder.  Make sure to tell me what %NPC "
      "has to say."
   murder_duke_success = \
      "Ah, another piece in the complicated puzzle of my Uncle's death.  "
      "Take this with my thanks and my appreciation, my loyal follower."

classvars:

   vrName = dukemurderqt_name_rsc
   vrDesc = dukemurderqt_desc_rsc

   vrCompleted = dukemurderqt_completed_rsc

properties:

   piPlayerRestrict = Q_PLAYER_NOTTRIED_RECENTLY | Q_PLAYER_FACTION_DUKE

messages:

   SendQuestNodeTemplates()
   {
      local lNPCs, oNPC, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #187 is Duke's Murder Mystery quest kickoff, "murder"
      // QNT_ID_DUKE_MURDER_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[ murder_trigger ],#bDuplicate=TRUE,
               #quest_node_index=QNT_ID_DUKE_MURDER_ONE)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&DukeLiege)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_DUKE_MURDER_ONE,
               #new_NPC_list=lNPCs);
      }
      else
      {
         Debug("Error building QN: QNT_ID_DUKE_MURDER_ONE");
      }

      // Template #188 is Duke's Murder Mystery quest, "deliver" the trigger.
      // QNT_ID_DUKE_MURDER_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[ murder_trigger ],#timelimit=6 * 3600,
               #bDuplicate=TRUE,#quest_node_index=QNT_ID_DUKE_MURDER_TWO)
      {
         lNPCs = $;
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&KocatanBartender)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&KocatanBanker)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueApothecary)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueVaultMan)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&CornothInnkeeper)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&JasperBlacksmith)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&JasperBanker)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&MarionInnkeeper)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&MarionBartender)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&TosApothecary)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&TosInnkeeper)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&ThreeCouncilor)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&TwoCouncilor)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&Minstrel)),lNPCs);
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_DUKE_MURDER_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_DUKE_MURDER_TWO,
               #new_hint=murder_duke_assign);
      }
      else
      {
         Debug("Error building QN: QNT_ID_DUKE_MURDER_TWO");
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
