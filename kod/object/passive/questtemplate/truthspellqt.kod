// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
TruthSpellQuest is QuestTemplate
// QST_ID_TRUTH_SPELL = 16
// Quest nodes 25, 26, 27, 28.
// QNT_ID_TRUTHPUPIL_ONE, QNT_ID_TRUTHPUPIL_TWO,
// QNT_ID_TRUTHPUPIL_THREE, QNT_ID_TRUTHPUPIL_FOUR

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include truthspellqt.lkod

   // Quest description.
   truthspellquest_icon_rsc = idisharm.bgf
   truthspellquest_name_rsc = "Jala pupil quest"
   truthspellquest_desc_rsc = \
      "Parrin Aragone will teach you the songs of Jala, but first you "
      "must prove your devotion to the arts. He has sent you to sing a "
      "song, to try out your voice."

   truthspellquest_nodetwo_rsc = \
      "Parrin Aragone will teach you the songs of Jala, but first you "
      "must prove your devotion to the arts. You must sing a song for "
      "%s, which you can do using the \"emote\" command."
   truthspellquest_nodethree_rsc = \
      "Return to Parrin and let him know how your performance went."
   truthspellquest_nodefour_rsc = \
      "Tell Parrin how your performance went."

   truthspellquest_completed = \
      "You have completed Parrin's pupil quest.  Parrin will now "
      "teach you the songs of Jala."

   // Quest resources.
   truthquest_trigger_1 = "pupil"
   truthquest_trigger_2 = "sings"
   truthquest_assign_2 = \
      "Are you truly ready to learn the magic of songs of Jala?  If so "
      "you must prove your devotion to the arts.  I would like you to try "
      "out your voice.  Go to %NPC and ~Ising~I a song.  Any song you wish.  "
      "Then come back to me and let me know how it went."
   truthquest_success_2 = \
      "By my troth, that is awful.  Did Parrin send thee?  "
      "Tell him to train thy voice, %NAME"
   truthquest_failure_2 = \
      "Subject: Your vocal audition\n"
      "If you are too shy to sing a simple song, then I'm afraid you will "
      "never make for a good minstrel.  I'm afraid I cannot teach you the "
      "spells of Jala at this time.\n\n-Parrin Aragone"
   truthquest_failure_3 = \
      "Subject: Your vocal audition\n"
      "Where have you been?  I could not wait any longer for you.  I'm "
      "afraid I have taken on other students.  Perhaps, I will teach you "
      "at a later date.\n\n-Parrin Aragone"
   truthquest_trigger_4 = "bad"
   truthquest_assign_4 = \
      "Ah, you have returned.  What did they think of your song?  Good or bad?"
   truthquest_success_4 = \
      "Oh well, we shall work on that.  Now open your mind to the ways "
      "of Jala;  I shall train your voice, if you are willing."
   truthquest_failure_4 = \
      "Subject: Your vocal audition\n"
      "You will have to be more honest with yourself about your "
      "ability if I am to teach you the ways of Jala."

classvars:

   vrIcon = truthspellquest_icon_rsc
   vrName = truthspellquest_name_rsc
   vrDesc = truthspellquest_desc_rsc

   vrNodeTwo = truthspellquest_nodetwo_rsc
   vrNodeThree = truthspellquest_nodethree_rsc
   vrNodeFour = truthspellquest_nodefour_rsc
   vrCompleted = truthspellquest_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_TRUTH_SPELL

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 20
   piSchedulePct = 100

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_TRUTHPUPIL_ONE, QNT_ID_TRUTHPUPIL_TWO,
                      QNT_ID_TRUTHPUPIL_THREE, QNT_ID_TRUTHPUPIL_FOUR];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_TRUTHPUPIL_TWO, vrNodeTwo],
                          [QNT_ID_TRUTHPUPIL_THREE, vrNodeThree],
                          [QNT_ID_TRUTHPUPIL_FOUR, vrNodeFour] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib, oNPC;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #25 is truth song quest, say truth
      // QNT_ID_TRUTHPUPIL_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[truthquest_trigger_1],
               #quest_node_index=QNT_ID_TRUTHPUPIL_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_TRUTHPUPIL_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                                 #cNPC_class=&Minstrel));
      }
      else
      {
         Debug("Error building QN: QNT_ID_TRUTHPUPIL_ONE");
      }

      // Template #26 is truth song quest,
      // QNT_ID_TRUTHPUPIL_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[truthquest_trigger_2],
               #quest_node_index=QNT_ID_TRUTHPUPIL_TWO)
      {
         lNPCs = $;
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&barloqueVaultman)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueApothecary)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&GuildCreator)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&Barloquetailor)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&CorNothSergeant)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         foreach oNPC in Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueClerk)
         {
            lNPCs = Cons(oNPC, lNPCs);
         }
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_TRUTHPUPIL_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_TRUTHPUPIL_TWO,
               #new_hint=truthquest_assign_2);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_TRUTHPUPIL_TWO,
               #new_hint=truthquest_success_2);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_TRUTHPUPIL_TWO,
               #new_hint=truthquest_failure_2);
         Send(oQE,@SetQuestNodeTimeLimit,#index=QNT_ID_TRUTHPUPIL_TWO,
               #new_limit=2 * 24 * 60 * 60);
      }
      else
      {
         Debug("Error building QN: QNT_ID_TRUTHPUPIL_TWO");
      }

      // Template #27 is truth song quest, go back to parrin
      // QNT_ID_TRUTHPUPIL_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP ,
               #prizelist=[ [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_TRUTH_SPELL_ENDBRANCH ],
                            [ QN_PRIZETYPE_ACTIVATE_QUEST, QST_ID_TRUTH_SPELL_ENDBRANCH ],
                            [ QN_PRIZETYPE_PASS_QUEST_RESTRICT2, Q_R2_IS_PLAYER, 1]//,
                           //[ QN_PRIZETYPE_PASS_NPC ]
                            ],
               #quest_node_index=QNT_ID_TRUTHPUPIL_THREE)
      {
         Send(oQE,@SetQuestNodeNPCModifier,#index=QNT_ID_TRUTHPUPIL_THREE,
               #new_mod=QN_NPCMOD_PREVIOUS);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_TRUTHPUPIL_THREE,
               #new_hint=truthquest_failure_3);
         Send(oQE,@SetQuestNodeTimeLimit,#index=QNT_ID_TRUTHPUPIL_THREE,
               #new_limit=2 * 60 * 60);
      }
      else
      {
         Debug("Error building QN: QNT_ID_TRUTHPUPIL_THREE");
      }

      // Template #28 is truth song quest, say 'bad' to proceed
      // QNT_ID_TRUTHPUPIL_FOUR
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[truthquest_trigger_4],
               #quest_node_index=QNT_ID_TRUTHPUPIL_FOUR)
      {
         //Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_TRUTHPUPIL_FOUR,
         //     #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeNPCModifier,#index=QNT_ID_TRUTHPUPIL_FOUR,
               #new_mod=QN_NPCMOD_SAME);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_TRUTHPUPIL_FOUR,
               #new_hint=truthquest_assign_4);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_TRUTHPUPIL_FOUR,
               #new_hint=truthquest_success_4);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_TRUTHPUPIL_FOUR,
               #new_hint=truthquest_failure_4);
         Send(oQE,@SetQuestNodeTimeLimit,#index=QNT_ID_TRUTHPUPIL_FOUR,
               #new_limit=60 * 1000);
      }
      else
      {
         Debug("Error building QN: QNT_ID_TRUTHPUPIL_FOUR");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oNPC, oMob;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      oNPC = Send(oQuestNode,@GetDestNPC);

      if index = QNT_ID_TRUTHPUPIL_TWO
      {
         AddPacket(4,Send(oNPC,@GetName));
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
