// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
QorDiscQuest is QuestTemplate
// Quest nodes 42, 43, 44.
// QNT_ID_QOR_DISCIPLE_ONE, QNT_ID_QOR_DISCIPLE_TWO, QNT_ID_QOR_DISCIPLE_THREE

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include qordiscqt.lkod

   // Quest description.
   qorquest_icon_rsc = ikarahol.bgf
   qorquest_name_rsc = "Qor disciple quest"
   qorquest_desc_rsc = \
      "Priestess Zuxana has asked you to go to %s and speak "
      "the words: \"In darkness all shall be bound.  Our Mistress would walk "
      "among men in the comfort of a lightless sky and a bloody moon.\".  "
      "Return when you have completed this task."

   qorquest_node_three_rsc = \
      "Return to Priestess Zuxana and let her know the task has been "
      "completed."

   qorquest_completed = \
      "You have completed the Qor disciple quest.  You are a faithful "
      "disciple of Qor, and Priestess Zuxana will now teach you more "
      "powerful spells."

   // Quest resources.
   qordisciple_trigger = "darkness all shall be bound"
   qordisciple_assign = \
      "`rYou wish to be surrounded by the ineffable embrace of our patron "
      "Mistress.  Your judgement is keen but what of your loyalty?  To prove "
      "this to me you must invoke Mistress Qor to %NPC, thus: \"In darkness "
      "all shall be bound.  Our Mistress would walk among men in the comfort "
      "of a lightless sky and a bloody moon.\"  After that, return and tell "
      "me you are done and we shall revel in the beauty of corruption."
   qordisciple_success = \
      "`rYou have fulfilled my wishes. You are not only wise but tenacious.  "
      "Seek me out when you would learn more of Qor's spells of power."
   qordisciple_failure = \
      "Subject: Qor has deemed you unworthy\n"
      "You weak, pathetic soul! It was just as I suspected. I am glad to "
      "have given you nothing of real value or it would surely be lost now.  "
      "If you come back here, perhaps I will allow you another chance to join "
      "the ranks of the elite."

   qordisc_shalpr_resp = \
      "~kPriestess Xiana says, \"~bReconsider your actions, Shal'ille will "
      "grant you forgiveness when you are ready to receive it.~k\""
   qordisc_marheal_resp = \
      "~kLady Aftyn says, \"Shal'ille's compassion will brush aside "
      "the darkness.\""
   qordisc_barsmith_resp = \
      "~kFehr'loi Qan says, \"I'm gettin' mad now.  You better leave before "
      "I give you a good punch.\""
   qordisc_tosapoth_resp = \
      "~kFrisconar says, \"Did you just put a curse on me?  Please, get out!\""
   qordisc_jasinn_resp = \
      "~kThe Widow Qesino says, \"You are evil, you must leave at once.\""

classvars:

   vrIcon = qorquest_icon_rsc
   vrName = qorquest_name_rsc
   vrDesc = qorquest_desc_rsc

   vrNodeTwo = qorquest_desc_rsc
   vrNodeThree = qorquest_node_three_rsc
   vrCompleted = qorquest_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_QOR_DISCIPLE

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 30
   piSchedulePct = 100

   piTimeLimit = 2 * 3600 // 2 hours

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_QOR_DISCIPLE_ONE, QNT_ID_QOR_DISCIPLE_TWO,
                      QNT_ID_QOR_DISCIPLE_THREE];

      // Quest nodes with matching descriptions for the player.
      // No description needed for quest node QNT_ID_QOR_DISCIPLE_ONE.
      plQuestNodeDesc = [ [QNT_ID_QOR_DISCIPLE_TWO, vrNodeTwo],
                          [QNT_ID_QOR_DISCIPLE_THREE, vrNodeThree] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #42 is qor disciple quest kickoff, "favor"
      // QNT_ID_QOR_DISCIPLE_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[disciple_trigger],
               #quest_node_index=QNT_ID_QOR_DISCIPLE_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_QOR_DISCIPLE_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                                 #cNPC_class=&QorPriestess));
      }
      else
      {
         Debug("Error building QN: QNT_ID_QOR_DISCIPLE_ONE");
      }

      // Template #43 is qor disciple quest, deliver message
      // QNT_ID_QOR_DISCIPLE_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[qordisciple_trigger],#timelimit=piTimeLimit,
               #prizelist=[ [ QN_PRIZETYPE_NPC_RESPONSE ] ],
               #quest_node_index=QNT_ID_QOR_DISCIPLE_TWO)
      {
         lNPCs = $;
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&ShalillePriestess)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&MarionHealer)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueBlacksmith)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&TosApothecary)),lNPCs);
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&JasperInnKeeper)),lNPCs);
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_QOR_DISCIPLE_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_QOR_DISCIPLE_TWO,
               #new_hint=qordisciple_assign);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_QOR_DISCIPLE_TWO,
               #new_hint=qordisciple_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_QOR_DISCIPLE_TWO");
      }

      // Template #44 is qor disciple quest, come back
      // QNT_ID_QOR_DISCIPLE_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP,
               #timelimit=piTimeLimit,#quest_node_index=QNT_ID_QOR_DISCIPLE_THREE)
      {
         Send(oQE,@SetQuestNodeNPCModifier,#index=QNT_ID_QOR_DISCIPLE_THREE,
               #new_mod=QN_NPCMOD_PREVIOUS);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_QOR_DISCIPLE_THREE,
               #new_hint=qordisciple_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_QOR_DISCIPLE_THREE,
               #new_hint=qordisciple_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_QOR_DISCIPLE_THREE");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      if oQuestNode = $
         OR index = $
      {
         return;
      }

      // Quest node QNT_ID_QOR_DISCIPLE_TWO dialog needs the NPC name.
      if index = QNT_ID_QOR_DISCIPLE_TWO
      {
         AddPacket(4,Send(Send(oQuestNode,@GetDestNPC),@GetName));
      }

      return;
   }

   SendQuestResponse(recipients=$, index=$, oNPC=$)
   "Send different responses depending on the NPC."
   {
      if index = QNT_ID_QOR_DISCIPLE_TWO
      {
         if IsClass(oNPC,&ShalillePriestess)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                  #type=SAY_MESSAGE,#string=qordisc_shalpr_resp);

            return;
         }

         if IsClass(oNPC,&MarionHealer)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                  #type=SAY_MESSAGE,#string=qordisc_marheal_resp);

            return;
         }

         if IsClass(oNPC,&BarloqueBlacksmith)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                  #type=SAY_MESSAGE,#string=qordisc_barsmith_resp);

            return;
         }

         if IsClass(oNPC,&TosApothecary)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                  #type=SAY_MESSAGE,#string=qordisc_tosapoth_resp);

            return;
         }

         if IsClass(oNPC,&JasperInnKeeper)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                  #type=SAY_MESSAGE,#string=qordisc_jasinn_resp);

            return;
         }
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
