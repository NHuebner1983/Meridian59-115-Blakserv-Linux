// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
PrincessJoinQuest is PrincessQuest
// Quest nodes 3, 4.
// QNT_ID_PRINCESS_JOIN_ONE, QNT_ID_PRINCESS_JOIN_TWO

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include princessjoinqt.lkod

   // Quest description.
   princessjoin_name_rsc = "Princess join faction quest"
   princessjoin_desc_rsc = \
      "Princess Kateriina has asked you to deliver a letter for her, to prove "
      "yourself worthy of her trust."

   princessjoin_deliver_rsc = \
      "Princess Kateriina has requested that you deliver a letter to %s, to "
      "prove yourself worthy of her trust."

   princessjoin_completed = \
      "You have proven your loyalty to the crown, and are now a trusted "
      "servant of Princess Kateriina."

   // Quest resources.
   princess_join2_assign = \
      "So, you wish to prove yourself worthy of my trust?  "
      "Wouldst thou be so kind as to deliver an official letter to %NPC?  "
      "I would be most grateful."

classvars:

   vrName = princessjoin_name_rsc
   vrDesc = princessjoin_desc_rsc

   vrNodeTwo = princessjoin_deliver_rsc

   vrCompleted = princessjoin_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_PRINCESS_JOIN

properties:

   piPlayerRestrict = Q_PLAYER_INTRIGUING | Q_PLAYER_FACTION_NEUTRAL \
                        | Q_PLAYER_NOTTRIED_RECENTLY
   piMaxPlayers = 30
   piSchedulePct = 100

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_PRINCESS_JOIN_ONE, QNT_ID_PRINCESS_JOIN_TWO];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_PRINCESS_JOIN_TWO, vrNodeTwo] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #3 is 1st Princess Join node, say "join" to Princess
      // QNT_ID_PRINCESS_JOIN_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[duke_join1_trigger],
               #quest_node_index=QNT_ID_PRINCESS_JOIN_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_PRINCESS_JOIN_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                     #iJob=MOB_ROLE_ROYALTY,#cNPC_class=&PrincessLiege));
      }
      else
      {
         Debug("Error building QN: QNT_ID_PRINCESS_JOIN_ONE");
      }

      // Template #4 is 2nd princess join node, deliver letter for her
      // QNT_ID_PRINCESS_JOIN_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_ITEM,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &Letter, 1 ] ],
               #prizelist=[ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_PRINCESS ] ],
               #timelimit=piTimeLimit,#quest_node_index=QNT_ID_PRINCESS_JOIN_TWO)
      {
         lNPCs = $;
         // Xiana
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&ShalillePriestess)),lNPCs);
         // Alzahakar
         //lNPCs = Cons( First( Send(oLib,@GetOccupationList,#cNPC_class=&OneCouncilor)),lNPCs);
         // Lady Aftyn
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&MarionHealer)),lNPCs);
         // Herbutte
         lNPCs = Cons(First(Send(oLib,@GetOccupationList,#cNPC_class=&BarloqueMerchant)),lNPCs);
         // Esseldi
         //lNPCs = Cons( First( Send(oLib,@GetOccupationList,#cNPC_class=&FiveCouncilor)),lNPCs);
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_PRINCESS_JOIN_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_PRINCESS_JOIN_TWO,
               #new_hint=princess_join2_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_PRINCESS_JOIN_TWO,
               #new_hint=princess_standard2_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_PRINCESS_JOIN_TWO,
               #new_hint=princess_standard2_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_PRINCESS_JOIN_TWO");
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
