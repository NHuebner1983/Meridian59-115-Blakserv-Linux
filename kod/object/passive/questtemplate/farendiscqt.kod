// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
FarenDiscQuest is QuestTemplate
// Quest nodes 15, 16, 17.
// QNT_ID_FAREN_DISCIPLE_ONE, QNT_ID_FAREN_DISCIPLE_TWO, QNT_ID_FAREN_DISCIPLE_THREE

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:

   include farendiscqt.lkod

   // Quest description.
   farenquest_icon_rsc = lightnin.bgf
   farenquest_name_rsc = "Faren disciple quest"
   farenquest_desc_rsc = \
      "Priestess Tenuv'vyal has asked you to go to %s and speak "
      "the words: \"You have defiled the land with your ways.  The land gives "
      "life, yet you treat it as the enemy to be conquered.  You are fools, "
      "all, if you continue on this sacrilegious path.  Embrace nature, do "
      "not spurn it like a forgotten lover.  Repent your ways.  Follow the "
      "words of Faren.  Live for nature, not in opposition to it.\".  "
      "Return when you have completed this task."

   farenquest_node_three_rsc = \
      "Return to Priestess Tenuv'vyal and let her know the task has been "
      "completed."

   farenquest_completed = \
      "You have completed the Faren disciple quest.  You are a faithful "
      "disciple of Faren, and Priestess Tenuv'vyal will now teach you "
      "more powerful spells."

   // Quest resources.
   farendisciple_trigger = "defiled the land with your ways"
   farendisciple_assign = \
      "`B`gYou wish the blessing of the land through our Lord Faren.  You "
      "must prove that you are worthy of his blessings.  Take this message "
      "to %NPC: \"You have defiled the land with your ways.  The land gives "
      "life, yet you treat it as the enemy to be conquered.  You are fools, "
      "all, if you continue on this sacrilegious path.  Embrace nature, do "
      "not spurn it like a forgotten lover.  Repent your ways.  Follow the "
      "words of Faren.  Live for nature, not in opposition to it.\"  Return "
      "quick to notify me when you are done and perhaps Faren will favor "
      "you with power."
   farendisciple_success = \
      "`B`gThe gaze of Faren is upon you. You have done well.  Seek me when "
      "you would learn more of his ways and his spells. "
   farendisciple_failure = \
      "Subject: Look within and burn, child\n"
      "Faren does not see those without the fire of desire within them. "
      "You must return when you have found this inside yourself, not sooner."

   farendisc_marbar_resp = "~kTova sighs, \"Here we go again.\""
   farendisc_jasbar_bad_resp = \
      "~kPietro says, \"Oh, for the love of Shal'ille, go someplace "
      "else, %s! I'm sick of you fanatics.\""
   farendisc_jasbar_resp = \
      "~kPietro yells, \"Would somebody get that tree-hugger out of here.\""
   farendisc_barlbar_resp = \
      "~kMeidei says, \"I'll consider that, now buy a drink or leave!\""

classvars:

   vrIcon = farenquest_icon_rsc
   vrName = farenquest_name_rsc
   vrDesc = farenquest_desc_rsc

   vrNodeTwo = farenquest_desc_rsc
   vrNodeThree = farenquest_node_three_rsc
   vrCompleted = farenquest_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_FAREN_DISCIPLE

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_NOTSUCCEEDED | Q_PLAYER_NOTFAILED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 30
   piSchedulePct = 100
   piTimeLimit = 3 * 3600 // 3 hours.

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_FAREN_DISCIPLE_ONE, QNT_ID_FAREN_DISCIPLE_TWO,
                      QNT_ID_FAREN_DISCIPLE_THREE];

      // Quest nodes with matching descriptions for the player.
      // No description needed for quest node QNT_ID_FAREN_DISCIPLE_ONE.
      plQuestNodeDesc = [ [QNT_ID_FAREN_DISCIPLE_TWO, vrNodeTwo],
                          [QNT_ID_FAREN_DISCIPLE_THREE,vrNodeThree] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #15 is faren disciple quest kickoff, "favor".
      // QNT_ID_FAREN_DISCIPLE_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[disciple_trigger],
               #quest_node_index=QNT_ID_FAREN_DISCIPLE_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_FAREN_DISCIPLE_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                                    #cNPC_class=&FarenPriestess));
      }
      else
      {
         Debug("Error building QN: QNT_ID_FAREN_DISCIPLE_ONE");
      }

      // Template #16 is faren disciple quest, deliver message.
      // QNT_ID_FAREN_DISCIPLE_TWO
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[farendisciple_trigger],#timelimit=piTimeLimit,
               #prizelist=[ [ QN_PRIZETYPE_NPC_RESPONSE ] ],
               #quest_node_index=QNT_ID_FAREN_DISCIPLE_TWO)
      {
         lNPCs = Send(oLib,@GetOccupationList,#iJob=MOB_ROLE_BARTENDER,
                        #onIsland=FALSE);
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_FAREN_DISCIPLE_TWO,
               #new_NPC_list=lNPCs);
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_FAREN_DISCIPLE_TWO,
               #new_hint=farendisciple_assign);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_FAREN_DISCIPLE_TWO,
               #new_hint=farendisciple_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_FAREN_DISCIPLE_TWO");
      }

      // Template #17 is faren disciple quest, come back.
      // QNT_ID_FAREN_DISCIPLE_THREE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_SHOWUP,
               #timelimit=piTimeLimit,
               #quest_node_index=QNT_ID_FAREN_DISCIPLE_THREE)
      {
         Send(oQE,@SetQuestNodeNPCModifier,#index=QNT_ID_FAREN_DISCIPLE_THREE,
               #new_mod=QN_NPCMOD_PREVIOUS);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_FAREN_DISCIPLE_THREE,
               #new_hint=farendisciple_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_FAREN_DISCIPLE_THREE,
               #new_hint=farendisciple_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_FAREN_DISCIPLE_THREE");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      if oQuestNode = $
         OR index = $
      {
         return;
      }

      // Quest node QNT_ID_FAREN_DISCIPLE_TWO dialog needs the NPC name.
      if index = QNT_ID_FAREN_DISCIPLE_TWO
      {
         AddPacket(4,Send(Send(oQuestNode,@GetDestNPC),@GetName));
      }

      return;
   }

   SendQuestResponse(recipients=$, index=$, oNPC=$)
   "Send different responses depending on the NPC."
   {
      local iMood, oQuester;

      iMood = Send(oNPC,@GetMoodFlags);
      oQuester = First(recipients);

      if index = QNT_ID_FAREN_DISCIPLE_TWO
      {
         if IsClass(oNPC,&MarionBartender)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,#type=SAY_MESSAGE,
                  #string=farendisc_marbar_resp);

            return;
         }

         if IsClass(oNPC,&JasperBartender)
         {
            if iMood = LIBRES_MOOD_BAD
            {
               Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                     #type=SAY_MESSAGE,#string=farendisc_jasbar_bad_resp,
                     #parm1=Send(oQuester,@GetName));
            }
            else
            {
               Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,
                     #type=SAY_MESSAGE,#string=farendisc_jasbar_resp);
            }

            return;
         }

         if IsClass(oNPC,&BarloqueBartender)
         {
            Post(Send(oNPC,@GetOwner),@SomeoneSaid,#what=oNPC,#type=SAY_MESSAGE,
                  #string=farendisc_barlbar_resp);

            return;
         }
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
