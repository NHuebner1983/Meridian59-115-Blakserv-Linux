// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
WeapAttCursed is WeaponAttribute

///////////////////////////////////////////////////////////////////////
//
/// One of the more complicated weapon spells.
/// This weapon cannot be dropped.
/// This weapon is automatically wielded when picked up
/// This weapon has a -(2*power) to hit and damage
//
//  Power is determined using standard WeapAtt Power table.
//
//  Form is:
//
//       [ WA_CURSED ]
//
///////////////////////////////////////////////////////////////////////

constants:

   include blakston.khd

resources:

   include wacursed.lkod

   weapattcursed_desc = " It glows with a pale red aura."
   cursedweapon_fail_unuse= "%s%s seems to cling to your hand!"
   weapattcursed_name = "cursed %s"

   wacursed_gone = "Your %s loses its ominous luster."
   cursed_dm = "cursed"

classvars:

   viItem_Att_Num = WA_CURSED
   vrDesc = weapattcursed_desc
   vrName = weapattcursed_name

   vrDM_Trigger = cursed_dm

   // Has to be false to disallow cursing a weapon then adding a non-cursed
   // attribute via blood inheritance.
   vbAllowSpecialAttributes = FALSE

properties:

   piValue_modifier = 100   /// modify the object's price by 100//
   piValue_power_modifier = -10

messages:

////////////////////////////////////////////////
///
///  Initialization Functions
///
////////////////////////////////////////////////

   InitialPower(oItem=$)
   {
      if oItem = $
      {
         Debug("This shouldn't have happened!");

         return;
      }

      return Send(self,@InitialWeaponPower,#oItem=oItem);
   }

////////////////////////////////////////////////
///
///  Effect Functions
///
////////////////////////////////////////////////

   ModifyDamage(damage=0,target=$,wielder=$,lData=$)
   "Wielder gets a -2*bonus to hitroll."
   {
      local iPower;

      iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
      iPower = Send(self,@DecipherDamageFromPower,#iPower=iPower);

      return (damage - (2 * iPower));
   }

   ModifyHitRoll(hitroll=0,target=$,wielder=$,lData=$)
   "Wielder gets a -2*bonus to damage."
   {
      local iPower;

      iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
      iPower = Send(self,@DecipherHitrollFromPower,#iPower=iPower);

      return (hitroll - (2 * iPower));
   }

   ItemReqUnuse(oItem=$)
   "You may not unuse this weapon once you've used it."
   {
      Send(Send(oItem,@GetOwner),@MsgSendUser,#message_rsc=cursedweapon_fail_unuse,
            #parm1=Send(oItem,@GetCapDef),#parm2=Send(oItem,@GetName));

      return FALSE;
   }

   ItemReqLeaveOwner(oItem=$)
   "You may not drop this weapon once you've used it."
   {
      local i, oOwner;

      oOwner = Send(oItem,@GetOwner);
      if IsClass(oOwner,&User)
      {
         foreach i in Send(oOwner,@GetPlayerUsing)
         {
            if i = oItem
            {
               Send(Send(oItem,@GetOwner),@MsgSendUser,#message_rsc=cursedweapon_fail_unuse,
                     #parm1=Send(oItem,@GetCapDef),#parm2=Send(oItem,@GetName));

               return FALSE;
            }
         }
      }

      return TRUE;
   }

   ItemIsCursed()
   {
      return TRUE;
   }

   AddToTreasureTable()
   {
      /// 10// chance at every level of getting a cursed weapon
      local i;

      i = 1;
      while i < 11
      {
         Send(SYS,@AddToItemAttTreasureTable,#diff=i,#percent=10,
               #iItemAtt=viItem_Att_Num);
         ++i;
      }

      return;
   }

////////////////////////////////////////////////////////
///
///  Timer Functions
///  Cursed weapons are somewhat of a special case
///    in that they don't always have timers.  A
///    cursed weapon that appears in the wild is 
///    forever, but a cursed weapon that is the result
///    of a spell is temporary.
///
////////////////////////////////////////////////////////


   HasTimer(lData=$)
   {
      if Length(lData) > 1
      {
         return TRUE;
      }

      return FALSE;
   }

   TimerExpired(oItem=$,lData=$)
   {
      SetNth(lData,2,$);   /// timer is gone, now remove reference
      Send(self,@RemoveFromItem,#oItem=oItem, #lData = lData);

      return;
   }

   RemoveFromItem(oItem=$)
   {
      local oPlayer;

      oPlayer = Send(oItem,@GetOwner);
      if oPlayer <> $
         AND IsClass(oPlayer,&User)
      {
         Send(oPlayer,@MsgSendUser,#message_rsc = wacursed_gone,
               #parm1=Send(oItem,@GetName));
         
         Post(oPlayer,@DrawOffense);
      }

      propagate;
   }

   GetNamePriority()
   {
      return 11;
   }

   IsMagicalEffect()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
