// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
WeapAttGuildHallDefender is WeaponAttribute

///////////////////////////////////////////////////////////////////////
//
//   This Weapon Attribute offers a +2 damage bonus if you attack with it
//   in your guild hall, and it is also the guild hall of the weapon.
//   The weapon's guild hall is shown in the description of the weapon.
//
//   Form is:
//
//      [ WA_GUILD_HALL_DEFENDER, $, RID_GUILDHALL ]
//
//       rid_guildhall:: the room id of the guild hall that 'owns' the weapon,
//               as found in blakston.khd.  Example, RID_GUILDH4 = Wryn's Keep
//
///////////////////////////////////////////////////////////////////////

constants:

   include blakston.khd

resources:

   include waghall.lkod

   weapattguildhalldesc = \
      "  The crest of %s is inscribed on the hilt of the weapon, suggesting "
      "%s bonus in the defense of that hall."
   weapattdefender_name = "%s of the defender"

   defender_dm = "guild hall defender"

classvars:

   viItem_Att_Num = WA_GUILD_HALL_DEFENDER
   viDamage_bonus = 2

   viDifficulty = 8
   vrName = weapattdefender_name
   vrDM_trigger = defender_dm
   vbAppears_in_Happyland = FALSE

properties:

   piValue_modifier = 200   /// modify the object's price by 100//
   piValue_power_modifier = 5

messages:

////////////////////////////////////////////////
///
///  Treasure Gen Functions
///
////////////////////////////////////////////////

   AddSelfToRandomItem(oItem=$,who=$)
   {
      local iHall, oGuild, oHall;

      if oItem = $ OR who = $
      {
         Debug("BAD BAD BAD");

         return FALSE;
      }

      /// Most of the time, the player will get a weapon that is tied
      /// to the guild hall he owns.  If he doesn't own a hall, then
      /// it will choose a hall at random.

      iHall = 0;
      if Random(1,100) > 50
      {
         /// see if the player belongs to a guild.
         oGuild = Send(who,@GetGuild);

         /// see if that guild has a hall already
         if oGuild <> $
         {
            iHall = Send(oGuild,@GetGuildHallNum);
         }
      }

      if iHall = $
         OR (iHall < RID_GUILDH_MIN OR iHall > RID_GUILDH_MAX)
      {
         /// choose a random guild hall

         iHall = Random(RID_GUILDH_MIN,RID_GUILDH_MAX);
      }

      /// Okay, it's crazy, but someone could screw up and leave space
      /// in the RIDlist.  So for as long as oHall = $, get a new iHall.
      oHall = Send(SYS,@FindRoomByNum,#num=iHall);
      while oHall = $
      {
         iHall = Random(RID_GUILDH_MIN,RID_GUILDH_MAX);
         oHall = Send(SYS,@FindRoomByNum,#num=iHall);
      }

      if Send(self,@ReqAddToItem,#state1=iHall,#oItem=oItem)
      {
         Send(self,@AddToItem,#oItem=oItem,#state1=iHall);

         return TRUE;
      }

      return FALSE;
   }

   ReqAddToItem(state1=$)
   {
      if state1 < RID_GUILDH_MIN OR state1 > RID_GUILDH_MAX
      {
         Debug("Illegal guild hall chosen.  No attribute added.");

         return FALSE; 
      }

      propagate;
   }

////////////////////////////////////////////////
///
///  Effect Functions
///
////////////////////////////////////////////////

   ModifyDamage(damage=0,target=$,wielder=$,lData=$)
   "If wielder is in his own guild hall, which is also the chosen guild hall "
   "of the weapon, then wielder gets +power bonus."
   {
      local oGuild, oRoom, iPower;

      if lData = $
      {
         Debug("This should definitely not happen! Weapon needs guild hall defined!");

         return;
      }

      if target = $
         OR wielder = $
      {
         return damage;
      }

      oGuild = Send(wielder,@GetGuild);
      oRoom = Send(SYS,@FindRoomByNum,#num=Nth(lData,3));

      // Does this person's guild own the guild hall?
      if oGuild <> $
         AND Send(oRoom,@GetGuildOwner) = oGuild
      {
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
         iPower = Send(self,@DecipherDamageFromPower,#iPower=iPower);

         // Only give half bonus if we're not actively defending a guild hall.
         if Send(wielder,@GetOwner) <> oRoom
         {
            iPower = iPower/2;
         }

         return (damage + iPower);
      }

      return damage;
   }

   ModifyHitRoll(hitroll=0,target=$,wielder=$,lData= $)
   "If wielder is in his own guild hall, which is also the chosen guild hall "
   "of the weapon, then wielder gets +power bonus."
   {
      local oGuild, oRoom, iPower;

      if lData = $
      {
         Debug("This should definitely not happen! Weapon needs guild hall defined!");

         return;
      }

      if target = $
         OR wielder = $
      {
         return hitroll;
      }

      oGuild = Send(wielder,@GetGuild);
      oRoom = Send(SYS,@FindRoomByNum,#num=Nth(lData,3));

      // Does this person's guild own the guild hall?
      if oGuild <> $
         AND Send(oRoom,@GetGuildOwner) = oGuild
      {
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
         iPower = Send(self,@DecipherHitRollFromPower,#iPower=iPower);

         // Only give half bonus if we're not actively defending a guild hall.
         if Send(wielder,@GetOwner) <> oRoom
         {
            iPower = iPower/2;
         }

         return (hitroll + iPower);
      }

      return hitroll;
   }

////////////////////////////////////////////////
///
///  Initialization Functions
///
////////////////////////////////////////////////

   InitialPower(oItem=$)
   {
      if oItem = $
      {
         Debug("This shouldn't have happened!");

         return;
      }

      return Send(self,@InitialWeaponPower,#oItem=oItem);
   }

   SetPrimaryState(state1=$)
   "State1 contains the attack spell type being added to the weapon."
   {
      if state1 = $
      {
         Debug("SetPrimaryState called with nil state!");

         return FALSE;
      }

      return state1;
   }

////////////////////////////////////////////////
///
///  Description Functions
///
////////////////////////////////////////////////

   AppendDesc(oItem=$,lData=$,iFakeData=0,iFakePower=0)
   {
      local iData, oRoom, iPower;

      iData = 0;
      if lData = $
      {
         if iFakeData = 0
         {
            Debug("Got no data at all!  Bad.");

            return;
         }

         iData = iFakeData;
         iPower = iFakePower;
      }
      else
      {
         if iFakeData <> 0
         {
            Debug("Got both real data and fake data!  Shouldn't!");

            return;
         }

         iData = Nth(lData,3);
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
      }

      oRoom = Send(SYS,@FindRoomByNum,#num=iData);
      AddPacket(4,weapattguildhalldesc, 4,Send(oRoom,@GetName),
                4,Send(self,@GetPowerDesc,#iPower=iPower));

      return;
   }

////////////////////////////////////////////////////////
///
///  Artifice Spell Functions (also see desc functions)
///
////////////////////////////////////////////////////////

   FakeAttData()
   {
      local iRoom_num;

      iRoom_num = $;
      while iRoom_num = $
      {
         iRoom_num = Random(RID_GUILDH_MIN,RID_GUILDH_MAX);
         if Send(SYS,@FindRoomByNum,#num=iRoom_num) = $
         {
            iRoom_num = $;
         }
      }

      return iRoom_num;
   }

   IsMagicalEffect()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
