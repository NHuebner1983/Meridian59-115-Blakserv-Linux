// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
WeapAttFactionDefender is WeaponAttribute

///////////////////////////////////////////////////////////////////////
//
//   This Weapon Attribute offers a +POWER bonus if you are allied with 
//   whoever is allied with the weapon, and are fighting any other faction.
//   It offers no bonus to the unfactioned, or if you attack the unfactioned.
//
//  Form is:
//
//      [ WA_FACTION, $, faction_number ]
//
//       faction_number:: the faction that the weapon identifies, as found in
//       blakston.khd.  Examples: FACTION_DUKE, FACTION_PRINCESS,
//       and FACTION_NEUTRAL for those who are unaligned.
//
///////////////////////////////////////////////////////////////////////

constants:

   include blakston.khd

resources:

   include wafactn.lkod

   weapatt_faction_princess = \
      " The princess' sigil is embossed on the weapon, promising %s "
      "advantage in the defense of her honor."
   weapatt_faction_duke = \
      " The duke's family crest is embossed on the weapon, offering %s "
      "advantage in his quest for the throne."
   weapatt_faction_rebel = \
      " The rebel army flag is embossed on the weapon, giving %s "
      "advantage for the rebellion."
   weapatt_faction_necro = \
      " The dark symbol of the necromancers is embossed on this weapon, "
      "giving %s advantage for the undead army."

   weapatt_faction_duke_name = "%s of the duke"
   weapatt_faction_princess_name = "the princess' %s"
   weapatt_faction_rebel_name = "the rebel %s"
   weapatt_faction_necro_name = "the necromancer %s"

   iafaction_duke_dm = "duke"
   iafaction_princess_dm = "princess"
   iafaction_rebel_dm = "rebel"
   iafaction_necro_dm = "necromancer"

classvars:

   viItem_Att_Num = WA_FACTION

   viDifficulty = 8
   vrDM_trigger = iafaction_duke_dm

   vbAppears_in_Happyland = FALSE

properties:

   piValue_modifier = 150   /// modify the object's price by 150%
   piValue_power_modifier = 10

messages:

////////////////////////////////////////////////
///
///  Treasure Functions
///
////////////////////////////////////////////////

   DMCreateItemAtt(who=$,string=$,oWeapon=$)
   {
      if who = $ OR string = $ OR oWeapon = $
      {
         Debug("BAD data sent to DMCreateItemAtt!");

         return FALSE;
      }

      if StringContain(string,iafaction_duke_dm)
      {
         return Send(self,@AddSelfToRandomItem,#oItem=oWeapon,
               #who=who,#iFact=FACTION_DUKE);
      }

      if StringContain(string,iafaction_princess_dm)
      {
         return Send(self,@AddSelfToRandomItem,#oItem=oWeapon,
               #who=who,#iFact=FACTION_PRINCESS);
      }

      if StringContain(string,iafaction_rebel_dm)
      {
         return Send(self,@AddSelfToRandomItem,#oItem=oWeapon,
               #who=who,#iFact=FACTION_REBEL);
      }

      if StringContain(string,iafaction_necro_dm)
      {
         return Send(self,@AddSelfToRandomItem,#oItem=oWeapon,
               #who=who,#iFact=FACTION_NECROMANCER);
      }

      return FALSE;
   }

   AddSelfToRandomItem(oItem=$,who=$,iFact=FACTION_NEUTRAL)
   {
      if oItem = $ OR who = $
      {
         Debug("BAD BAD BAD");

         return FALSE;
      }

      // Okay, this function has to choose a faction.  Preferably, it
      //  will choose a faction that the player is already allied with.

      if iFact = FACTION_NEUTRAL
      {
         if Random(1,100) < 70
         {
            // Choose the faction that the player is allied with
            iFact = Send(who,@GetFaction);
         }

         if iFact = FACTION_NEUTRAL
         {
            // Choose a random faction, because either the weapatt 
            //  failed the random check, or the player isn't allied with either.

            iFact = Random(FACTION_NEUTRAL + 1, FACTION_NORMAL_MAX);
         }
      }

      if Send(self,@ReqAddToItem,#state1=iFact,#oItem=oItem)
      {
         Send(self,@AddToItem,#oItem=oItem,#state1=iFact);

         return TRUE;
      }

      return FALSE;
   }

////////////////////////////////////////////////
///
///  Initialization Functions
///
////////////////////////////////////////////////

   ReqAddToItem(state1=$)
   {
      // Use FACTION_MAX rather than FACTION_NORMAL_MAX here, since we can
      // manually add faction attributes not normally available in-game.
      if state1 <= FACTION_NEUTRAL
         OR state1 > FACTION_MAX
      {
         Debug("Illegal faction chosen.  No attribute added.");

         return FALSE;
      }

      propagate;
   }

   SetPrimaryState(state1=$)
   "State1 contains the attack spell type being added to the weapon."
   {
      if state1 = $
      {
         Debug("SetPrimaryState called with nil state!");

         return FALSE;
      }

      return state1;
   }

   InitialPower(oItem=$)
   {
      if oItem = $
      {
         Debug("This shouldn't have happened!");

         return;
      }

      return Send(self,@InitialWeaponPower,#oItem=oItem);
   }

////////////////////////////////////////////////
///
///  Effect Functions
///
////////////////////////////////////////////////

   ModifyDamage(damage=0,target=$,wielder=$,lData=$)
   "If wielder is in the faction that matches the state of the weapon, "
   "and opponent is in a different faction (but not unfactioned), then "
   "do the damage bonus."
   {
      local iTargetFaction, iWielderFaction, iWeaponFaction, iPower;

      if lData = $
      {
         Debug("This should definitely not happen! Weapon needs faction defined!");

         return damage;
      }

      if target = $
         OR wielder = $
      {
         return damage;
      }

      iTargetFaction = Send(target,@GetFaction);
      iWielderFaction = Send(wielder,@GetFaction);
      iWeaponFaction = Nth(lData,3);

      if iWeaponFaction = iWielderFaction
         AND iWielderFaction <> iTargetFaction
      {
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
         iPower = Send(self,@DecipherDamageFromPower,#iPower=iPower);

         // Only half bonuses against unfactioned targets.
         if iTargetfaction = FACTION_NEUTRAL
         {
            iPower = iPower / 2;
         }

         return (damage + iPower); 
      }

      return damage;
   }

   ModifyHitRoll(hitroll=0,target=$,wielder=$,lData=$)
   "If wielder is in the faction that matches the state of the weapon, "
   "and opponent is in a different faction (but not unfactioned), then "
   "do the damage bonus."
   {
      local iTargetFaction, iWielderFaction, iWeaponFaction, iPower;

      if lData = $
      {
         Debug("This should definitely not happen! Weapon needs faction defined!");

         return hitroll;
      }

      if target = $
         OR wielder = $
      {
         return hitroll;
      }

      iTargetFaction = Send(target,@GetFaction);
      iWielderFaction = Send(wielder,@GetFaction);
      iWeaponFaction = Nth(lData,3);

      if iWeaponFaction = iWielderFaction
         AND iWielderfaction <> iTargetFaction
      {
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
         iPower = Send(self,@DecipherHitRollFromPower,#iPower=iPower);

         // Only half bonuses against unfactioned targets.
         if iTargetFaction = FACTION_NEUTRAL
         {
            iPower = iPower / 2;
         }

         return (hitroll + iPower); 
      }

      return hitroll;
   }

////////////////////////////////////////////////
///
///  Description Functions
///
////////////////////////////////////////////////

   AppendDesc(oItem=$,lData=$,iFakeData=0,iFakePower=0)
   {
      local iData, iPower, rPowerDesc;

      iData = 0;
      if lData = $
      {
         if iFakeData = 0
         {
            Debug("Got no data at all!  Bad.");

            return;
         }

         iData = iFakeData;
         iPower = iFakePower;
      }
      else
      {
         if iFakeData <> 0
         {
            Debug("Got both real data and fake data!  Shouldn't!");

            return;
         }

         iData = Nth(lData,3);
         iPower = Send(self,@TranslatePowerFromCompound,#iCompound=First(lData));
      }

      rPowerDesc = Send(self,@GetPowerDesc,#iPower=iPower);

      if iData = FACTION_DUKE
      {
         AddPacket(4,weapatt_faction_duke,4,rPowerDesc);
      }
      else if iData = FACTION_PRINCESS
      {
         AddPacket(4,weapatt_faction_princess,4,rPowerDesc);
      }
      else if iData = FACTION_REBEL
      {
         AddPacket(4,weapatt_faction_rebel,4,rPowerDesc);
      }
      else
      {
         // iData = FACTION_NECROMANCER
         AddPacket(4,weapatt_faction_necro,4,rPowerDesc);
      }

      return;
   }

////////////////////////////////////////////////
///
///  Artifice Spell Functions
///
////////////////////////////////////////////////

   FakeAttData()
   {
      return Random(FACTION_DUKE,FACTION_NORMAL_MAX);
   }

/////////////////////////////////////////////////
///
///  Name Functions
///
/////////////////////////////////////////////////

   ItemBuildDescName(oItem=$,iFakeData=$)
   {
      local lData, iData;

      if iFakeData = $
      {
         lData = Send(oItem,@GetAttributeData,#ItemAtt=viItem_Att_num);
         iData = Nth(lData,3);
      }
      else
      {
         iData = iFakeData;
      }

      if iData = FACTION_DUKE
      {
         AddPacket(4,weapatt_faction_duke_name);
      }
      else if iData = FACTION_PRINCESS
      {
         AddPacket(4,weapatt_faction_princess_name);
      }
      else if iData = FACTION_REBEL
      {
         AddPacket(4,weapatt_faction_rebel_name);
      }
      else
      {
         // iData = FACTION_NECROMANCER
         AddPacket(4,weapatt_faction_necro_name);
      }

      AddPacket(4,Send(oItem,@GetName));

      return;
   }

   IsMagicalEffect()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
