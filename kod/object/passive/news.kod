// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
News is PassiveObject

constants:

   include blakston.khd

resources:

   include news.lkod

   news_name_rsc = "Newscroll"
   news_icon_rsc = news.bgf
   news_desc_rsc = "You are looking at a public posting device."

   news_users_cant_delete = \
      "Only DMs, Admins and Moderators may delete posts from this newsglobe."
   news_not_own_post = \
      "You can only delete your own posts."
   news_del_time_expired_header = \
      "You may only delete your post within %r%r%r%r%r%r%r of posting."

classvars:

   vrIcon = news_icon_rsc

   // The number of minutes a user has to delete their post after posting it.
   viPostDeleteMinutes = 60

properties:

   vrName = news_name_rsc
   vrDesc = news_desc_rsc

   piNews			// newsgroup id (nid) 

   plMessages = $               // don't change structure of this without
                                // changing user.kod!!!

   // plMessages is a list of lists.
   //
   // Each element list is a posted message.
   //
   // The format of each posted message is:
   //
   //   [ INT message number,
   //     OBJECT that posted the message,
   //     INT post time,
   //     STRING title of message,
   //     STRING message text
   //   ]

   piNext_num = 1

   piMax_messages = 75          // the # of posts we keep

messages:

   Constructor(nid = $,name = $,desc = $)
   {
      if nid = $
      {
         debug("Newsgroup created with no nid");
         
         propagate;
      }
      
      if name <> $
      {
         vrName = name;
      }
      
      if desc <> $
      {
         vrDesc = desc;
      }

      piNews = nid;

      Send(SYS,@SystemNewNews,#what = self);

      propagate;      
   }

   Delete()
   "Don't do anything on delete--stay in system's list of newsgroups, so if "
   "a room is deleted and wants to recreate us, it can find us in system.\n\n"
   "Note: this means that deleting newsgroups is currently impossible."
   {
      propagate;
   }

   TryLook(what = $)
   {
      Send(what,@SendLookNews,#what=self);
      
      return;
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   GetNewsNum()
   {
      return piNews;
   }

   GetNewsPermission(what = $)
   {
      return NEWS_PERMISSION_READ_WRITE;			// read-write by everybody
   }

   PostNews(what = $,title = $,body = $)
   {
      local iMessage_num;

      if NOT (send(self,@GetNewsPermission,#what=what) & NEWS_PERMISSION_WRITE)
      {
         debug("ALERT!  Player ",send(what,@GetTrueName),what," tried to write to a newsglobe without permission.");
         
         return;
      }

      Send(self,@ClearSpaceToPost);

      iMessage_num = piNext_num;
      piNext_num = piNext_num + 1;

      title = send(SYS,@CleanseString,#string=title);
      body = send(SYS,@CleanseString,#string=body);

      plMessages = Cons([iMessage_num,what,GetTime(),title,body],plMessages);

      return;
   }

   RemovePost(who=$, index=$)
   "Removes a post from a newsglobe, triggered by 'who'. Addresses the post "
   "by index."
   {
      local lArticle, oNews;

      if (index = $)
      {
         Debug("RemovePost passed $ index! Not moving post.");

         return FALSE;
      }

      oNews = Send(SYS,@FindNewsByNum,#num=NID_GODROOM);
      if (oNews = $)
      {
         Debug("RemovePost couldn't find GodGlobe! Not moving post.");

         return FALSE;
      }

      // Get the article we want to move.
      lArticle = Send(self,@GetArticle,#index=index);

      if (lArticle = $)
      {
         Debug("RemovePost unable to find article with index ",index,
               " not moving post.");

         return FALSE;
      }

      if (who <> $
         AND NOT IsClass(who,&DM))
      {
         if (NOT Send(SETTINGS_OBJECT,@CanUsersRemoveOwnPosts))
         {
            Send(who,@MsgSendUser,#message_rsc=news_users_cant_delete);

            return FALSE;
         }

         if (Nth(lArticle,2) <> who)
         {
            Send(who,@MsgSendUser,#message_rsc=news_not_own_post);

            return FALSE;
         }

         if (GetTime() - Nth(lArticle,3) > viPostDeleteMinutes * 60)
         {
            // Resource to be sent to user is a time string which may change,
            // so we use a callback to add a BP_MESSAGE protocol and build
            // the packet from PostDeleteTimeExpired().
            Send(who,@MsgSendUserCallback,#what=self,
                  #sCallBack=SetString($,@PostDeleteTimeExpired));

            return FALSE;
         }
      }

      // Article is [index, player obj_id, time, title, body]
      // index and time are not preserved when copying. If deleting
      // from god globe, don't try to move the post.
      if (oNews <> self)
      {
         Send(oNews,@PostNews,#what=Nth(lArticle,2),#title=Nth(lArticle,4),
               #body=Nth(lArticle,5));
      }

      Send(self,@DeleteMail,#number=index);

      return TRUE;
   }

   PostDeleteTimeExpired()
   "Called from user.kod's MsgSendUserCallback. Adds the required packets "
   "for a time string depending on how long users have to delete their own "
   "posts. Has to return TRUE so MsgSendUserCallback knows the packet was "
   "built. Don't call this directly."
   {
      Send(self,@SendTimeRemaining,#iTime=viPostDeleteMinutes * 60);

      return TRUE;
   }

   SendTimeRemainingHeader()
   "Adds the header resource for sending a time-related collection of "
   "resources to a client. Only SendTimeRemaining() should call this."
   {
      AddPacket(4, news_del_time_expired_header);

      return;
   }

   GetNumArticles()
   {
      return Length(plMessages);
   }

   GetArticleList()
   {
      return plMessages;
   }

   GetArticle(index=$)
   "Returns an article by post index."
   {
      return GetListNode(plMessages, 1, index);
   }

   GetNewsBody(num = $)
   {
      local i;

      foreach i in plMessages
      {
         if First(i) = num
         {
            return Nth(i,5);
         }
      }
      
      return $;
   }

   ClearSpaceToPost()
   {
      local lOld;

      // if we have too many news messages, delete oldest ones
      // to allow one message to be posted

      if Length(plMessages) < piMax_messages
      {
         return;
      }

      // unless piMax_messages has been modified, there is only
      // one node to delete.  So, be safe.

      lOld = Nth(plMessages,piMax_messages);
      while lOld <> $
      {
         plMessages = DelListElem(plMessages,lOld);
         if Length(plMessages) < piMax_messages
         {
            break;
         }

         lOld = Nth(plMessages,piMax_messages);
      }      

      return;
   }

   GetNextNum()
   "Admin supported\n"
   "Prints out the next news num to help tracking down mail to delete"
   {
      return piNext_num;
   }

   GetString(number = $)
   "Admin supported\n"
   "Prints out string of a message number."
   {
      local i;
      
      foreach i in plMessages
      {
         if First(i) = number
         {
            return Nth(i,5);
         }
      }

      return $;
   }

   DeleteMail(number = $)
   "Admin supported.\n"
   "Deletes a mail message by mail number."
   {
      local i;

      foreach i in plMessages
      {
         if First(i) = number
         {
            plMessages = DelListElem(plMessages,i);
            
            return TRUE;
         }
      }

      return FALSE;
   }

   DeletePost(number = $)
   "Admin supported.\n"
   "Deletes a mail message by mail number."
   {
      return send(self,@DeleteMail,#number=number);
   }

   SearchForPosts(name = $, poster = $, contains = $)
   "Admin supported.\n"
   "Finds all posts made that fit the name, the poster, or a string it contains."
   {
      local list, i;

      if (poster = $) AND (name <> $)
      {
         poster = send(SYS,@FindUserByString,#string=name);
      }

      if (poster = $) AND (contains = $)
      {
         return $;
      }

      list = $;
      foreach i in plMessages
      {
         if (poster <> $) AND (Nth(i, 2) = poster)
         {
            list = cons(Nth(i, 1), list);
            
            continue;
         }

         if (contains <> $) AND stringContain(Nth(i, 4), contains)
         {
            list = cons(Nth(i, 1), list);
            
            continue;
         }

         if (contains <> $) AND stringContain(Nth(i, 5), contains)
         {
            list = cons(Nth(i, 1), list);
            
            continue;
         }
      }

      if length(list) = 1
      {
         return Nth(list, 1);
      }

      return list;
   }

   DeleteAllMessages()
   {
      plMessages = $;
      piNext_num = 1;

      return;
   }

   // Give globes a soft glow.
   SendLightingInformation()
   {
      AddPacket(2,LIGHT_FLAG_ON);
      // Intensity (out of 255)
      AddPacket(1,5);
      // Color
      AddPacket(2,LIGHT_NEWSGLOBE);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
