// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
NecromancerGuild is Guild 

constants:

   include blakston.khd
   include protocol.khd

   CANNOT_REJOIN_TIME = 30   // 30 6-minute intervals = 3 hours

   MAX_MEMBERS = 400         // Maximum number of people allowed in a guild.

   THREE_PERSON_LIMIT = 240

   MINIMUM_MEMBERS = 3

   RENT_BASE = 5
   RENT_SECRET = 10

   RENT_PER_MEMBER = 1
   RENT_PER_ALLY = -2
   RENT_PER_ENEMY = 5

   RENT_MAX_OVERDUE = 480   // This is in 6 minute periods.

resources:

   include necguild.lkod

   necguild_name_rsc = "Order of Necromancers"
   necguild_icon_rsc = idarknes.bgf
   necguild_desc_rsc = \
      "An ancient order of evil mages who labor to bring darkness "
      "into the world."

   necguild_master = "Supreme Necromancer"
   necguild_mistress = "Supreme Necromancer"
   necguild_lieutenant_Male = "Deathmage"
   necguild_lieutenant_female = "Deathmage"
   necguild_lord = "Warlock"
   necguild_lady = "Witch"
   necguild_sir = "Initiate"
   necguild_madame = "Initiate"
   necguild_apprentice = "Fledgling"
   necguild_apprenticette = "Fledgling"

   necguild_threeperson_failing = \
      "The Order of the Necromancers has fewer than 3 members.  If you do "
      "not get your membership up to three in the next %i %s, my grip on this "
      "plane of reality will slip and you will all perish along with me!"

   necguild_threeperson_failed = \
      "The Order of the Necromancers has been disbanded for "
      "lack of membership."

   necguild_demotee = "~B%q has demoted you to the rank of %s!"
   necguild_demoter = "~BYou demote %q to the the rank of %s!"
   necguild_demoted = "~B%s has demoted %q to the rank of %s."
   necguild_demotee_no_demoter = "~BYou have been demoted to the rank of %s!"

   necguild_descension = "~BYou have been ousted as %s of %s%q!"
   necguild_ascension = "~BCongratulations!  You are the new %s of %s%q!"

   necguild_new_master = "~BCongratulate %q, the new %s of %s%q!"
   necguild_abdicate = "~B%s has chosen to abdicate his position leading %s%q."

   necguild_mature = \
      "~B%s%q is now a mature guild, meaning it can now own "
      "and conquer guild halls."

   necguild_hour_rsc = "hour"
   necguild_hours_rsc = "hours"

   necguild_rent_nonpayment = \
      "~BYour dark queen has perished from starvation.  "
      "Your amulet detonates, ripping your body to shreds."
   necguild_rent_due_5 = \
      "~BQueen Venya'cyr tells you, \"~r~BOh, my negligent servants!  "
      "My hunger is a burning coal within my breast, and you have abandoned me!  "
      "If I do not feed suffienctly in the next %i %s, "
      "I will slip back into the darkness, and you shall all follow me!~n~B\""
   necguild_rent_due_4 = \
      "~BQueen Venya'cyr tells you, \"~r~BI hunger very greatly, my minions.  "
      "You have been grossly negligent in your duties to me.  "
      "My physical form is dissolving...  If I do not feed suffienctly in the next %i %s, "
      "I will slip back into the darkness, and you shall all follow me!~n~B\""
   necguild_rent_due_3 = \
      "~BQueen Venya'cyr tells you, \"~r~BI hunger very greatly, my minions.  "
      "My physical form is dissolving...  If I do not feed suffienctly in the next %i %s, "
      "I will slip back into the darkness, and you shall all follow me!~n~B\""
   necguild_rent_due_2 = \
      "~BQueen Venya'cyr tells you, \"~r~BI hunger greatly, my minions.  "
      "My physical form is dissolving...  If I do not feed suffienctly in the next %i %s, "
      "I will slip back into the darkness, and you shall all follow me!~n~B\""
   necguild_rent_due_1 = \
      "~BQueen Venya'cyr tells you, \"~r~BI hunger, my minions.  "
      "My physical form is dissolving...  If I do not feed suffienctly in the next %i %s, "
      "I will slip back into the darkness, and you shall all follow me!~n~B\""

   necguild_new_hall = "~B%s is the new home of %s%q!"
   necguild_hall_conquered = "~B%s, home of %s%q, has been conquered!"
   necguild_hall_betrayed = "~B%s, home of %s%q, was betrayed from within!"

   necguild_cannot_rejoin = \
      "~BThis ex-member of the Order may not rejoin yet."
   necguild_you_cannot_rejoin = "~BYou may not rejoin the Order yet."

   necguild_new_password = "~B%s's password has been changed."

   necguild_lich = "Venya'cyr, Queen of Brax"
   necguild_newly_formed = "~BThe Order of Necromancers has been reborn!"
   necguild_creation_mail = \
      "Subject: The Order of Necromancers has been reborn!\n"
      "I congratulate you on the formation of The Order of Necromancers!  "
      "However, there are some rules that you should know about.\n\n"
      "MEMBERSHIP:  I leave you to determine the details of the Order's "
      "membership, but if the Order does not have at least 3 members in it, "
      "I will not be able to maintain my grasp on this plane.  Thus, your "
      "first priority now should be to recruit more necromancers to the "
      "Order.\n\n"
      "INVITING NEW MEMBERS:  When you invite a potential member into the "
      "fold, an invitation object is created in their inventory, which they "
      "may then choose to accept or ignore.  An invitation will always be "
      "created, even if someone may not join the Order for some reason.  A "
      "necromancer must be of reasonably high power before he may join the "
      "Order, and may not be a member of a mortal guild at the same time.\n\n"
      "RANKS:  You may promote people to different ranks, thus giving them "
      "more power as well as more responsibility.  You may also keep "
      "necromancers at low ranks if you do not feel prepared to trust them.  "
      "These are the ranks:\n"
      "  +++ %s:  have no special abilities, other than to vote for the "
      "leader of their choice.  They may not even open the doors to my inner "
      "sanctum.\n"
      "  +++ %s:  only have the ability to vote.\n"
      "  +++ %s:  have the ability to vote and invite new members into "
      "the guild.\n"
      "  +++ %s:  may vote, invite new members in, kick unruly members out, "
      "promote or demote people of lower ranks than themselves, and form or "
      "shatter alliances.\n"
      "  +++ %s:  has all powers associated with the Order.\n\n"
      "TRIBUTE:  My continued presence on this plane of reality requires that "
      "the Order provide me with a steady flow of life essence.  My hunger "
      "grows at a regular rate, and the rate of increase is affected by many "
      "factors, including the number of members in your guild and the number "
      "of enemies and allies you have declared.  Remember, much of your power "
      "originates from me - should you let me go hungry, the members of the "
      "Order will all suffer greatly!\n\n"
      "Anyone in the Order may supply me with a portion of the life essence "
      "they have stored in their own bodies, by simply approaching me and "
      "saying that they wish to pay tribute.  However, to avoid confusion, "
      "it is recommended that you assign one person to decide whose turn it "
      "is to slake my thirst.  To find out how urgent is my hunger, simply "
      "ask me.\n\n"
      "  -- Venya'cyr, Eternal Queen of Brax"

   necguild_creation2_mail = \
      "Subject: Defend my fortress well!\n"
      "MY FORTRESS:  My fortress is now yours to inhabit and call your home.  "
      "Though much of it was destroyed when Brax was swallowed by the earth, "
      "some of my magicks have remained intact.  You may rest here in "
      "relative safety from the outside world, and will heal from being close "
      "to my center of power.  The newsglobe here allows members of the "
      "Order to keep each other apprised of current news, and there is a "
      "secret door outside with a password that you may set (until you choose "
      "one, the password is \"deathmage\").  The door to my inner sanctum can "
      "only be opened by necromancers of sufficient rank.\n"
      "Beware those who wield the Sword of the Hunt, my pet!  This weapon is "
      "truly to be feared, and must be guarded well - thanks to the accursed "
      "mage Tendrath, it periodically appears here in my fortress.  Luckily, "
      "the maze which I constructed to torment my prisoners is still "
      "functional, and is the only route to gain access to my inner sanctum "
      "or to the chambers where the Sword appears.  There are a number of "
      "levers in the secret room beyond the password-protected door which "
      "control the configuration of the maze.  Each lever, when pulled, will "
      "raise or lower a few sections of the maze's walls.  I also enchanted "
      "a number of crystal balls with which you may spy on the maze from a "
      "four different vantage points, so that you may be able to spot "
      "intruders and thwart their progress through the labyrinth.  You would "
      "do well to master the manipulation of the maze, for it is vital that "
      "you keep me safe from harm.  Your continued existence is now "
      "inextricably intertwined with my own;  should a band of pesky mortals "
      "break through to my inner sanctum and destroy my current physical "
      "manifestation, all members of the Order shall perish along with me.\n\n"
      "Serve me well and my power is yours to share, my dark minion!  "
      "Together, we shall sow the seeds of destruction and devour the world!"
      "  -- Venya'cyr, Eternal Queen of Brax"

   necguild_disbanded_mail = \
      "Subject: The Order is no more\n"
      "The Order of the Necromancers has vanished into the night.  "
      "I sleep once more, my pets."
   necguild_deposed_mail = \
      "Subject: Mutiny in the ranks\n"
      "You were deposed as %s of %s%q while you were away.  "
      "%q is the new %s.\n\n"
   necguild_new_master_mail = \
      "Subject: Mutiny in the ranks\n"
      "There was a change in leadership while you were away.  "
      "%q is the new %s of %s%q.\n\n"
   necguild_new_hall_mail = \
      "Subject: New guild hall\n"
      "%s was declared the new home of %s%q while you were away.\n\n"
   necguild_ascension_mail = \
      "Subject: Congratulations!\n"
      "You were chosen to be the new %s of %s%q!\n\n"

   necguild_default_password = "deathmage"

classvars:

   vrIcon = necguild_icon_rsc
   vrDesc = necguild_desc_rsc

   vrCantRejoin = necguild_cannot_rejoin
   vrYouCantRejoin = necguild_you_cannot_rejoin

properties:

   vrName = necguild_name_rsc  // Settable by players.

   prMaster  // All hopefully settable by players.
   prMistress
   prLieutenant_Male
   prLieutenant_Female
   prLady
   prLord
   prMadame
   prSir
   prApprentice_Male
   prApprentice_Female

   piMature = 0

   plMembers   = $        // this is a list of three element lists.
                          // first element:  a member's object ID
                          // second element:  a member's rank
                          // third element:  that member's current 'vote'.
                          // (ignored if guild is assassination)

   piGuild_Hall = $

   // One form of succession: Voting
   piSuccession = GS_VOTING

   // Secret societies do not advertise their existence in
   // who lists or look descs. Set upon creation.
   pbSecret = TRUE             

   ptMaintenance = $

   // If the guild has less than three members for 24 hours in a row, delete it.
   piThreePersonWarning = 0

   // These are stored only so that, if the guild goes while an
   // invitation is extended, the invitation disappears.
   plInvitations = $

   // These are only stored so that, if the guild is deleted,
   // all treaties are deleted.
   plTreaties = $

   // Keeps track of your allies. Ally lists must always match.
   plAllies = $

   // Keeps track of your enemies.  Main benefit of being an enemy?
   // You get warned if one attacks your guild hall.
   plEnemies = $

   // List of guilds that has declared YOURS as an enemy.
   plEnemiesOf = $
   // List of guilds that has declared YOURS as an ally.
   plAlliesOf = $

   // Ex-members cannot rejoin for two hours.
   plFormerMembers = $   ////

   // Two kills a day - units of piHunger * 10000.
   piRent = 167
   // Plus half a kill per member.
   piRentPerMember = 42
   // Plus a quarter kill per ally/enemy.
   piRentPerAlly = 21
   piRentDue = 0
   piRentCounter = 0

   psPassword

   piColor1 = XLAT_TO_GRAY
   piColor2 = XLAT_TO_GRAY
   piShield_shape = SHIELDSHAPE_DEFAULT

messages:

   Constructor(master = $)
   {
      local sTemp;

      ClearTempString();
      AppendTempString(necguild_name_rsc);

      sTemp = SetString($,GetTempString());
      vrName = sTemp;

      // Text names for guild ranks.
      prMaster = necguild_master;
      prMistress = necguild_mistress;
      prLieutenant_Male = necguild_lieutenant_male;
      prLieutenant_Female = necguild_lieutenant_female;
      prLady = necguild_lady;
      prLord = necguild_lord;
      prMadame = necguild_madame;
      prSir = necguild_sir;
      prApprentice_Male = necguild_apprentice;
      prApprentice_Female = necguild_apprenticette;

      // Is the guild secret?
      pbSecret = TRUE;
      piMature = 0;

      // What path of succession allows the leadership to change hands?
      piSuccession = GS_VOTING;

      plMembers = Cons([master, RANK_MASTER, master], plMembers);

      Send(master,@SetGuild,#guild_obj=self);
      Send(self,@ResetPowers,#who=master,#rank=RANK_MASTER);

      Send(master,@MsgSendUser,#message_rsc=necguild_newly_formed);
      Send(master,@ReceiveNestedMail,#from=necguild_lich,
            #dest_list=[master],#nest_list=[4,necguild_creation_mail,
            4,prApprentice_Male,4,prSir,4,prLord,
            4,prLieutenant_male,4,prMaster]);
      Send(master,@ReceiveNestedMail,#from=necguild_lich,
            #dest_list=[master],#nest_list=[4,necguild_creation2_mail]);

      ptMaintenance = CreateTimer(self,@MaintenanceTimer,
                           Send(SYS,@GetMaintenanceDelay));

      piThreePersonWarning = THREE_PERSON_LIMIT;
      psPassword = necguild_default_password;

      plFormerMembers = $;

      Send(SYS,@NewGuild,#what=self);

      propagate;
   }

   IsMature()
   {
      return TRUE;
   }

   MaintenanceTimer()
   "Do five things here: "
   "1) Check to be sure they have 3 members.  "
   "2) Check for guild maturity.  "
   "3) Check to ensure there is a guildmaster.  "
   "4) Accrue rent.  "
   "5) Check to see if former members of the guild can once more "
   "rejoin the guild."
   {
      local i, hourhours, timeleft, bPKServer;

      ptMaintenance = $;

      if Send(self,@GetGuildMaster) = $
      {
         // This should never happen!  This is just in as a failsafe, since
         // some commands are guildmaster only!
         Debug("Guild somehow ended up without a guildmaster!!!");

         // CountVotes will choose whoever has the most political support.
         Send(self,@CountVotes);
      }

      if Length(plMembers) < MINIMUM_MEMBERS
      {
         if piThreePersonWarning = 0
         {
            piThreePersonWarning = THREE_PERSON_LIMIT;
         }
         else
         {
            piThreePersonWarning = piThreePersonWarning - 1;
         }
         if piThreePersonWarning = 0
         {
            foreach i in plMembers
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_threeperson_failed);
            }
            Send(&NecromancerAmulet,@OrderOfNecromancersDisbanded);
            Send(self,@Delete);

            return;
         }
         else
         {
            if (piThreePersonWarning % 40) = 0
               OR ((piThreePersonWarning % 10) = 0
                  AND piThreePersonWarning < 40)
            {
               if piThreePersonWarning = 10
               {
                  hourhours = necguild_hour_rsc;
               }
               else
               {
                  hourhours = necguild_hours_rsc;
               }

               foreach i in plMembers
               {
                  Post(First(i),@MsgSendUser,#message_rsc=necguild_threeperson_failing,
                        #parm1=piThreePersonWarning/10,#parm2=hourhours);
               }
            }
         }
      }
      else
      {
         piThreePersonWarning = 0;
      }

      Send(self,@AccrueRent);
      foreach i in plFormerMembers
      {
         timeleft = Nth(i,2) - 1;
         if timeleft < 1
         {
            plFormerMembers = DelListElem(plFormerMembers,i); 
         }
         else
         {
            SetNth(i,2,timeleft);
         }
      }

      if piGuild_hall <> $
         AND Send(Send(self,@GetGuildHall),@GetGuildOwner) <> self
      {
         Debug("Guild points to a guild hall that does not point back to it!");
         piGuild_hall = $;
         foreach i in plMembers
         {
            Post(self,@ResetPowers,#who=First(i),
                  #rank=Send(self,@GetRank,#who=First(i)));
         }
      }
      ptMaintenance = CreateTimer(self,@MaintenanceTimer,Send(SYS,@GetMaintenanceDelay));

      return;
   }

   AccrueRent()
   {
      local rent, i, hourhours, oLich;

      if piRentDue < 1
      {
         piRentCounter = 0;
      }

      if piRentCounter = 1
      {
         foreach i in plMembers
         {
            Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_nonpayment);
         }
         Send(&NecromancerAmulet,@OrderOfNecromancersDisbanded);

         return;
      }

      rent = piRent;
      foreach i in plMembers
      {
         rent = rent + piRentPerMember;
      }

      foreach i in plAllies
      {
         rent = rent + piRentPerAlly;
      }

      foreach i in plEnemies
      {
         rent = rent + piRentPerAlly;
      }

      rent = Bound(rent,2,$);

      piRentDue = piRentDue+ rent;
      if piRentCOunter = 0
      {
         if piRentDue > (rent*RENT_MAX_OVERDUE)
         {
            piRentCounter = RENT_MAX_OVERDUE;
         }
      }
      else
      {
         piRentCounter = piRentCounter - 1;
      }

      if piRentCounter > 0
         AND ((piRentCounter % 40) = 0
            OR (piRentCounter < 40
               AND piRentCounter % 10 = 0))
      {
         hourhours = necguild_hours_rsc;
         if piRentCounter = 10
         {
            hourhours = necguild_hour_rsc;
         }

         if piRentDue > (rent * RENT_MAX_OVERDUE)
         {
            foreach i in plMembers
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_due_5,
                     #parm1=piRentCounter/10,#parm2=hourhours);
            }

            return;
         }

         if piRentDue > (rent * RENT_MAX_OVERDUE) * 4 / 5
         {
            foreach i in plMembers
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_due_4,
                     #parm1=piRentCounter/10,#parm2=hourhours);
            }

            return;
         }

         if piRentDue > (rent * RENT_MAX_OVERDUE) * 3 / 5
         {
            foreach i in plMembers
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_due_3,
                     #parm1=piRentCounter/10,#parm2=hourhours);
            }

            return;
         }

         if piRentDue > (rent * RENT_MAX_OVERDUE) * 2 / 5
         {
            foreach i in plMembers
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_due_2,
                     #parm1=piRentCounter/10,#parm2=hourhours);
            }

            return;
         }

         foreach i in plMembers
         {
            Post(First(i),@MsgSendUser,#message_rsc=necguild_rent_due_1,
                  #parm1=piRentCounter/10,#parm2=hourhours);
         }

         return;
      }

     return;
   }

   GetRentDue()
   {
      local rent, i;

      rent = piRent;
      foreach i in plMembers
      {
         rent = rent + piRentPerMember;
      }

      foreach i in plAllies
      {
         rent = rent + piRentPerAlly;
      }

      foreach i in plEnemies
      {
          rent = rent + piRentPerAlly;
      }

      rent = Bound(rent,2,$);

      return (piRentDue * 5 / (rent * RENT_MAX_OVERDUE));
   }

   GuildHallConquered(name=$, betrayed = $, oConquerer = $)
   {
      Debug("Necromancer Guild Hall conquered! This shouldn't happen. ",
            " Conquerer was ",oConquerer);

      return;
   }

   NewGuildMaster(who=$, abdicate = FALSE)
   "Other than creating a guild, this is the only way to have someone's "
   "rank set to guildmaster.  Note that it will depose any current guildmaster "
   "to the rank of normal peon, and reset votes to neutral (nil)!"
   {
      local i, new_master, old_master;

      if who = $
      {
         Debug("Tried to promote -no one- to the rank of guildmaster!");

         return;
      }

      if who = Send(self,@GetGuildMaster)
      {
         Debug("Tried to promote existing guildmaster to guildmaster!  Should never happen!");

         return;
      }

      old_master = $;
      foreach i in plMembers
      {
         // Demote anyone at guildmaster rank.
         if Nth(i,2) = RANK_MASTER
         {
            old_master = First(i);
            SetNth(i,2,RANK_SIR);
            if abdicate = FALSE
            {
               if NOT Send(First(i),@IsLoggedOn)
               {
                  Send(First(i),@ReceiveNestedMail,#from=necguild_lich,
                        #dest_list=[First(i)],#nest_list=[4,necguild_deposed_mail,
                        STRING_RESOURCE,Send(self,@GetRankName,#sex=Send(old_master,@GetGender),
                        #rank=RANK_MASTER),4, Send(self,@GetDef),STRING_RESOURCE,Send(self,@GetName),
                        STRING_RESOURCE,Send(who,@GetName),STRING_RESOURCE,Send(self,@GetRankName,
                        #sex=Send(who,@GetGender),#rank=RANK_MASTER)]);
               }
               else
               {
                  Send(First(i),@MsgSendUser,#message_rsc=necguild_descension,
                        #parm2=Send(self,@GetDef),#parm3=Send(self,@GetName),
                        #parm1=Send(self,@GetRankName,#sex=Send(old_master,@GetGender),
                        #rank=RANK_MASTER));
               }
            }
            Send(self,@ResetPowers,#who=First(i),#rank=RANK_SIR);
         }

         if First(i) = who
         {
            // Promote to master.
            new_master = First(i);
            SetNth(i,2,RANK_MASTER);
            if NOT Send(First(i),@IsLoggedOn)
            {
               Send(First(i),@ReceiveNestedMail,#from=necguild_lich,
                     #dest_list=[First(i)],#nest_list=[4,necguild_ascension_mail,
                     4,Send(self,@GetRankName,#rank=RANK_MASTER,#sex=Send(who,@GetGender)),
                     4,Send(self,@GetDef),4,Send(self,@GetName)]);
            }
            else
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_ascension,
                     #parm2=Send(self,@GetDef),#parm3=Send(self,@GetName),
                     #parm1=Send(self,@GetRankName,#sex=Send(new_master,@GetGender),
                     #rank=RANK_MASTER));
            }
            Send(self,@ResetPowers,#who=First(i),#rank=RANK_MASTER);
         }
      }

      foreach i in plMembers
      {
         if First(i) <> new_master
            AND (First(i) <> old_master
               OR abdicate = FALSE)
         {
            if abdicate = TRUE
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_abdicate,
                     #parm1=Send(old_master,@GetName),#parm2=Send(self,@GetDef),
                     #parm3=Send(self,@GetName));
            }
            if NOT Send(First(i),@IsLoggedOn)
            {
               if First(i) <> old_master
               {
                  Send(First(i),@ReceiveNestedMail,#from=necguild_lich,
                        #dest_list=[First(i)],
                        #nest_list=[4,necguild_new_master_mail,
                        STRING_RESOURCE,Send(new_master,@GetName),
                        4,Send(self,@GetRankName,#rank=RANK_MASTER,
                        #sex=Send(new_master,@GetGender)),4,Send(self,@GetDef),
                        4,Send(self,@GetName)]);
               }
            }
            else
            {
               Post(First(i),@MsgSendUser,#message_rsc=necguild_new_master,
                     #parm1=Send(new_master,@GetTrueName),#type1=STRING_RESOURCE,
                     #parm2=Send(self,@GetRankName,
                     #sex=Send(new_master,@GetGender),#rank=RANK_MASTER),
                     #parm3=Send(self,@GetDef),#parm4=Send(self,@GetName));
            }
         }
         SetNth(i,3,$);
      }

      return;
   }

   Delete(timerdelete=FALSE)
   "Kick all members out first!"
   "Since the timer may delete the object, TimerDelete checks to be sure "
   "the timer isn't already gone (getting rid of an error message."
   {
      local i;

      foreach i in plMembers
      {
         if NOT Send(First(i),@IsLoggedOn)
         {
            Send(First(i),@ReceiveNestedMail,#from=necguild_lich,
                  #dest_list=[First(i)],#nest_list=[4,necguild_disbanded_mail]);
         }
      }

      // NecromancerBalance has to set the guild to $ if it hasn't already.
      Send(Send(SYS,@GetNecromancerBalance),@SetNecroGuild);

      propagate;
   }

   MemberKilled(victim=$,killer=$)
   {
      local IsMaster,oLich,i;

      if NOT Send(self,@IsMember,#who=victim)
      {
         Debug("Tried to remove non-member ",Send(victim,@GetName),
               " from the Order of Necromancers.");

         return;
      }

      IsMaster = FALSE;
      if Send(self,@GetRank,#who=victim) = RANK_MASTER
      {
         IsMaster = TRUE;
      }

      if Length(plMembers) = 1
      {
         if First(First(plMembers)) <> victim
         {
            Debug("Tried to remove ",Send(victim,@GetName),
                  " from the Order of Necromancers but the last member is ",
                  Send(First(First(plMembers)),@GetName));
            Send(self,@Delete);

            return;
         }

         oLich = Send(Send(SYS,@FindRoomByNum,#num=RID_GUILDH15),
                        @FindHoldingActive,#class=&Lich);
         if oLich <> $
         {
            // Lich will handle guild cleanup.
            if piRentCounter = 1
               OR piThreePersonWarning = 0
            {
               // We got here through nonpayment of rent or insufficient membership.
               Post(oLich,@Killed,#what=self,#resetScenario=FALSE,
                     #guildDisbandDeath=TRUE);
            }
            else
            {
               Post(oLich,@Killed,#what=killer);
            }
         }
         else
         {
            Debug("The Order of Necromancers somehow ended up without a lich.");
            Send(self,@Delete);
         }

         return;
      }

      // Kick them out of the Order.
      Send(self,@RemoveFromGuild,#who=victim);
      // If master, find a new one.
      if IsMaster
      {
         if Send(self,@IsMember,#who=killer)
            AND killer <> victim
         {
            // Shift everyone's support to the assassin.
            foreach i in plMembers
            {
               SetNth(i,3,killer);
            }
         }
         Send(self,@CountVotes);
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
