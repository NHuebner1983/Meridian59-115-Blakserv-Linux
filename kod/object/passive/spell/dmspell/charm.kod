// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////////
Charm is DMSpell

constants:

   include blakston.khd

resources:

   include charm.lkod

   charm_name_rsc = "charm"
   charm_icon_rsc = iseduce.bgf
   charm_desc_rsc = \
      "Make any monster your friend!  Charmed monsters will follow you "
      "until you cast Charm on them again, cast Spectate on yourself, or Phase."
   charm_caster = "%s%s has been charmed."
   charm_target_off = "%s%s is no longer under your control."
   charm_cast_self = "You cannot charm yourself!"
   charm_stolen = "%s%s has charmed your %s!"
   charm_sound = rperappr.wav

classvars:

   vrName = charm_name_rsc
   vrIcon = charm_icon_rsc
   vrDesc = charm_desc_rsc

   vrSuccess = charm_caster
   vrEndEnchantment = charm_target_off
   vrNoSelfTarget = charm_cast_self
   vrStolen = charm_stolen

   viSpell_num = SID_CHARM
   viSchool = SS_DM_COMMAND
   viSpell_level = 6
   viMana = 6
   viChance_To_Increase = 15
   viMeditate_ratio = 100

   viSpellExertion = 1

   vrSucceed_wav = charm_sound

properties:

messages:

   ResetReagents()
   {
      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local oTarget;

      oTarget = First(lTargets);

      if (oTarget = who)
      {
         Send(who,@MsgSendUser,#message_rsc=vrNoSelfTarget);

         return FALSE;
      }

      if NOT IsClass(oTarget,&Monster)
      {
         Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
               #parm2=Send(oTarget,@GetDef),#parm3=Send(oTarget,@GetName));

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      // Spell effects
      Send(self,@DoSpell,#what=who,#oTarget=First(lTargets));

      propagate;
   }

   DoSpell(what=$,oTarget=$)
   {
      local oMaster;

      oMaster = Send(oTarget,@GetMaster);

      if (oMaster = what)
      {
         // If we're already the master, lose the minion.
         Send(oTarget,@SetMaster,#oMaster=$);
         Send(what,@MsgSendUser,#message_rsc=vrEndEnchantment,
               #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

         return;
      }
      else if (oMaster <> $)
      {
         Send(oMaster,@MsgSendUser,#message_rsc=vrStolen,
               #parm1=Send(what,@GetCapDef),#parm2=Send(what,@GetName),
               #parm3=Send(oTarget,@GetName));
         // Mob might be seduced, so remove the seduce enchantment first.
         Send(oTarget,@RemoveEnchantmentClass,#class=&Seduce);
      }

      Send(what,@MsgSendUser,#message_rsc=vrSuccess,
            #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

      Send(oTarget,@SetMaster,#oMaster=what);
      Send(oTarget,@ResetBehaviorFlags);
      Send(oTarget,@SetBehaviorFlag,#flag=AI_FIGHT_HYPERAGGRESSIVE,#value=FALSE);
      Send(oTarget,@SetBehaviorFlag,#flag=AI_FIGHT_AGGRESSIVE,#value=FALSE);
      Send(oTarget,@SetBehaviorFlag,#flag=AI_FIGHT_NEWBIESAFE);

      return;
   }

end
///////////////////////////////////////////////////////////////////////////////
