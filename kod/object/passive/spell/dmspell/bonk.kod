// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Bonk is DMSpell

constants:
   include blakston.khd

resources:

   include bonk.lkod

   bonk_name_rsc = "bonk"
   bonk_icon_rsc = lightnin.bgf

   allinroom_bonk_msg1 = "~b%s%s bonks %s%s on the noggin."
   allinroom_bonk_msg2 = "~bYou wince as %s%s viciously bonks %s%s."

   caster_bonk_msg = "~bYou viciously bonk %s%s."
   bonked_bonk_msg = "~r~B>OUCH<~n~b  You are bonked on the head by %s%s."
   bonk_desc_rsc = "This bonks a person of your choice.  "

   caster_bonkstick_msg = \
      "~bYou viciously slam your bonkstick on %s%s's noggin."
   bonked_bonkstick_msg = \
      "~r~B>OUCH<~n~b  %s%s ruthlessly beats on your head with %s bonkstick!!"
   allinroom_bstick_msg1 = \
      "~b%s%s's eyes cross momentarily as %s%s pounds %s on the "
      "noggin with %s bonkstick."
   allinroom_bstick_msg2 = \
      "~bYou wince as %s%s viciously bonks %s%s with %s bonkstick, "
      "which collapses."

classvars:
   vrName = bonk_name_rsc
   vrIcon = bonk_icon_rsc
   vrDesc = bonk_desc_rsc

   viSpell_num = SID_BONK

   viMana = 0

properties:

messages:

   GetNumSpellTargets()
   {
      return 1;
   }

   SuccessChance(who=$)
   "DMs are always successful with their spells."
   {
      return TRUE;
   }

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local oTarget;

      oTarget = First(lTargets);

      // Can't bonk someone if they already have an effect, i.e. a debuff.
      if IsClass(oTarget,&Battler)
         AND Send(oTarget,@IsEnchanted,#byClass=&Debuff)
      {
         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,bItemCast=FALSE)
   {
      local i, oRoom, lActive, each_obj, oTarget;

      oRoom = Send(who,@GetOwner);
      lActive = Send(oRoom,@GetHolderActive);
      oTarget = First(lTargets);

      // Show lightning flying through the air

      Send(oRoom,@SomethingShot,#who=who,#target=oTarget,
            #projectile=self,#flags=PROJ_FLAG_LIGHT_SOURCE);

      if bItemCast
      {
         Send(who,@MsgSendUser,#message_rsc=caster_bonkstick_msg,
               #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

         Send(oTarget,@MsgSendUser,#message_rsc=bonked_bonkstick_msg,
               #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName),
               #parm3=Send(who,@GetHisHer));
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=caster_bonk_msg,
               #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
         Send(oTarget,@MsgSendUser,#message_rsc=bonked_bonk_msg,
               #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName));
      }

      Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_INVERT);

      If isClass(oTarget,&Cow)
      {
         Send(oTarget,@Bonked);
      }
      
      foreach i in lActive
      {
         each_obj = Send(oRoom,@HolderExtractObject,#data=i);
         if (IsClass(each_obj,&Player)
            AND (each_obj <> who)
            AND (each_obj <> oTarget))
         {
            if (IsClass(oTarget,&Battler))
            {
               if bItemCast
               {
                  Send(each_obj,@MsgSendUser,#message_rsc=allinroom_bstick_msg1,
                        #parm1=Send(oTarget,@GetCapDef),
                        #parm2=Send(oTarget,@GetName),
                        #parm3=Send(who,@GetDef),
                        #parm4=Send(who,@GetName),
                        #parm5=Send(oTarget,@GetHimHer),
                        #parm6=Send(who,@GetHisHer));
               }
               else
               {
                  Send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonk_msg1,
                        #parm1=Send(who,@GetDef),
                        #parm2=Send(who,@GetName,#cap=TRUE),
                        #parm3=Send(oTarget,@GetDef),
                        #parm4=Send(oTarget,@GetName));
               }
            }
            else
            {
               if bItemCast
               {
                  Send(each_obj,@MsgSendUser,#message_rsc=allinroom_bstick_msg2,
                        #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName),
                        #parm3=Send(oTarget,@GetDef),
                        #parm4=Send(oTarget,@GetName),
                        #parm5=Send(who,@GetHisHer));
               }
               else
               {
                  Send(each_obj,@MsgSendUser,#message_rsc=allinroom_bonk_msg2,
                        #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName),
                        #parm3=Send(oTarget,@GetDef),
                        #parm4=Send(oTarget,@GetName));
               }
            }
         }
      }

      propagate;
   }

   SendEffectData()
   {
      // for EFFECT_INVERT, 4 bytes of time to be inverted
      AddPacket(4,10000);

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   GetProjectileIcon()
   {
      return vrIcon;
   }

   GetProjectileSpeed()
   {
      return 12;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 2, 2, 3);   // 40ms between animations

      return;
   }

   GetProjectileLightFlags()
   {
      // General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      // Medium light radius for projectiles.  Out of 255 levels.
      return 125;
   }

   GetProjectileLightColor()
   {
      // Color is random!
      return Send(SYS,@GetRGB,#iRed=random(33,100),#iGreen=random(33,100),
                  #iBlue=random(33,100));
   }

end
////////////////////////////////////////////////////////////////////////////////
