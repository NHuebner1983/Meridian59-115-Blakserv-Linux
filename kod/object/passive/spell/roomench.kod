// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RoomEnchantment is Spell

constants:

   include blakston.khd

resources:

   include roomench.lkod

   RoomEnchantment_name_rsc = "room enchantment"
   RoomEnchantment_icon_rsc = iheat.bgf
   RoomEnchantment_desc_rsc = \
      "An enchantment which is attached to a room."
   RoomEnchantment_kill_rsc = "The room enchantment kills you."
   RoomEnchantment_killer_rsc = "You killed %s%s with your room enchantment."
   RoomEnchantment_hit_rsc = "The room enchantment damages you."
   RoomEnchantment_not_guilded = "You must be guilded to cast that spell here."

classvars:

   vrName = RoomEnchantment_name_rsc
   vrIcon = RoomEnchantment_icon_rsc
   vrDesc = RoomEnchantment_desc_rsc
   vrNotGuilded = RoomEnchantment_not_guilded
   vrAlreadyEnchanted = spell_already_in_effect // From spell.kod
   vrRoomEnchKilled = RoomEnchantment_kill_rsc
   vrRoomEnchKiller = RoomEnchantment_killer_rsc
   vrRoomEnchHit = RoomEnchantment_hit_rsc

   vbRoomEnchHitCaster = TRUE

   viAttack_type = 0
   viAttack_spell = ATCK_SPELL_ALL

   vbIsAreaEffect = TRUE

properties:

messages:

   GetNumSpellTargets()
   {
      return 0;
   }

   CanPayCosts(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      if (oRoom = $)
      {
         return FALSE;
      }

      // Check for enchantment already applied.
      if Send(oRoom,@IsEnchanted,#what=self)
      {
         Send(who,@MsgSendUser,#message_rsc=vrAlreadyEnchanted);

         return FALSE;
      }

      if (viHarmful
         AND NOT Send(oRoom,@AllowGuildAttack,#what=who))
         AND Send(SYS,@IsPKAllowed)
         AND NOT IsClass(who,&DM)
      {
         // Tried to cast unguilded in town with no monsters.  Denied!
         Send(who,@MsgSendUser,#message_rsc=vrNotGuilded);

         return FALSE;
      }

      propagate;
   }

   DoubleCheckAfterTrance(who = $, lTargets = $)
   {
      local oRoom;

      oRoom = Send(who,@GetOwner);

      if (Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_COMBAT)
           OR Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_MAGIC))
         AND (viOutlaw OR viHarmful)
      {
         Send(who,@MsgSendUser,#message_rsc=spell_bad_location,#parm1=vrName);

         return FALSE;
      }

      if Send(oRoom,@IsEnchanted,#what=self)
      {
         Send(who,@MsgSendUser,#message_rsc=vrAlreadyEnchanted,#parm1=vrName);

         return FALSE;
      }

      propagate;
   }

   SendStatsDesc(who=$)
   {
      if who <> $
         AND IsClass(who,&User)
         AND Send(Send(who,@GetOwner),@IsEnchanted,#what=self)
      {
         Send(self,@EffectDesc,#who=who);

         return;
      }

      propagate;
   }

   RoomEnchantmentDamage(oTarget=$, state=$, iLevel=1)
   "Takes a target (oTarget), an enchantment state (state) and optional "
   "iLevel parameter (used for Qor/Shalbane) and deals the damage to oTarget."
   {
      local iDamage, iSpellPower, oCaster, oCasterRoom, oRoom;

      if (state = $
         OR oTarget = $)
      {
         return;
      }

      if (IsClass(oTarget,&User)
         AND Send(oTarget,@IsInCannotInteractMode))
      {
         return;
      }

      iSpellPower = Send(self,@GetSpellPowerFromState,#state=state);

      // oCaster is original caster of the spell.
      oCaster = Nth(state,2);
      if (oCaster = $)
      {
         return;
      }

      if ((oTarget = self AND NOT vbRoomEnchHitCaster)
         OR NOT Send(oCaster,@AllowBattlerAttack,#victim=oTarget,
                     #stroke_obj=self))
      {
         return;
      }

      iDamage = Send(self,@ComputeDamage,#who=oCaster,#oTarget=oTarget,
                     #iDamage=iDamage,#iLevel=iLevel,#iSpellpower=iSpellPower);

      if (iDamage = 0)
      {
         return;
      }

      iDamage = Send(oTarget,@AssessDamage,#report=TRUE,#what=self,
                        #damage=iDamage,#aspell=viAttack_spell,
                        #atype=viAttack_type);

      if (IsClass(oCaster,&Battler))
      {
         Send(oCaster,@AssessHit,#what=oTarget,#damage=iDamage,
               #use_weapon=self);
      }

      if (iDamage = $)
      {
         if IsClass(oTarget,&User)
         {
            Send(oTarget,@MsgSendUser,#message_rsc=vrRoomEnchKilled);
         }

         if IsClass(oCaster,&User)
         {
            Send(oCaster,@MsgSendUser,#message_rsc=vrRoomEnchKiller,
                  #parm1=Send(oTarget,@GetCapDef),
                  #parm2=Send(oTarget,@GetTrueName));
         }

         oRoom = Send(oTarget,@GetOwner);
         oCasterRoom = Send(oCaster,@GetOwner);
         
         Send(oCaster,@KilledSomething,#what=oTarget,#use_weapon=self);

         if (oRoom <> oCasterRoom)
         {
            Send(oRoom,@SomethingKilled,#what=oCaster,#victim=oTarget);
         }
      }
      else if IsClass(oTarget,&User)
      {
         Send(oTarget,@MsgSendUser,#message_rsc=vrRoomEnchHit);
      }

      return;
   }

   GetSpellPowerFromState(state=$)
   {
      return First(state);
   }

   GetAttackSpell()
   {
      return viAttack_spell;
   }

   GetAttackType()
   {
      return viAttack_type;
   }

end
////////////////////////////////////////////////////////////////////////////////
