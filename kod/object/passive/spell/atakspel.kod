// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
AttackSpell is Spell

// Generic attacking spell, such as blast or bolt spells.

constants:

   include blakston.khd

resources:

   include atakspel.lkod

   attack_spell_hit_rsc = "You hit %s%s."
   attack_spell_no_self_rsc = "You can't cast %s on yourself."
   attack_spell_out_of_range = "%s%s is too far away to hit with %s."
   attack_spell_killed_self = "You killed yourself."
   attack_spell_killed_someone = "You killed %s%s%s."
   attack_spell_cast_rsc = "You cast the spell."

classvars:

   vrKilled_Someone = attack_spell_killed_someone
   vrKilled_Self = attack_spell_killed_self
   vrCast = attack_spell_cast_rsc
   vrHit = attack_spell_hit_rsc

   viAttack_type = 0
   viAttack_spell = ATCK_SPELL_ALL

   // In seconds, since it works off GetTime(),
   viPostCast_time = 2

   viHarmful = TRUE
   viOutlaw = TRUE
   viChance_To_Increase = 20
   viMeditate_ratio = 30

   vbIsRangedAttack = FALSE
   vbSelfHarming = FALSE

properties:

   piDamageMin = 0
   piDamageMax = 0
   piRange = $

   // Maximum amount of bonus damage mana focus gives us for casting this spell.
   piManaFocusBonus = 5

   piCasterDmgPct = 100

   pbAbsolute = FALSE

messages:

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local target, i, iTotalRange;

      // Propagate area effect spells to Spell, if valid targets. CanPayCosts
      // in AttackSpell handles single target attacks, Spell handles multiples.
      if vbIsAreaEffect
      {
         if lTargets = $
         {
            Send(who,@MsgSendUser,#message_rsc=spell_no_targets,
                  #parm1=Send(self,@GetName));

            return FALSE;
         }

         propagate;
      }

      // Can cast spell if the 1 target item is a battler
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);

      // Don't allow casting on self.  This also avoids a potential problem:
      //  if this spell were to kill the caster, he would die before the
      //  reagents were used.  This would take some rewriting of AttackSpell
      //  and Spell.  But, if cast from an item, smoke yourself all you want!
      if target = who AND (NOT bItemCast)
      {
         Send(who,@WaveSendUser,#wave_rsc=spell_fail_wav);
         Send(who,@MsgSendUser,#message_rsc=attack_spell_no_self_rsc,
               #parm1=vrName);

         return FALSE;
      }

      if NOT IsClass(target,&Battler)
      {
         Send(who,@WaveSendUser,#wave_rsc=spell_fail_wav);
         Send(who,@MsgSendUser,#message_rsc=spell_bad_target,
               #parm1=vrName,#parm2=Send(target,@GetDef),
               #parm3=Send(target,@GetName));

         return FALSE;
      }

      // If the target died or switched rooms while the spell is being cast
      // then it fails.
      if Send(target,@GetOwner) <> $
         AND Send(target,@GetOwner) <> Send(who,@GetOwner)
      {
         Send(who,@MsgSendUser,#message_rsc=attack_spell_out_of_range,
               #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName),
               #parm3=vrName);

         return FALSE;
      }

      if piRange <> $
      {
         iTotalRange = piRange;

         // A little fudge factor to account for lag drift, etc.
         if IsClass(target,&Player) AND Send(target,@HasMovedRecently)
         {
            iTotalRange += RANGE_MOVEMENT_BONUS;
         }

         if Send(target,@GetOwner) <> $
            AND Send(who,@SquaredFineDistanceTo3D,#what=target)
                     > (iTotalRange * iTotalRange)
         {
            if NOT bItemCast
            {
               Send(who,@MsgSendUser,#message_rsc=attack_spell_out_of_range,
                     #parm1=Send(target,@GetCapDef),#parm2=Send(target,@GetName),
                     #parm3=vrName);
            }

            return FALSE;
         }
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0,bItemCast=FALSE)
   {
      local i, iDamage, iManaFocus, iTemp, oRoom;

      // Rooms can cast earthquake, so check if we have a room for 'who'
      if IsClass(who,&Room)
      {
         oRoom = who;
      }
      else
      {
         oRoom = Send(who,@GetOwner);
      }

      iDamage = Random(piDamageMin*100, piDamageMax*100);

      if IsClass(who,&Player)
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);

         if NOT bItemCast
         {
            // Myst and Int boost base damage
            iDamage = Send(self,@DamageFactors,#damage=iDamage,#who=who);

            // Reduce damage based on spell power.
            iDamage = (iDamage * (50 + (iSpellPower / 2))) / SPELLPOWER_MAXIMUM;

            if Send(who,@CheckPlayerFlag,#flag=PFLAG_MANA_FOCUS)
            {
               // Bonus if we have mana focus up.
               iManaFocus = Send(who,@GetEnchantedState,
                                  #what=Send(SYS,@FindSpellByNum,#num=SID_MANA_FOCUS));

               // This takes the spellpower of Mana Focus (iManaFocus), and uses
               //  that to scale our "bonus" damage.
               // Bonus damage is 1 to piManaFocusBonus, scaled by the power of iManaFocus.
               iDamage = iDamage + ((iManaFocus * piManaFocusBonus * 100) / SPELLPOWER_MAXIMUM);
            }
         }
      }

      // A spell (eg. earthquake) might harm the caster also. If so, use this function.
      if vbSelfHarming
         AND IsClass(who,&Player)
      {
         Send(self,@HurtCaster,#who=who,#iDamage=iDamage);
      }

      // After figuring damage, do an AssessDamage.  This will handle the necessary
      //  attack messages.
      foreach i in lTargets
      {
         if IsClass(who,&Player)
         {
            Send(who,@SetKillTarget,#target=i);
         }

         // Earthquake needs to deal damage based on range from caster. Any
         // spell that needs to modify damage in some way and/or add extra
         // battle messages can add the class here. iTemp holds the calculated
         // damage while iDamage gets modified, then returns the original value
         // to iDamage at the beginning of each loop.
         if iTemp <> $
         {
            // iTemp not $, so set damage to it.
            iDamage = iTemp;
         }
         else
         {
            // First loop, store initial damage in iTemp.
            iTemp = iDamage;
         }

         if IsClass(self,&Earthquake)
         {
            iDamage = Send(self,@ComputeDamage,#who=who,#target=i,
                           #iDamage=iDamage);
            if iDamage < 100
            {
               // To prevent spam, we don't consider 0 damage earthquake hits.
               continue;
            }
            iDamage = Send(i,@AssessDamage,#what=who,#damage=iDamage,
                           #atype=viAttack_type,#aspell=Send(self,@GetAttackSpell),
                           #absolute=pbAbsolute,#precision=TRUE);
            if iDamage = $
            {
               if IsClass(who,&Room)
               {
                  Send(who,@SomethingKilled,#what=who,#victim=i);
                  Send(i,@Killed,#what=who);
               }
               else
               {
                  Send(who,@MsgSendUser,#message_rsc=vrKilled_Someone,
                        #parm1=Send(i,@GetDef),#parm2=Send(i,@GetName),
                        #parm3=Send(i,@GetHeShe));
               }

               Send(i,@MsgSendUser,#message_rsc=vrKilled_Self);
            }
            else
            {
               Send(i,@MsgSendUser,#message_rsc=vrCast);
            }
         }
         else
         {
            iDamage = Send(i,@AssessDamage,#what=who,#damage=iDamage,
                        #atype=viAttack_type,#aspell=Send(self,@GetAttackSpell),
                        #absolute=pbAbsolute,#precision=TRUE);
         }

         if IsClass(who,&Battler)
         {
            Send(who,@AssessHit,#what=i,#damage=iDamage,#use_weapon=self);

            if iDamage = $
            {
               Send(who,@KilledSomething,#what=i,#use_weapon=self);
            }
         }

         Send(oRoom,@SomethingAttacked,#what=who,#victim=i,#use_weapon=self);

         Send(self,@DoSideEffect,#who=who,#victim=i,#damage=iDamage);
      }

      // This used to not propagate, but as of July 2014 it does. No bugs yet noted.
      propagate;
   }

   DamageFactors(damage=0,who=$)
   {
      local iDamage, iMysticism, iIntellect;

      // Get dual stats damage bonus.
      // These difficult to master attack spells require both high mysticism
      // and high intellect to reach their full potential.
      iMysticism = Send(who,@GetMysticism);
      iIntellect = Send(who,@GetIntellect);
      iDamage = ((100+bound(((iMysticism+iIntellect)/2)-25,0,40))*damage)/100;

      return iDamage;
   }

   GetAttackSpell()
   {
      return viAttack_spell;
   }

   GetAttackType()
   {
      return viAttack_type;
   }

   IsRangedAttack()
   {
      return vbIsRangedAttack;
   }

   // The chance to do something in addition to normal damage.
   DoSideEffect(who=$,victim=$,damage=0)
   {
      return;
   }

   HurtCaster(who=$,iDamage=$)
   {
      local iFinalDamage;

      // Adjust damage based on how much it should hurt the caster.
      iDamage = (iDamage * piCasterDmgPct) / 100;

      if IsClass(who,&Player)
      {
         // Apply the spell damage to the caster. Kill them if necessary.
         iFinalDamage = Send(who,@AssessDamage,#what=who,#damage=iDamage,#atype=0,
                           #aspell=viAttack_spell,#report=TRUE,#precision=TRUE);

         if iFinalDamage = $
         {
            Post(who,@MsgSendUser,#message_rsc=vrKilled_Self);
            Post(who,@KilledSomething,#what=who,#use_weapon=self);
         }
         else
         {
            Send(who,@MsgSendUser,#message_rsc=vrCast);
            Send(who,@AssessHit,#what=who,#damage=iFinalDamage,
                  #use_weapon=self);
         }
      }

      return;
   }

   ComputeDamage(who=$,target=$,iDamage=$)
   {
      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
