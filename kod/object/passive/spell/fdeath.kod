// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////S///////////////////////////////////////////////////////
FeignDeath is Spell

constants:

   include blakston.khd

resources:

   include fdeath.lkod

   feigndeath_name_rsc = "feign death"
   feigndeath_icon_rsc = ifeignde.bgf
   feigndeath_desc_rsc = \
      "Makes you appear to be deceased, that hopefully someone won't "
      "really make you as such.  Requires nothing but a devious mind."

   feigndeath_user_killed = "~B~U~k[###]~n ~B~v%s was just killed by %s%s."
   feigndeath_angrymocker = "an angry guy named Mocker"
   feigndeath_fallingpiano = "a falling piano"
   feigndeath_firebunny = "a fire breathing bunny"
   feigndeath_giantrat = "a giant rat"
   feigndeath_nuthin = ""

classvars:

   vrName = feigndeath_name_rsc
   vrIcon = feigndeath_icon_rsc
   vrDesc = feigndeath_desc_rsc

   viMana = 5          // Mana is amount used upon inititiation
   viManaDrain = 5     // Drain is amount used every viDrainTime milliseconds
   viDrainTime = 5000    // Drain some mana every viDrainTime milliseconds
   viSpell_num = SID_FEIGN_DEATH
   viSpellExertion = 1
   viChance_To_Increase = 40
   viMeditate_ratio = 20

   viSchool = SS_RIIJA
   viSpell_level = 1

   viHarmful = FALSE

properties:

messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CastSpell(who = $, iSpellPower = 0)
   "Initiation point for the spell."
   {
      local oMonster, oBody, oRoom, oScapegoat, iRand, i, each_obj,
            iRow, iCol, iFineRow, iFineCol, iDropChance;
      
      oRoom = Send(who,@GetOwner);
      iRow = Send(who,@GetRow);
      iCol = Send(who,@GetCol);
      iFineRow = Send(who,@GetFineRow);
      iFineCol = Send(who,@GetFineCol);

      if IsClass(oRoom,&MonsterRoom)
         AND Send(oRoom,@GetMonsterList) <> $
      {
         oScapeGoat = Create(First(First(Send(oRoom,@GetMonsterList))));
      }
      else
      {
         oScapeGoat = Create(&GiantRat);
      }

      oBody = $;

      // Get rid of illusion spells that can cause strange side-effects.
      if Send(who,@IsEnchanted,#class=&Morph)
      {
         // If we're morphed, create the illusion body.
         oMonster = Send(who,@GetIllusionForm);

         if oMonster <> $
         {
            oBody = Send(oMonster,@CreateDeadBody,#killer=oScapeGoat);
         }

         Send(who,@RemoveEnchantmentClass,#class=&Morph);
      }

      if Send(who,@IsEnchanted,#class=&IllusionaryForm)
      {
         Send(who,@RemoveEnchantmentClass,#class=&IllusionaryForm);
      }

      if oBody = $
      {
         oBody = Send(who,@CreateCorpse,#Decomposes=FALSE);
      }

      Send(who,@SetPlayerIllusion,#what=self);
      Send(who,@StartEnchantment,#what=self,#time=viDrainTime,
           #state=[oBody,iSpellPower],#addicon=TRUE,#lastcall=FALSE);

      if NOT Send(who,@PlayerIsImmortal)
      {
         // Chance to drop item, 1-10//, decreasing with increasing spellpower.
         iDropChance = bound((10 - (iSpellPower/10)),1,10);

         foreach i in Send(who,@GetPlayerUsing)
         {
            if (Send(i,@GetItemUseType) & (ITEM_USE_HAND | ITEM_USE_HEAD))
               AND (NOT Send(i,@IsItemType,#type=ITEMTYPE_SPECIAL))
               AND Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
               AND Send(i,@ReqUnUse)
               AND Send(i,@ReqNewOwner,#what=oRoom)
               AND Send(i,@ReqLeaveOwner)
               AND Send(i,@DropOnDeath)
               AND NOT IsClass(i,&RiijaSword)
            {
               Send(oRoom,@NewHold,#what=i,#new_row=iRow,#new_col=iCol,
                     #fine_row=iFineRow,#fine_col=iFineCol);
            }
         }
         
         foreach i in Send(who,@GetHolderActive)
         {
            if (NOT Send(i,@IsItemType,#type=ITEMTYPE_SPECIAL))
               AND Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
               AND Send(i,@ReqNewOwner,#what=oRoom)
               AND Send(i,@ReqLeaveOwner)
               AND Send(i,@DropOnDeath)
               AND NOT IsClass(i,&RiijaSword)
               AND Random(1,100) < iDropChance
            {
               Send(oRoom,@NewHold,#what=i,#new_row=iRow,#new_col=iCol,
                     #fine_row=iFineRow,#fine_col=iFineCol);
            }
         }
         
         foreach i in Send(who,@GetHolderPassive)
         {
            if (NOT Send(i,@IsItemType,#type=ITEMTYPE_SPECIAL))
               AND Send(oRoom,@ReqNewHold,#what=i,#new_row=iRow,#new_col=iCol)
               AND Send(i,@ReqNewOwner,#what=oRoom)
               AND Send(i,@ReqLeaveOwner)
               AND NOT IsClass(i,&RiijaSword)
               AND Send(i,@DropOnDeath)
               AND Random(1,100) < iDropChance
            {
               Send(oRoom,@NewHold,#what=i,#new_row=iRow,#new_col=iCol,
                     #fine_row=iFineRow,#fine_col=iFineCol);
            }
         }
      }

      Send(who,@AddDefenseModifier,#what=self);      

      iRand = Random(1,100);
      if iRand > 3
      {
         Send(self,@SendMessage,#who=who,
              #string=feigndeath_user_killed,
              #parm1=Send(who,@GetUserName),
              #parm2=Send(oScapeGoat,@GetIndef),
              #parm3=Send(oScapeGoat,@GetName));
         Send(oScapeGoat,@Delete);
      }
      else
      {
         if iRand = 1
         {
            Send(self,@SendMessage,#who=who,
                 #string=feigndeath_user_killed,
                 #parm1=Send(who,@GetUserName),
                 #parm2=feigndeath_nuthin,
                 #parm3=feigndeath_angrymocker);
         }
         else
         {
            if iRand = 2
            {
               Send(self,@SendMessage,#who=who,
                    #string=feigndeath_user_killed,
                    #parm1=Send(who,@GetUserName),
                    #parm2=feigndeath_nuthin,
                    #parm3=feigndeath_fallingpiano);
            }
            else
            {
               // if iRand = 3
               Send(self,@SendMessage,#who=who,
                    #string=feigndeath_user_killed,
                    #parm1=Send(who,@GetUserName),
                    #parm2=feigndeath_nuthin,
                    #parm3=feigndeath_firebunny);
            }
         }
      }

      propagate;
   }

   SendMessage(who=$,string=$,parm1=$,parm2=$,parm3=$)
   {
      local i, j, each_obj, oRoom, lYellList, oYellRoom, bThisRoom;

      bThisRoom = FALSE;
      oRoom = Send(who,@GetOwner);
      lYellList = Send(oRoom,@GetYellZone);

      foreach i in lYellList
      {
         oYellRoom = Send(SYS,@FindRoomByNum,#Num=i);
         if oYellRoom = oRoom
         {
            bThisRoom = TRUE;
         }
         foreach j in Send(oYellRoom,@GetHolderActive)
         {
            each_obj = Send(oYellRoom,@HolderExtractObject,#data=j);
            if IsClass(each_obj,&player)
            {
               Send(each_obj,@MsgSendUser,#message_rsc=string,
                     #parm1=parm1,#parm2=parm2,#parm3=parm3);
            }
         }
      }

      if NOT bThisRoom
      {
         foreach j in Send(oRoom,@GetHolderActive)
         {
            each_obj = Send(oRoom,@HolderExtractObject,#data=j);
            if IsClass(each_obj,&player)
            {
               Send(each_obj,@MsgSendUser,#message_rsc=string,
                     #parm1=parm1,#parm2=parm2,#parm3=parm3);
            }
         }
      }

      return;
   }

   RemoveEnchantmentEffects(who=$,state=$)
   {
      Send(who,@RemoveDefenseModifier,#what=self);
      Send(who,@ResetPlayerIllusion);

      if state <> $
      {
         Send(First(state),@Delete);
         SetFirst(state, $);
      }

      return;
   }

   EndEnchantment(who = $, state=$)
   {
      Post(self,@RemoveEnchantmentEffects,#who=who,#state=state);

      return;
   }

   BreakTrance(who = $, state = $)
   {
      // If caster runs out of mana or loses trance, spell ends.
      Send(who,@RemoveEnchantment,#what=self,#state=state);

      propagate;
   }

   StartPeriodicEnchantment(who = $, state = $)
   {
      // If caster runs out of mana or loses trance, spell ends.
      if Send(who,@GetMana) < viManaDrain * 2
      {
         Send(who,@StartEnchantment,#what=self,#time=viDrainTime,
               #state=state,#addicon=FALSE,#lastcall=TRUE);
      }
      else
      {
         Send(who,@StartEnchantment,#what=self,#time=viDrainTime,
               #state=state,#addicon=FALSE,#lastcall=FALSE);
      }

      Send(who,@LoseMana,#amount=viManaDrain);

      return;
   }

   SetSpellPlayerFlag(who=$, state=$)
   {
      Send(who,@SetTranceFlag);
      Send(who,@SetPlayerFlag,#flag=PFLAG_ANONYMOUS,#value=TRUE);

      return;
   }

   //// Stuff we handle to be a defense modifier.

   ModifyDefensePower(who = $, what = $, defense_power = 0)
   {
      local lState, iSpellpower;

      lState = Send(who,@GetEnchantedState,#what=self);

      if lState <> $
      {
         iSpellpower = Nth(lState,2);
      }
      else
      {
         Send(self,@EndEnchantment,#who=who,#state=lState);
         
         return defense_power;
      }

      return (defense_power + (3 * iSpellpower));
   }

   ModifyDefenseDamage(who = $, what = $, damage = $)
   {
      return damage;
   }

   DefendingHit(who = $, what = $)
   {
      return;
   }

   //// Stuff we handle for illusions.

   IllusionGetIcon(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);

      if oBody = $
      {
         return object_icon_rsc;
      }

      return Send(oBody,@GetIcon);
   }

   IllusionSendAnimation(who = $,animation = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         AddPacket(1,ANIMATE_NONE,2,1);
      }
      else
      {
         Send(oBody,@SendAnimation);
      }

      return;
   }

   IllusionSendMoveAnimation(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         AddPacket(1,ANIMATE_NONE,2,1);
      }
      else
      {
         Send(oBody,@SendAnimation);
      }

      return;
   }

   IllusionSendOverlays(who = $,animation = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         AddPacket(1,0);
      }
      else
      {
         Send(oBody,@SendOverlays);
      }

      return;
   }

   IllusionSendMoveOverlays(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         AddPacket(1,0);
      }
      else
      {
         Send(oBody,@SendOverlays);
      }

      return;
   }

   IllusionGetTemplate(who = $)
   {
      local oState;
   
      if who <> $
      {
         oState = Send(who,@GetEnchantedState,#what=self);
         if oState <> $
         {
            return First(oState);
         }
      }

      return $;
   }

   IllusionShowDesc(who = $, iHitPoint_Percent=$)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         AddPacket(1,0);
      }
      else
      {
         Send(oBody,@ShowDesc);
      }

      return;
   }

   IllusionGetDef(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         return object_article_none_rsc;
      }

      return Send(oBody,@GetDef);
   }

   IllusionGetCapDef(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         return object_article_none_rsc;
      }

      return Send(oBody,@GetCapDef);
   }

   IllusionGetInDef(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         return object_article_none_rsc;
      }

      return Send(oBody,@GetInDef);
   }

   IllusionGetCapInDef(who = $)
   {
      local oBody;

      oBody = Send(self,@IllusionGetTemplate,#who=who);
      if oBody = $
      {
         return object_article_none_rsc;
      }

      return Send(oBody,@GetCapInDef);
   }

   IllusionGetHisHer()
   {
      return object_its;
   }

   IllusionGetLightingInformation()
   {
      // No lighting information
      return 0;
   }

   GetPotionClass()
   {
      return &FeignDeathPotion;
   }

end
////////////////////////////////////////////////////////////////////////////////
