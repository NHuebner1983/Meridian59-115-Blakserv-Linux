// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
TouchAttackSpell is PersonalEnchantment

// A touch attack spell is essentially a 'combat stroke' enchantment.

constants:

   include blakston.khd

   HITVALUE_MAX = 100

resources:

   include touchatk.lkod

   TouchAttackSpell_name_rsc = "Touch Spell"
   TouchAttackSpell_icon_rsc = light.bgf
   TouchAttackSpell_desc_rsc = "This is a touch spell that does damage."

   TouchAttack_Succeed_rsc = \
      "You have cast a touch attack on another player.  This is a bug.  "
      "Please report it.  Have a nice day."

   touchattack_enchantment_rsc = \
      "\n\nYour current %s enchantment will deal %i - %i base %s damage."

   TouchAttack_missed1_sound = swswish1.ogg
   TouchAttack_missed2_sound = swswish2.ogg
   TouchAttack_missed3_sound = swswish3.ogg

   TouchAttack_hit_sound = patk.ogg

classvars:

   vrName = TouchAttackSpell_name_rsc
   vrIcon = TouchAttackSpell_icon_rsc
   vrDesc = TouchAttackSpell_desc_rsc

   vrMiss_sound = $
   
   vrMissed_message_attacker = $
   vrMissed_message_defender = $

   vrAlreadyEnchanted = PersonalEnchantment_already_enchanted_rsc
   vrEnchantment_On = PersonalEnchantment_On_rsc
   vrEnchantment_Off = PersonalEnchantment_Off_rsc
   vrSuccess = PersonalEnchantment_Success_rsc
   vrSucceed = TouchAttack_Succeed_rsc

   vrPlayer_hit_something = $
   vrPlayer_was_hit = $
   vrPlayer_killed_something = $
   vrPlayer_was_killed = $

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSchool = 0
   viSpell_num = 0
   viStroke = 0

   viSpellExertion = 1

   viChance_To_Increase = 10
   viMeditate_ratio = 20

   // Touch spells typically do good damage but are unaffected by typical weapon
   //  bonuses. These base damages will have proficiency added to them,
   //  and will then be increased by up to 40// depending on the caster's Mysticism.
   viMin_Damage = 4
   viMax_Damage = 8
   
   // Max amount of damage that Punch or 2*Myst can add
   viMaxProficiencyDamage = 5

   // Touch spell range can vary, but are typically good
   viRange = 2 * FINENESS

   // Touch spells are now linked to punch attacks, so make it do punch damage
   //  for default.
   viAttackType = ATCK_WEAP_UNARMED+ATCK_WEAP_PUNCH
   // Touch spells typically DO have a spell type.
   viSpellType = 0          

   viPostCast_time = 1

   // Cannot enchant others with touch attacks.
   vbCanCastOnOthers = FALSE
   
   // The amount of light added to player's screen.
   viEnchantmentLight = 0

properties:

   plPrerequisites = $
   plReagents = $

   // The effectiveness of purge on the target spell as a percentage.
   // 100 will cause purge to remove its entire spellpower, 0 will
   // prevent purge from removing this spell.
   viPurgeFactor = 15

messages:

   ImproveStroke(who=$,target=$)
   {
      Send(self,@ImproveAbility,#who=who,#target=target);
      
      return;
   }

   CanPayCosts(who = $, lTargets = $, iSpellPower = 0)
   {
      propagate;
   }

   EndEnchantment(who = $, report = TRUE, state = 0)
   {
      Send(who,@LoseLight,#amount=viEnchantmentLight);
      
      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CheckWeaponAndDoAnimation(who=$,weapon_used=$,victim=$)
   "Spell does not require a weapon, but a player may use this spell even"
   "if they are armed."
   "Also does the cast animation.  In future, may provide different grfx"
   "for different touch spells."
   {
      Send(who,@DoCast);
      
      return TRUE;
   }

   ToHitImprovers(raw_hitroll=0)
   "A weapon stroke may have IMPROVERS, which may boost the performance of "
   "the stroke.  Example, if a player has renweed, that may boost his thrust "
   "Default, return the hitroll raw."
   {
      return Raw_hitroll; 
   }

   DamageFactors(damage = 0, who = $)
   "Attack spells typically are unaffected by strength, although they may "
   "be affected by other factors."
   {
      local iDamage, iMysticism;

      // Proficiency damage adjusted to high precision
      iDamage = damage + (Send(self,@GetProf,#who=who)+1)*viMaxProficiencyDamage;
      
      // Get myst damage bonus.
      iMysticism = Send(who,@GetMysticism);
      iDamage = ((100+bound(iMysticism-25,0,40))*iDamage)/100;

      return iDamage;
   }

   GetHitsound()
   {
      return touchattack_hit_sound;
   }

   //// This section for combat

   //// These are the weapon functions

   // What's the stroke number?
   // Touch attacks are "backwards", they use Punch as the proficiency, or the
   //  secondary bonus to hit.  Added bonus for "pure" mages, can substitute
   //  2 * Mysticism instead of punch. 
   GetProf(who=$)
   {
      local iProf, iMysticism;

      iProf = Send(who,@GetSkillAbility,#skill_num=SKID_PUNCH);
      Send(who,@FlipSkillAtrophyFlag,#SKID=SKID_PUNCH);
      
      iMysticism = (Send(who,@GetMysticism)*2);
      
      if iProf < iMysticism
      {
         iProf = iMysticism;
      }

      return bound(iProf,1,99);
   }

   GetStroke(who=$)
   {
      // Touch attacks are "backwards", they use the specialized spell as the
      //  stroke, or primary bonus to hit.
      Send(who,@FlipSpellAtrophyFlag,#SID=viSpell_num);

      return Send(who,@GetSpellAbility,#spell_num=viSpell_num);
   }

   GetAttackType(weapon_used=$)
   {
      return viAttackType;
   }

   GetAttackSpell(weapon_used=$)
   {
      return viSpellType;
   }

   GetParryAbility()
   {
      // Touch attacks have no parrying ability.
      return 0;
   }

   //// These are the stroke functions

   // Can this touch attack be blocked?
   CanBlock()
   {
      return TRUE;
   }

   // Can this touch attack be parried?
   CanParry()
   {
      return TRUE;
   }

   // Can this touch attack be blocked?
   CanDodge()
   {
      return TRUE;
   }

   // This returns the "weapon" name for combat attacks.
   GetAttackName()
   {
      return vrName;
   }

   GetRange(weapon_used = $)
   "This returns the range of the spell.  Usually, this hovers around 2-3."
   {
      return viRange;
   }

   FindMinDamage(who=$)
   {
      local damage, iAbility;

      damage = viMin_Damage;
      iAbility = Send(who,@GetSpellAbility,#spell_num=viSpell_num);
      damage = (damage * (iAbility+1));
      damage = Send(self,@DamageFactors,#damage=damage,#who=who)/100;
      
      return bound(damage,0,$);
   }
   
   FindMaxDamage(who=$)
   {
      local damage, iAbility;

      damage = viMax_Damage;
      iAbility = Send(who,@GetSpellAbility,#spell_num=viSpell_num);
      damage = (damage * (iAbility+1));
      damage = Send(self,@DamageFactors,#damage=damage,#who=who)/100;
      
      return bound(damage,0,$);
   }

   FindDamage(weapon_used=$,who=$,victim=$)
   "Damage for attack spells is determined largely by expertise in the spell."
   {
      local damage, iAbility;

      // Base weapon damage adjusted to high precision
      damage = random(viMin_Damage*100,viMax_damage*100);

      // Rather than an active spellpower check, use the player's
      // ability in the spell. This makes touch spells function
      // more like a stroke, and gives them immunity to anti-magic effects.
      iAbility = Send(who,@GetSpellAbility,#spell_num=viSpell_num);
      
      // Factor in the person's ability with the spell
      // It's alright if damage here is low.
      // Most players will get proficiency damage from punch or 2*Mysticism.
      damage = (damage * (iAbility+1)) / 100;

      // Myst boosts base damage
      damage = Send(self,@DamageFactors,#damage=damage,#who=who,
                    #victim=victim);
      
      return bound(damage,0,$);
   }

   PlayerWasHitMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise "
   "player.kod will just choose a default - which is true for most weapon-"
   "based combat strokes (but not true for most punch strokes or touch spells."
   {
      if vrPlayer_was_hit = $
      {
         return FALSE;
      }

      Send(who,@MsgSendUser,#message_rsc=vrPlayer_was_hit,
           #parm1=Send(attacker,@GetCapDef),#parm2=Send(attacker,@GetName));
           
      return TRUE;
   }

   PlayerHitSomethingMsg(who=$,victim=$,damage=$,color_rsc=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise "
   "player.kod will just choose a default - which is true for most weapon-"
   "based combat strokes (but not true for most punch strokes or touch spells."
   {
      if vrPlayer_hit_something = $
      {
         return FALSE;
      }
       
      Send(who,@MsgSendUser,#message_rsc=vrPlayer_hit_something,
           #parm1=color_rsc,#parm2=Send(victim,@GetDef),
           #parm3=Send(victim,@GetName));
          
      return TRUE;
   }

   SendMissMessageToAttacker(who=$,victim=$,color_rsc=$)
   {
      local iRandom, rSound;
      
      // 'miss' sound
      if vrMiss_Sound = $
      {
         // Play a random miss sound.
         iRandom = random(1,3);
         if iRandom = 1
         {
            rSound = TouchAttack_missed1_sound;
         }
         else
         {
            if iRandom = 2
            {
               rSound = TouchAttack_missed2_sound;
            }
            else
            {
               rSound = TouchAttack_missed3_sound;
            }
         }
      }
      else
      {
         rSound = vrMiss_Sound;
      }
      
      Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=rSound);
      
      // Text messages
      if vrMissed_Message_Attacker <> $
      {
         Send(who,@MsgSendUser,#message_rsc=vrMissed_Message_Attacker,
              #parm1=color_rsc,#parm2=vrName,#parm3=Send(victim,@GetDef),
              #parm4=Send(victim,@GetName));
              
         return TRUE;
      }
      
      return;
   }

   SendMissMessageToDefender(who=$,attacker=$)
   {
      if vrMissed_message_Defender <> $
      {
         Send(who,@MsgSendUser,#message_rsc=vrMissed_Message_Defender,
              #parm1=Send(attacker,@GetCapDef),#parm2=Send(attacker,@GetName),
              #parm3=vrName);
              
         return TRUE;
      }

      return;
   }

   PlayerKilledSomethingMsg(who=$,victim=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will offer the default 'You killed the whatever' message."
   {
       if vrPlayer_killed_Something = $
       {
         return FALSE ;
       }
       
       Send(who,@MsgSendUser,#message_rsc=vrPlayer_killed_something,
            #parm1=Send(victim,@GetCapDef),#parm2=Send(victim,@GetName));
                
       return TRUE;
   }

   PlayerWasKilledMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will just choose a default - as it does for most strokes."
   {
       if vrPlayer_was_hit = $
       {
         return FALSE ;
       }
       
       Send(who,@MsgSendUser,#message_rsc=vrPlayer_was_killed,
            #parm1=Send(attacker,@GetDef),#parm2=Send(attacker,@GetName));
            
       return TRUE;
   }

   //// Enchantment support

   GetDuration(iSpellpower=$)
   {
      local iDuration;

      // Up to 16.5 minutes
      iDuration = iSpellPower * 10 * 1000; 

      // Min 2 minutes
      return Bound(iDuration,120000,$);
   }

   GetStateValue(iSpellpower=$,target=$)
   {
      // Remove other touch attack spells.  Won't remove self, because
      // we've checked for re-enchantment in CanPayCosts.
      Send(target,@RemoveEnchantmentClass,#class=&TouchAttackSpell);
      Send(target,@GainLight,#amount=viEnchantmentLight);

      return iSpellpower;
   }

   SuccessChance(who=$)
   "Allow mages to switch elements despite antagonistic conditions."
   {
      return TRUE;
   }

   EffectDesc(who=$)
   {
      AddPacket(4, touchattack_enchantment_rsc, 4, Send(self,@GetName),
                4, Send(self,@FindMinDamage,#who=who),
                4, Send(self,@FindMaxDamage,#who=who),
                4, Send(SYS,@GetSpellDamageTypeName,
                        #type=(viSpellType & ~ATCK_SPELL_ALL)));

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
