// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.

// IMPORTANT NOTE: If you change the spell purge you might destroy the
// LogSafePenaltyEnable-function as this function calls DoPurge here

///////////////////////////////////////////////////////////////////////////////
Purge is Spell

constants:

   include blakston.khd

resources:

   include purge.lkod

   Purge_name_rsc = "purge"
   Purge_icon_rsc = ipurge.bgf
   Purge_desc_rsc = \
      "Reduces the effectiveness of the target's helpful personal enchantments.  "
      "With enough power, it can even remove the enchantment completely.  "
      "Requires five emeralds and two purple mushrooms to cast."

   Purge_on = \
      "A bright, holy light is trying to burn away your beneficial "
      "enchantments."
   Purge_not_enchanted = "%s%s is not affected by any helpful magical "
      "energies."
   Purge_spell_intro = \
      "Shal'ille Lv. 5: Removes helpful personal enchantments on the target."

classvars:

   vrName = Purge_name_rsc
   vrIcon = Purge_icon_rsc
   vrDesc = Purge_desc_rsc

   viSpell_num = SID_PURGE
   viSchool = SS_SHALILLE
   viSpell_level = 5
   viMana = 15
   viChance_To_Increase = 10
   viMeditate_ratio = 80

   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE

   viFlash = FLASH_BAD

properties:

   pbPurgeNoRemove = FALSE
   pbRemoveWithPercentChance = FALSE

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Emerald,5],plReagents);
      plReagents = Cons([&PurpleMushroom,2],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local oTarget, i, lEnchantment, bHasEnchantment, oSpell;

      bHasEnchantment = FALSE;

      // Can cast spell if the 1 target item is a user
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&User)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,
                 #parm1=vrName,#parm2=Send(oTarget,@GetDef),
                 #parm3=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      // The target must have an enchantment
      lEnchantment = Send(oTarget,@GetEnchantmentList);

      if lEnchantment <> $
      {
         foreach i in lEnchantment
         {
            oSpell = Nth(i,2);
            if Send(oSpell,@IsPersonalEnchantment)
               AND Send(oSpell,@CanBeRemovedByPlayer)
               AND NOT Send(oSpell,@IsHarmful)
            {
               bHasEnchantment = TRUE;

               break;
            }
         }
      }

      if NOT bHasEnchantment
      {
         Send(who,@MsgSendUser,#message_rsc=Purge_not_enchanted,
               #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget, lInfo, oSpell, lList, lEnchantmentList;

      oTarget = First(lTargets);
      if oTarget <> who
      {
         Send(who,@MsgSendUser,#message_rsc=spell_cast_on_target,
               #parm1=Send(self,@GetName),#parm2=Send(oTarget,@GetDef),
               #parm3=Send(oTarget,@GetName));
      }

      Send(oTarget,@MsgSendUser,#message_rsc=Purge_on);

      if IsClass(who,&DM)
         AND Send(who,@PlayerIsImmortal)
      {
         // If they're immortal, let them clear everything.
         iSpellPower = $;
      }

      Send(self,@DoPurge,#who=oTarget,#iSpellPower=iSpellPower);

      propagate;
   }

   // Override this to allow for non-outlaw self-casting of spell on Sacred
   // Haven.
   GetAttackTargets(who=$,lTargets=$,report=TRUE)
   "Returns a list of targets the caster can attack."
   {
      // If we're on Sacred Haven and we target ourselves, go for it.
      if NOT Send(SYS,@IsPKAllowed)
         AND lTargets <> $ AND First(lTargets) = who
      {
         return [who];
      }

      propagate;
   }

   DoPurge(who=$,iSpellPower=$)
   "Recasts the target's PEs at the new spellpower, or removes them "
   "at/below 0 spellpower. Returns TRUE if any buffs were lost."
   {
      local i, lEnchantments, iTime, oSpell, iCastPower, iNewPower,
            bRemovedSomething, iRemove, tTimer;

      // Can't do this to nobody or to non-players.
      if who = $
         OR NOT IsClass(who,&User)
      {
         return FALSE;
      }

      // A spellpower of $ means that we want to remove it all.
      if iSpellPower = $
      {
         Send(who,@RemoveAllPersonalEnchantments);

         return TRUE;
      }

      bRemovedSomething = FALSE;

      // User's enchantment list might change, so get it now.
      lEnchantments = Send(who,@GetEnchantmentList);

      foreach i in lEnchantments
      {
         oSpell = Nth(i,2);

         if NOT IsClass(oSpell,&PersonalEnchantment)
            OR NOT Send(oSpell,@CanBeRemovedByPlayer)
            OR Send(oSpell,@IsHarmful)
         {
            continue;
         }

         tTimer = First(i);

         // We either have a timer or $ for the timer. If we have something
         // else, log it and skip the spell (i.e. don't try to start a new
         // enchantment with a timer if we didn't have one or $ already).
         if (tTimer = $)
         {
            iTime = tTimer;
         }
         else if (IsTimer(tTimer))
         {
            iTime = GetTimeRemaining(tTimer);
         }
         else
         {
            Debug("Purge tried to modify spell",Send(oSpell,@GetName)," with ",
                  tTimer," for timer! Skipping this spell.");

            continue;
         }

         // Get the cast power from the target, as it checks the right
         // location in the list.
         iCastPower = Send(who,@GetCastPower,#what=oSpell);

         // Calculate the amount to remove.
         iRemove = (iSpellPower * Send(oSpell,@GetPurgeFactor)) / 100;

         // Skip this spell if we aren't removing any spellpower.
         if (iRemove <= 0
            AND NOT pbRemoveWithPercentChance)
         {
            continue;
         }

         // Calculate the new spellpower and time of the enchantment.
         iNewPower = iCastPower - iRemove;

         // If purge removing buffs is turned off, bind the new spellpower at 1
         if pbPurgeNoRemove
            OR pbRemoveWithPercentChance
         {
            iNewPower = Bound(iNewPower,1,99);
         }
         else
         {
            iNewPower = Bound(iNewPower,$,99);
         }

         // Start the new enchantment with the time left and the new state,
         // but only if iNewPower is greater than 0.
         if iNewPower > 0
         {
            // If we have percent chance removal instead, we either remove
            // the buff or we don't.
            if pbRemoveWithPercentChance
            {
               if ((iSpellPower * Send(oSpell,@GetPurgeFactor))/100) > Random(1,100)
               {
                  Send(who,@RemoveEnchantment,#what=oSpell,#report=TRUE);
                  bRemovedSomething = TRUE;
               }

               continue;
            }

            // Remove the current enchantment, but don't report.
            Send(who,@RemoveEnchantment,#what=oSpell,#report=FALSE);

            // Restart the enchantment with the same time, but new spellpower.
            Send(who,@StartEnchantment,#what=oSpell,#iSpellPower=iNewPower,
                  #state=(Send(oSpell,@GetStateValue,#who=who,
                              #iSpellPower=iNewPower,#target=who)),
                  #time=iTime,#lastcall=Send(oSpell,@GetLastCall),
                  #addIcon=Send(oSpell,@GetAddIcon));

            // We had an effect, so we still report TRUE.
            bRemovedSomething = TRUE;
         }
         else
         {
            // Remove the current enchantment and report.
            Send(who,@RemoveEnchantment,#what=oSpell,#report=TRUE);
            bRemovedSomething = TRUE;
         }
      }

      return bRemovedSomething;
   }

end
///////////////////////////////////////////////////////////////////////////////
