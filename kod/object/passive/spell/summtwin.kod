////////////////////////////////////////////////////////////////////////////////
SummonEvilTwin is Spell

constants:

   include blakston.khd

resources:

   include summtwin.lkod

   summonEvilTwin_name_rsc = "evil twin"
   summonEvilTwin_icon_rsc = ievltwin.bgf
   summonEvilTwin_desc_rsc = \
      "Summons the darker side of an adventurer to attack them.  Note that "
      "you are responsible for any of your evil twins' actions, and that they "
      "are notoriously hard to control.  "
      "Requires two vials of solagh and two web moss to cast."

   summonEvilTwin_cast_rsc = \
      "An evil twin mysteriously appears beside your target."
   summonEvilTwin_failed_rsc = \
      "There is no room for an evil twin here."
   summonEvilTwin_bad_target = "You can't cast evil twin on %s%s."
   summonEvilTwin_no_self = \
      "You decide you really don't want to summon your evil against yourself."
   summonEvilTwin_only_one = \
      "%s is already being pursued by an evil twin."

   summonEvilTwin_sound = rmirrimg.ogg

classvars:

   vrName = summonEvilTwin_name_rsc
   vrIcon = summonEvilTwin_icon_rsc
   vrDesc = summonEvilTwin_desc_rsc

   viSpell_num = SID_EVIL_TWIN
   viSchool = SS_RIIJA
   viSpell_level = 5
   viMana = 10
   viMeditate_ratio = 50

   viSpellExertion = 4
   viCast_time = 500
   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE
   viFlash = FLASH_BAD

   vrSucceed_wav = summonEvilTwin_sound

properties:


messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Solagh,2], plReagents);
      plReagents = Cons([&WebMoss,2], plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local oTarget;

      oTarget = First(lTargets);

      // Only cast on non-self battlers.
      if who = oTarget
      {
         Send(who,@MsgSendUser,#message_rsc=summonEvilTwin_no_self);

         return FALSE;
      }

      if NOT IsClass(oTarget,&Battler)
         OR Send(oTarget,@IsIllusion)
         OR (IsClass(oTarget,&Monster)
               AND Send(oTarget,@CanEvilTwin)=FALSE)
      {
         // Lich, lupogg king, evil twins, reflections and revenants 
         // all not valid targets
         if IsClass(who,&Player)
         {
            Send(who,@MsgSendUser,#message_rsc=summonEvilTwin_bad_target,
                  #parm1=Send(oTarget,@GetDef),
                  #parm2=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      // Check for evil twin already following target.
      if Send(oTarget,@HasEvilTwin)
      {
         if IsClass(who,&Player)
         {
            Send(who,@MsgSendUser,#message_rsc=summonEvilTwin_only_one,
                  #parm1=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      if IsClass(oTarget,&Player)
      {
         if Send(oTarget,@CheckPlayerFlag,#flag=PFLAG_MORPHED)
         {
            // Morph protects against evil twin
            if IsClass(who,&Player)
            {
               Send(who,@MsgSendUser,#message_rsc=summonEvilTwin_bad_target,
                     #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));
            }

            return FALSE;
         }
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local i, j, oTwin, oRoom, iRow, iCol, iFine_Row, iFine_Col;

      // Monster casters can rarely end up with $ target.
      if lTargets = $
      {
         return;
      }

      Send(who,@MsgSendUser,#message_rsc=summonEvilTwin_cast_rsc);

      Send(self,@SpawnEvilTwin,#oTarget=First(lTargets),#who=who,
            #iSpellPower=iSpellPower);

      propagate;
   }

   SpawnEvilTwin(who = $, oTarget=$, iSpellPower=SPELLPOWER_MAXIMUM)
   "Creates the ET and adds the info to caster/target. Tells the ET to "
   "place itself."
   {
      local oTwin;

      if (oTarget = $
         OR who = $)
      {
         return;
      }

      oTwin = Create(&EvilTwin,#iSpellpower=iSpellpower,#oMaster=who,
                  #oTarget=oTarget);

      // Add this ET to the target's evil twin property, which keeps
      // track of the current ET pursuing them.
      Send(oTarget,@AddEvilTwin,#what=oTwin);

      // Also add this ET to the list of ETs created by the caster.
      // If the caster dies or is otherwise deleted, we delete any
      // ETs they've created.
      Send(who,@EvilTwinsCreated,#what=oTwin);

      Send(oTwin,@PlaceEvilTwin,#who=oTarget);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
