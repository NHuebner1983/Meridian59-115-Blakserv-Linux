// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Blind is Debuff

constants:

   include blakston.khd

resources:

   include blind.lkod

   blind_name_rsc = "blind"
   blind_icon_rsc = iblind.bgf
   blind_desc_rsc = \
      "The magical force of Qor burns the target's eyes, "
      "taking away all sight for a brief period.  "
      "Requires two entroot berries and a purple mushroom to cast."
   blind_caster = "%s%s is now blind."
   blind_already_enchanted = "%s%s is already blind."
   blind_on = \
      "Something burns in your eyes, causing excruciating pain and a loss "
      "of vision."
   blind_off = "Your eyes begin to function again."

   blind_sound = qblind.ogg

classvars:

   vrName = blind_name_rsc
   vrIcon = blind_icon_rsc
   vrDesc = blind_desc_rsc

   vrAlreadyEnchanted = blind_already_enchanted
   vrEnchantment_On = blind_on
   vrEnchantment_Off = blind_off
   vrSuccess = blind_caster

   viSpell_num = SID_BLIND
   viSchool = SS_QOR
   viSpell_level = 5
   viMana = 15
   viChance_To_Increase = 15
   viMeditate_ratio = 50

   viSpellExertion = 3

   vrSucceed_wav = blind_sound

properties:

   piBaseDuration = 4000 // 103 value 5000
   piSpellPowerModifier = 60 // 103 value 151
   piDeviation = 10 // 103 value 50//

   // Min and max values for Blind duration.
   piMinBlind = 4000 // 103 value 3000
   piMaxBlind = 12000// 103 value 20000

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&EntrootBerry,2],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   SetSpellPlayerFlag(who = $)
   {
      if NOT (IsClass(who,&DM)
         AND Send(who,@PlayerIsImmortal))
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_FIGHT,#value=TRUE);
         Send(who,@SetPlayerFlag,#flag=PFLAG_NO_MAGIC,#value=TRUE);
      }

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      // Spell effects
      Send(self,@DoSpell,#what=who,#oTarget=oTarget,
            #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));
      
      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0)
   {
      local oSpell;

      oSpell = Send(SYS,@FindSpellByNum,#NUM=SID_EAGLE_EYES);
      if Send(oTarget,@IsEnchanted,#what=oSpell)
      {
         iDuration = Send(oSpell,@DoEagleEyes,#oCaster=what,#oTarget=oTarget,
                          #iDuration=iDuration);
         if iDuration = $
         {
            // Resisted completely.
            return;
         }
      }

      // Re-check the bound on duration.
      iDuration = Bound(iDuration,piMinBlind,piMaxBlind);

      if IsClass(oTarget,&User)
      {
         if NOT (IsClass(oTarget,&DM) AND Send(oTarget,@PlayerIsImmortal))
         {
            Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantment_On);
            Send(oTarget,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_ON);
         }
      }
      else
      {
         // class is Monster
         Post(oTarget,@ResetBehaviorFlags);
      }

      Send(what,@MsgSendUser,#message_rsc=vrSuccess,
            #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = piBaseDuration + iSpellPower * piSpellPowerModifier;
      iDuration = Random(iDuration * (100 - piDeviation) / 100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE)
   {
      if IsClass(who,&User)
      {
         Send(who,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_OFF);
         if report
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantment_Off);
         }
      }
      else
      {
         // Class is monster.
         // This has to be done AFTER the enchantment is gone from the
         // monster's ench list - post it.
         Post(who,@ResetBehaviorFlags);
      }

      return;
   }

   RestartEnchantmentEffect(who=$,state=$)
   {
      Send(who,@MsgSendUser,#message_rsc=vrEnchantment_On);
      Send(who,@EffectSendUser,#what=self,#effect=EFFECT_BLIND_ON);

      return;
   }

   ModifyMonsterBehavior(mob=$)
   {
      Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_RANDOM,#value=TRUE);
      Send(mob,@SetBehaviorFlag,#flag=AI_NOFIGHT,#value=TRUE);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
