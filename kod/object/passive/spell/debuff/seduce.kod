// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Seduce is Debuff

constants:

   include blakston.khd

resources:

   include seduce.lkod

   seduce_name_rsc = "seduce"
   seduce_icon_rsc = iseduce.bgf
   seduce_desc_rsc = \
      "You worm your way into the mind of a weak-willed creature, "
      "in the hope that it will follow you and fight for you "
      "if you are attacked.  "
      "Requires one web moss and two kriipa claws."

   seduce_caster = "%s%s has been seduced."
   seduce_target_on = "You make your move on %s%s."
   seduce_player_second = "%s%s tries %s best to seduce you."
   seduce_player_third = "%s%s attempts a seduction on %s%s."
   seduce_already_enchanted = "%s%s is already at your beck and call."
   seduce_fail_spell = "Your feeble attempt to charm %s%s fails."
   seduce_target_off = "You are no longer seduced."
   seduce_cast_self = "You cannot seduce yourself!"
   seduce_stolen = "%s%s has seduced your %s!"
   seduce_too_many = "You are unable to control another minion."

   seduce_sound = rperappr.ogg

classvars:

   vrName = seduce_name_rsc
   vrIcon = seduce_icon_rsc
   vrDesc = seduce_desc_rsc

   vrAlreadyEnchanted = seduce_already_enchanted
   vrEnchantment_On = seduce_target_on
   vrEnchantment_Off = seduce_target_off
   vrSuccess = seduce_caster
   vrNoSelfTarget = seduce_cast_self

   viSpell_num = SID_SEDUCE
   viSchool = SS_RIIJA
   viSpell_level = 6
   viMana = 18
   viChance_To_Increase = 15
   viMeditate_ratio = 100

   viSpellExertion = 3

   vrSucceed_wav = seduce_sound

properties:

   piBaseDuration = 30000
   piSpellPowerModifier = 300
   piDeviation = 10

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&WebMoss,1],plReagents);
      plReagents = Cons([&KriipaClaw,2],plReagents);

      return;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local oMaster, oTarget;

      oTarget = First(lTargets);

      if NOT IsClass(oTarget,&Monster)
         OR (Send(oTarget,@GetAttributes) & MOB_NOMOVE)
      {
         if NOT bItemCast
         {
            Send(who,@MsgSendUser,#message_rsc=spell_bad_target,#parm1=vrName,
                  #parm2=Send(oTarget,@GetDef),#parm3=Send(oTarget,@GetName));
         }

         return FALSE;
      }

      oMaster = Send(oTarget,@GetMaster);

      // We check here if we're charming a minion of another player
      // which is an aggressive act.

      if oMaster <> $
      {
         if IsClass(who,&Player)
            AND NOT Send(Send(who,@GetOwner),@IsArena)
            AND NOT Send(who,@CheckStatusAndSafety,#victim=oMaster,
                        #report=TRUE,#minion=TRUE)
         {
            return FALSE;
         }

         if oMaster = who
         {
            Send(who,@MsgSendUser,#message_rsc=vrAlreadyEnchanted,
                  #parm1=Send(oTarget,@GetCapDef),
                  #parm2=Send(oTarget,@GetName));

            return FALSE;
         }
      }

      if IsClass(who,&Player)
      {
         if Send(who,@CheckBattlerMinionCount)
               >= Send(SETTINGS_OBJECT,@GetPlayerMinionLimit)
         {
            Send(who,@MsgSendUser,#message_rsc=seduce_too_many);

            return FALSE;
         }
      }
      else
      {
         if Send(who,@CheckBattlerMinionCount)
               >= Send(SETTINGS_OBJECT,@GetPlayerMinionLimit)
         {
            return FALSE;
         }
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      // Spell effects
      Send(self,@DoSpell,#what=who,#oTarget=oTarget,#iSpellPower=iSpellPower,
            #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));

      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0,iSpellPower=0)
   {
      local iRoll, oMaster;

      if IsClass(what,&Monster)
      {
         // If a monster successfully casts this spell, we assume
         // they're allowed to have whatever they're casting on
         // as a minion.

         oMaster = Send(oTarget,@GetMaster);
         if oMaster <> $
         {
            Send(oMaster,@MsgSendUser,#message_rsc=seduce_stolen,
                  #parm1=Send(what,@GetCapDef),#parm2=Send(what,@GetName),
                  #parm3=Send(oTarget,@GetName));
            // Since we don't necessarily want it going after the old master,
            // use RemoveEnchantment instead of EndEnchantment
            Send(oTarget,@RemoveEnchantment,#what=self);
         }

         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=what);
         Send(oTarget,@SetMaster,#oMaster=what);

         propagate;
      }

      // We determine our chances of success by adding together the caster's
      // HP/2, intellect and spellpower, and if this is larger than the
      // target's level, we succeed. Can essentially always seduce low level
      // monsters, but will usually fail against high level mobs.

      iRoll = (Send(what,@GetBaseMaxHealth)/3);       // 0-50
      iRoll = (iRoll + Send(what,@GetIntellect));     // 0-50
      iRoll = (iRoll + iSpellPower/2);                // 0-50

      // Put an upper bound on our roll of caster HP+5, so we don't have lower
      // HP casters running around with a thrasher or similar.
      iRoll = Bound(iRoll,0,(Send(what,@GetBaseMaxHealth)+5));

      // If our roll number is larger than the target's max hitpoints,
      // we can charm it.
      if iRoll > Send(oTarget,@GetMaxHitPoints)
         OR (IsClass(what,&DM)
            AND Send(what,@PlayerIsImmortal))
      {
         // Tell the caster the spell is happening on a monster.
         Send(what,@MsgSendUser,#message_rsc=vrSuccess,
               #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));

         // Do the work on the monster. If we seduced this from another
         // player, let them know. We checked for ourselves being the
         // master in CanPayCosts
         oMaster = Send(oTarget,@GetMaster);
         if oMaster <> $
         {
            Send(oMaster,@MsgSendUser,#message_rsc=seduce_stolen,
                  #parm1=Send(what,@GetCapDef),#parm2=Send(what,@GetName),
                  #parm3=Send(oTarget,@GetName));
            // Since we don't necessarily want it going after the old master,
            // use RemoveEnchantment instead of EndEnchantment
            Send(oMaster,@RemoveControlledMinion,#what=oTarget);
            Send(oTarget,@RemoveEnchantment,#what=self);
         }

         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=what);
         Send(oTarget,@SetMaster,#oMaster=what);
      }
      else
      {
         Send(what,@MsgSendUser,#message_rsc=seduce_fail_spell,
               #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

         // If we failed by a large margin, the monster wants to kill us now.
         // Also a sneaky form of long-distance bait (by design).
         if iRoll < (Send(oTarget,@GetMaxHitPoints)/4)
         {
            // oops!  since you failed, now they really hate you!
            Send(oTarget,@TargetSwitch,#what=what,
                  #iHatred=Bound(Send(what,@GetBaseMaxHealth),25,100));
            Send(oTarget,@EnterStateChase,#target=what,#actnow=TRUE);
         }
      }

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      // Duration calculation now uses class properties, modifiable in game
      // By default, base duration 30000ms, total time 30-60 sec using 300x
      // spellpower multiplier, with the final duration 90-100// max

      iDuration = (piBaseDuration + (iSpellPower+1)*piSpellPowerModifier);
      iDuration = Random(iDuration*(100-piDeviation)/100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE,state=$)
   {
      local cClass, oRoom, oTargetRoom, oTarget;

      if (Send(who,@GetOwner) <> $
         AND state <> $
         AND Send(who,@GetMaster) = state)
      {
         oTarget = state;
      }

      Send(who,@SetMaster,#oMaster=$);

      // Reflection/ET have their own specific behavior after seduce expires.
      cClass = GetClass(who);
      if (oTarget = $
         OR cClass = &Reflection
         OR cClass = &EvilTwin)
      {
         return;
      }

      // Mobs don't like being charmed, so it now wants to kill the caster.
      if (oTarget <> $
         AND NOT IsClass(oTarget,&DM))
      {
         oRoom = Send(who,@GetOwner);
         oTargetRoom = Send(oTarget,@GetOwner);

         if (oRoom <> $
            AND oTargetRoom <> $
            AND oRoom = oTargetRoom)
         {
            Send(who,@TargetSwitch,#what=oTarget,#iHatred=150);
            Send(who,@EnterStateChase);
         }
      }

      return;
   }

   ModifyMonsterBehavior(mob=$)
   {
      if (Send(mob,@GetMaster) <> $)
      {
         Send(mob,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,#value=TRUE);
         Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_AGGRESSIVE,#value=FALSE);
         Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_NEWBIESAFE);
         Send(mob,@SetBehaviorFlag,#flag=AI_FIGHT_MONSTERS);
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
