// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ForgetSpell is Debuff

constants:

   include blakston.khd

resources:

   include forget.lkod

   forgetspell_name_rsc = "forget"
   forgetspell_icon_rsc = iforget.bgf
   forgetspell_desc_rsc = \
      "Causes the victim to forget his or her own abilities.  "
      "Requires one firesand and two uncut seraphym to cast."

   forgetspell_already_enchanted = \
      "You can't seem to make %s%s any more forgetful."

   forgetspell_on = "The art of %s slips from your mind."
   forgetspell_off = \
      "You suddenly recall what it was that you had forgotten."
   forgetspell_caster = \
      "You glare at %s%s and they appear momentarily confused."
   forgetspell_cast_self = \
      "It occurs to you that casting forget on yourself may cause you to "
       "forget forgetting what you had forgotten, and thus you might forget "
       "not forgetting all you had forgotten when the forget spell leaves "
       "you, and so you forget about it."

   forgetspell_caster_failed = \
      "%s%s is too stupid to make any stupider!"

   forgetspell_sound = rforget.ogg

classvars:

   vrSucceed_wav = forgetspell_sound
   vrName = forgetspell_name_rsc
   vrIcon = forgetspell_icon_rsc
   vrDesc = forgetspell_desc_rsc

   vrAlreadyEnchanted = forgetspell_already_enchanted
   vrEnchantment_On = forgetspell_on
   vrEnchantment_Off = forgetspell_off
   vrSuccess = forgetspell_caster
   vrNoSelfTarget = forgetspell_cast_self

   viSpell_num = SID_FORGET
   viSpell_level = 2
   viSchool = SS_RIIJA
   viMana = 20
   viSpellExertion = 2
   viCast_time = 0
   viChance_to_increase = 20
   viMeditate_ratio = 40

properties:

   piBaseDuration = 30000
   piSpellPowerModifier = 300
   piDeviation = 10

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&FireSand,1],plReagents);
      plReagents = Cons([&UncutSeraphym,2],plReagents);

      return;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget;

      oTarget = First(lTargets);

      // Spell effects
      Send(self,@DoSpell,#what=who,#oTarget=oTarget,#iSpellPower=iSpellPower,
           #iDuration=Send(self,@GetDuration,#iSpellPower=iSpellPower));

      propagate;
   }

   DoSpell(what=$,oTarget=$,iDuration=0,iSpellPower=0)
   {
      local iPowerLeft,i,lSkills,lSpells,lState,
            iCompound,iAbilityNum,oAbility,iSkillLength,iSpellLength;

      if IsClass(oTarget,&Monster)
      {
         // Lasts quarter duration on mobs, 7.5-15 seconds. 
         // Makes them enter the waiting state, 'forgetting' the target.
         iDuration = iDuration/4;
         Send(oTarget,@EnterStateWait,#delay=iDuration);
         Send(oTarget,@StartEnchantment,#what=self,#time=iDuration);
         Send(what,@MsgSendUser,#message_rsc=forgetspell_caster,
               #parm1=Send(oTarget,@GetDef),
               #parm2=Send(oTarget,@GetName));

         propagate;
      }

      lState = $;
      lSkills = Send(oTarget,@GetSkillList);
      lSpells = Send(oTarget,@GetSpellList);
      iPowerLeft = iSpellPower;

      iSkillLength = Length(lSkills);
      iSpellLength = Length(lSpells);

      if iSkillLength = 0 and iSpellLength = 0
      {
         Send(what,@MsgSendUser,#message_rsc=forgetspell_caster_failed,
               #parm1=Send(oTarget,@GetCapDef),
               #parm2=Send(oTarget,@GetName,#cap=TRUE));

         propagate;
      }

      // There is no protection to keep from forgetting the same spell
      // twice, this isn't a problem, and can make the spell more dynamic
      // in that there is a failure clause, in that a player won't lose as
      // many spells/skills.  It also protects players who don't have many
      // skills from losing all that they do have

      while iPowerLeft > 0
      {
         oAbility = $;
         
         if iSpellLength = 0
         {
            i = 2;
         }
         else
         {
            if iSkillLength = 0
            {
               i = 1;
            }
            else
            {
               i = Random(1,2);
            }
         }

         if i = 1 AND iSpellLength > 0
         {
            i = Random(1,iSpellLength);
            iCompound = Nth(lSpells,i);
            iAbilityNum = Send(oTarget,@DecodeSpellNum,#compound=iCompound);
            oAbility = Send(SYS,@FindSpellByNum,#num=iAbilityNum);
         }
         else
         {
            if iSkillLength > 0
            {
               i = Random(1,iSkillLength);
               iCompound = Nth(lSkills,i);
               iAbilityNum = Send(oTarget,@DecodeSkillNum,#compound=iCompound);
               oAbility = Send(SYS,@FindSkillByNum,#num=iAbilityNum);
            }
         }

         lState = Cons(oAbility,lState);
         iPowerLeft = iPowerLeft - 24;
      }

      foreach i in lState
      {
         if i <> $
         {
            Send(oTarget,@MsgSendUser,#message_rsc=forgetspell_on,
                  #parm1=Send(i,@GetName));
         }
      }

      Send(what,@MsgSendUser,#message_rsc=forgetspell_caster,
            #parm1=Send(oTarget,@GetIndef),
            #parm2=Send(oTarget,@GetName));

      Send(oTarget,@StartEnchantment,#what=self,#time=iDuration,#state=lState);

      propagate;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      // Duration calculation now uses class properties, modifiable in game
      // By default, base duration 30000ms, total time 30-60 sec using 300x
      // spellpower multiplier, with the final duration 90-100// max

      iDuration = (piBaseDuration + (iSpellPower+1)*piSpellPowerModifier);
      iDuration = Random(iDuration*(100-piDeviation)/100,iDuration);

      return iDuration;
   }

   EndEnchantment(who=$,report=TRUE)
   {
      if report
      {
         Send(who,@MsgSendUser,#message_rsc=forgetspell_off);
      }

      return;
   }

   SetSpellPlayerFlag(who=$)
   {
      if IsClass(who,&Player)
      {
         Send(who,@SetPlayerFlag,#flag=PFLAG_FORGOTTEN,#value=TRUE);
      }

      return;
   }

   IsIllusion()
   {
      return TRUE;
   }

   HasForgetEnchantment(who=$,what=$)
   "Determines if the target has the forget enchantment, and if so, checks "
   "if they have forgotten 'what'"
   {
      local  lState, iStateMember;

      lState = $;

      if IsClass(who,&Player)
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_FORGOTTEN)
      {
         return FALSE;
      }

      lState = Send(who,@GetEnchantedState,#what=self);
      if lState = $
      {
         return FALSE;
      }

      foreach iStateMember in lState
      {
         if iStateMember = what
         {
            return TRUE;
         }
      }

      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
