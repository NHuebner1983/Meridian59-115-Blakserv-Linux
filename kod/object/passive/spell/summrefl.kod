// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SummonReflection is Spell

constants:
   include blakston.khd

resources:

   include summrefl.lkod

   summonreflection_cast_rsc = "A mirror image of yourself appears."
   summonreflection_name_rsc = "reflection"
   summonreflection_icon_rsc = ireflect.bgf
   summonreflection_desc_rsc = \
      "Summons a creature which mirrors your own appearance.  Note that you "
      "are responsible for any of your reflections actions, and that they are "
      "notoriously hard to control.  Requires two firesand and two uncut "
      "seraphym to cast."

   summonreflection_failed_rsc = \
      "There is too much summoning magic focused here to summon a reflection."
   
   summonreflection_limit_rsc = \
      "You are already maintaining the maximum number of reflections."

   reflection_cannot_cast_here = \
      "You are not allowed to create a reflection here."

   summonreflection_sound = rmirrimg.ogg

classvars:

   vrName = summonreflection_name_rsc
   vrIcon = summonreflection_icon_rsc
   vrDesc = summonreflection_desc_rsc

   viSpell_num = SID_REFLECTION
   viSchool = SS_RIIJA
   viSpell_level = 5
   viMana = 15
   viMeditate_ratio = 75

   viSpellExertion = 4
   viCast_time = 1000

   vrSucceed_wav = summonreflection_sound

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Firesand,2], plReagents);
      plReagents = Cons([&UncutSeraphym,2],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      // Limit reflections.
      if (Send(self,@CountPlayerReflections,#who=who)
         >= Send(SETTINGS_OBJECT,@GetPlayerReflectionLimit))
         AND NOT (IsClass(who,&DM)
            AND Send(who,@PlayerIsImmortal))
      {
         Send(who,@MsgSendUser,#message_rsc=summonreflection_limit_rsc);

         return FALSE;
      }

      propagate;
   }

   GetNumSpellTargets()
   {
      return 0;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=1)
   {
      local oRoom, oReflection;

      oRoom = Send(who,@GetOwner);

      if (oRoom = $)
      {
         Debug(who, Send(who,@GetName), " tried to create a reflection in $ room.");

         return;
      }

      oReflection = Create(&Reflection,#iSpellpower=iSpellpower,#oMaster=who);
      Send(oReflection,@SetOriginal,#who=who);

      Send(oRoom,@NewHold,#what=oReflection,#new_row=Send(who,@GetRow),
            #new_col=Send(who,@GetCol),#fine_row=Send(who,@GetFineRow),
            #fine_col=Send(who,@GetFineCol));

      Send(who,@MsgSendUser,#message_rsc=summonreflection_cast_rsc);

      // poMaster set in Reflection's Constructor, but not added as a minion.
      Send(who,@NewControlledMinion,#minion=oReflection);
      Send(SYS,@AddReflection,#who=who,#oReflection=oReflection);
      Send(oReflection,@SetBehaviorFlag,#flag=AI_MOVE_FOLLOW_MASTER,
            #value=TRUE);

      propagate;
   }

   CountPlayerReflections(who=$)
   "Count number of reflections being maintained by the caster."
   {
      local lRefs;

      lRefs = GetListNode(Send(SYS,@GetReflectionsList), 1, who);
      if (lRefs <> $)
      {
         return Length(Nth(lRefs, 2));
      }

      return 0;
   }

end
////////////////////////////////////////////////////////////////////////////////
