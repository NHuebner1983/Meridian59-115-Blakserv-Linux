// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Defile is Spell

constants:
   include blakston.khd

resources:

   include defile.lkod

   defile_name_rsc = "defile"
   defile_icon_rsc = idefile.bgf
   defile_desc_rsc = \
      "In this darkest of rituals, the very spirit of Qor is summoned to "
      "defile the corpse of a monster or player, transforming flesh and blood "
      "into magical energy for the caster.  Requires a fairy wing "
      "and the slain."
   defile_cast_rsc = "Your nausea betokens the imminence of Qor."
   defile_corpse_gone = \
      "Your defile spell fails because the corpse has already "
      "returned to the earth."
   defile_max = \
      "If you were to invite more eldritch energy inside of you, there is no "
      "telling what would happen!"
   defile_not_good = "Qor may only harvest the souls of the good at heart."

   defile_sound = qdefile.ogg

classvars:

   vrName = defile_name_rsc
   vrIcon = defile_icon_rsc
   vrDesc = defile_desc_rsc

   viSpell_num = SID_DEFILE
   viSchool = SS_QOR

   viSpell_level = 3
   viMana = 0
   viMana_bonus = 10

   viCast_time = 10000
   viChance_to_Increase = 25
   viMeditate_ratio = 30

   vrSucceed_wav = defile_sound

properties:

messages:

   ResetReagents()
   {
      // separate message so can change, then set from admin mode

      plReagents = $;
      plReagents = Cons([&FairyWing, 1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who=$,lTargets=$)
   {
      local target, i;

      // Can cast spell if the 1 target item is a corpse
      if Length(lTargets) <> 1
      {
         return FALSE;
      }

      target = First(lTargets);
      if NOT IsClass(target,&DeadBody)
      {
         Send(who,@MsgSendUser,#message_rsc=spell_bad_target, 
              #parm1=Send(self,@GetName),#parm2=Send(target,@GetDef),
              #parm3=Send(target,@GetName));

         return FALSE;
      }

      if NOT Send(target,@WasGoodPlayer)
      {
         Send(who,@MsgSendUser,#message_rsc=defile_not_good);

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oTarget, oRoom, iKarmaAct;

      oTarget = First(lTargets);
      oRoom = Send(who,@GetOwner);
      iKarmaAct = 0;

      if Send(oTarget,@GetOwner) <> oRoom
      {
         Send(who,@MsgSendUser,#message_rsc=defile_corpse_gone);

         return;
      }

      if Send(who,@GetKarma) <> $
      {
         if abs(Send(who,@GetKarma)) < (iSpellpower + 1)
         {
            iKarmaAct = Bound(iKarmaAct,Abs(Send(who,@GetKarma)),iSpellpower+1);
         }
         else
         {
            iKarmaAct = Abs(Send(who,@GetKarma));
         }

         Send(who,@AddKarma,#amount=Send(who,@CalculateKarmaChangeFromAct,
               #karma_act=-iKarmaAct,
               #karma_doer=Send(who,@GetKarma),#swing_factor=4));
      }

      Send(who,@MsgSendUser,#message_rsc=defile_cast_rsc);
      Send(who,@GainMana,#amount=(viMana_bonus+(iSpellPower/3)));

      // Don't let them defile to over-max
      if Send(who,@GetMana) > Send(who,@GetMaxMana)
      {
         Send(who,@LoseMana,#amount=(Send(who,@GetMana)-Send(who,@GetMaxMana)));
      }

      Send(oTarget,@Delete);

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
