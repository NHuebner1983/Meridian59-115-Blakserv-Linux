// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
IllusionaryWounds is AttackSpell

constants:
   include blakston.khd

resources:

   include illwound.lkod

   illusionarywounds_name_rsc = "illusionary wounds"
   illusionarywounds_icon_rsc = iilluwou.bgf
   illusionarywounds_desc_rsc = \
      "Causes the victim to see imagined wounds, but imagination "
      "always gives in to one's right mind, assuming one lives so long.  "
      "Requires solagh and firesand."

   illusionarywounds_cast = "Your illusion takes the form of %s."

   illusionarywounds_off = "Hey!  Some of those wounds were illusionary!"
   illusionarywounds_sound = riija.ogg

classvars:

   vrName = illusionarywounds_name_rsc
   vrIcon = illusionarywounds_icon_rsc
   vrDesc = illusionarywounds_desc_rsc

   viSpell_num = SID_ILLUSIONARY_WOUNDS
   viSchool = SS_RIIJA
   viSpell_level = 3
   viMana = 7

   viSpellExertion = 2

   vrSucceed_wav = illusionarywounds_sound

   viHarmful = TRUE
   viOutlaw = TRUE
   viNoNewbieOffense = TRUE

properties:

   piRange = 4 * FINENESS

   piManaFocusBonus = 0

   // This is NOT affected by resistances, even though it has a damage type.
   pbAbsolute = TRUE

   // This is the spell we are simulating.
   piRandomSpell = $

   // This is the list of spells we can choose from.
   plRandomSpells = $

messages:

   Constructor()
   {
      plRandomSpells = [ SID_BLAST_OF_FIRE, SID_SHOCKING_FURY,
                         SID_EXPLOSIVE_FROST, SID_SPLASH_OF_ACID ];

      propagate;
   }

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Solagh,1],plReagents);
      plReagents = Cons([&FireSand,1],plReagents);

      return;
   }

   CastSpell(who = $, lTargets = $, iSpellPower = 0, bItemCast = FALSE)
   {
      local iDamage, iManaFocus, oRoom, oSpell, oTarget, iDuration;

      oTarget = First(lTargets);

      oRoom = Send(who,@GetOwner);
      Send(oRoom,@SpellCast,#who=who,#oSpell=self,#lItems=lTargets);

      // Double check that we have a valid plRandomSpells list.
      if plRandomSpells = $
      {
         plRandomSpells = [ SID_BLAST_OF_FIRE, SID_SHOCKING_FURY,
                            SID_EXPLOSIVE_FROST, SID_SPLASH_OF_ACID ];
      }

      // Only switch damage rarely so we get a clumpy effect
      if Random(1,100) < 50 OR piRandomSpell = $
      {
         // Okay, pick our damage type here.  Due to the miracles of single-threading,
         //  this will allow us to key the right damage type and spell name for
         //  illusionary wounds.
         piRandomSpell = Nth(plRandomSpells,Random(1,Length(plRandomSpells)));
      }

      oSpell = Send(SYS,@FindSpellByNum,#num=piRandomSpell);
      Send(oRoom,@SomethingWaveRoom,#what=who,#wave_rsc=Send(oSpell,@GetSpellSound));
      Send(who,@MsgSendUser,#message_rsc=illusionarywounds_cast,
            #parm1=Send(oSpell,@GetName));

      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower);
      iDamage = Send(self,@GetHPLoss,#who=who,#victim=First(lTargets),#iSpellPower=iSpellPower);

      if IsClass(who,&Player)
      {
         Send(who,@SetKillTarget,#target=oTarget);
         Send(who,@SetPlayerFlag,#flag=PFLAG_DID_DAMAGE,#value=TRUE);

         if NOT bItemCast
         {
            // Do the sound, and the third person animation.
            piCast_successes = piCast_successes + 1;
            // Do this for the window overlay.
            Send(who,@DoCast);
         }
      }

      // After figuring damage, do an AssessDamage.  This will handle the necessary
      //  attack messages.
      iDamage = Send(oTarget,@AssessDamage,#what=who,#damage=iDamage,#atype=viAttack_type,
                     #aspell=viAttack_spell,#absolute=pbAbsolute,#precision=TRUE);

      Send(who,@AssessHit,#what=oTarget,#damage=iDamage,#use_weapon=self);

      if iDamage = $
      {
         Send(who,@KilledSomething,#what=oTarget,#use_weapon=self);
      }
      else
      {
         Send(oTarget,@StartEnchantment,#what=self,
               #time=Send(self,@GetDuration,#iSpellPower=iSpellPower),
               #lastcall=TRUE,#state=iDamage,#addicon=FALSE);
      }

      Send(oRoom,@SomethingAttacked,#what=who,#victim=oTarget,#use_weapon=self);

      Send(self,@DoSideEffect,#who=who,#victim=oTarget,#damage=iDamage);

      // If the spell was cast on a monster, let the monster keep track of that 
      // for loot.
      if IsClass(oTarget,&Monster) AND NOT bItemCast
      {
        Send(oTarget,@AddToSpellList,#spellnum=viSpell_num);
      }

      if NOT bItemCast
      {
         Send(self,@ImproveAbility,#who=who,#target=oTarget);
      }

      // DON'T PROPAGATE!  This way, events will be handled in the proper order.
      return;
   }

   GetAttackSpell()
   {
      if piRandomSpell = $
      {
         return $;
      }

      return Send(Send(SYS,@FindSpellByNum,#num=piRandomSpell),@GetAttackSpell);
   }

   // This is for the attack message infrastructure.
   GetAttackName()
   {
      if piRandomSpell = $
      {
         return vrName;
      }

      return Send(Send(SYS,@FindSpellByNum,#num=piRandomSpell),@GetAttackName);
   }

   // iFactor is the factor to divide damage by.
   GetHPLoss(who=$,victim=$,iSpellPower=0,iFactor=1)
   {
      local iBaseDamage, iHPLoss, iMaxHPs;

      if IsClass(victim,&Player)
      {
         iBaseDamage = 17 + (50 - Send(victim,@GetIntellect))/10;
         iMaxHPs = Send(victim,@GetMaxHealth);
      }
      else
      {
         iBaseDamage = 30 - Bound(Send(victim,@GetDifficulty)*2,1,20);
         iMaxHPs = Send(victim,@ReturnMaxHitPoints);
      }

      // Inflation by factor 100 for greater accuracy.
      iBaseDamage = iBaseDamage * 100;

      // Intellect boosts base damage
      iBaseDamage = Send(self,@DamageFactors,#damage=iBaseDamage,#who=who,
                           #victim=victim);

      iHPLoss = iBaseDamage * iSpellPower / SPELLPOWER_MAXIMUM;

      // Always leaves 10 HP behind (for safety), no more than 1/3 damage.
      iHPLoss = Bound(iHPLoss,0,(iMaxHps*33));
      iHPLoss = Bound(iHPLoss,0,Send(victim,@GetExactHealth) - 1000);

      if iFactor > 1
      {
         iHPLoss = iHPLoss / iFactor;
      }

      return iHPLoss;
   }

   DamageFactors(damage = 0, who = $)
   {
      local iDamage, iIntellect;

      // Get int damage bonus.
      iIntellect = Send(who,@GetIntellect);
      iDamage = ((100+Bound(iIntellect-25,0,40))*damage)/100;

      return iDamage;
   }

   GetDuration(iSpellPower = 0)
   {
      local iDuration;

      iDuration = 20000 + (iSpellPower * 750);
      iDuration = Bound(iDuration,20000,80000);

      return iDuration;
   }

   EndEnchantment(who = $, state=$, report = TRUE)
   {
      Post(self,@EndEnchantmentEffects,#who=who,#state=state,#report=report);

      return;
   }

   EndEnchantmentEffects(who=$, state=$, report = TRUE)
   {
      if (Send(who,@GetExactHealth) > 0)
      {
         Send(who,@GainHealthNormal,#amount=state,#precision=TRUE);
         if IsClass(who,&Player)
            AND report
         {
            Send(who,@MsgSendUser,#message_rsc=illusionarywounds_off);
         }
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
